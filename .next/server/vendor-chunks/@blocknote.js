"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@blocknote";
exports.ids = ["vendor-chunks/@blocknote"];
exports.modules = {

/***/ "(ssr)/./node_modules/@blocknote/core/src/fonts/inter.css":
/*!**********************************************************!*\
  !*** ./node_modules/@blocknote/core/src/fonts/inter.css ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"66a5d4cc5d8e\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGJsb2Nrbm90ZS9jb3JlL3NyYy9mb250cy9pbnRlci5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbGl2ZWJsb2Nrcy1leGFtcGxlcy9uZXh0anMteWpzLWJsb2Nrbm90ZS1hZHZhbmNlZC8uL25vZGVfbW9kdWxlcy9AYmxvY2tub3RlL2NvcmUvc3JjL2ZvbnRzL2ludGVyLmNzcz8yNWZhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNjZhNWQ0Y2M1ZDhlXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@blocknote/core/src/fonts/inter.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@blocknote/react/dist/style.css":
/*!******************************************************!*\
  !*** ./node_modules/@blocknote/react/dist/style.css ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"22f58c72b7ed\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGJsb2Nrbm90ZS9yZWFjdC9kaXN0L3N0eWxlLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL0BsaXZlYmxvY2tzLWV4YW1wbGVzL25leHRqcy15anMtYmxvY2tub3RlLWFkdmFuY2VkLy4vbm9kZV9tb2R1bGVzL0BibG9ja25vdGUvcmVhY3QvZGlzdC9zdHlsZS5jc3M/NTU0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjIyZjU4YzcyYjdlZFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@blocknote/react/dist/style.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@blocknote/core/dist/blocknote.js":
/*!********************************************************!*\
  !*** ./node_modules/@blocknote/core/dist/blocknote.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockNoteEditor: () => (/* binding */ de),\n/* harmony export */   BlockNoteSchema: () => (/* binding */ Tt),\n/* harmony export */   FormattingToolbarProsemirrorPlugin: () => (/* binding */ co),\n/* harmony export */   FormattingToolbarView: () => (/* binding */ ao),\n/* harmony export */   HyperlinkToolbarProsemirrorPlugin: () => (/* binding */ ho),\n/* harmony export */   ImageToolbarProsemirrorPlugin: () => (/* binding */ fo),\n/* harmony export */   ImageToolbarView: () => (/* binding */ mo),\n/* harmony export */   SideMenuProsemirrorPlugin: () => (/* binding */ Co),\n/* harmony export */   SideMenuView: () => (/* binding */ Eo),\n/* harmony export */   SuggestionMenuProseMirrorPlugin: () => (/* binding */ yo),\n/* harmony export */   TableHandlesProsemirrorPlugin: () => (/* binding */ Io),\n/* harmony export */   TableHandlesView: () => (/* binding */ Bo),\n/* harmony export */   UniqueID: () => (/* binding */ Q),\n/* harmony export */   UnreachableCaseError: () => (/* binding */ N),\n/* harmony export */   addIdsToBlock: () => (/* binding */ Zo),\n/* harmony export */   addIdsToBlocks: () => (/* binding */ tr),\n/* harmony export */   addInlineContentAttributes: () => (/* binding */ pn),\n/* harmony export */   addInlineContentKeyboardShortcuts: () => (/* binding */ un),\n/* harmony export */   addStyleAttributes: () => (/* binding */ bn),\n/* harmony export */   blockToNode: () => (/* binding */ P),\n/* harmony export */   camelToDataKebab: () => (/* binding */ it),\n/* harmony export */   checkBlockHasDefaultProp: () => (/* binding */ zr),\n/* harmony export */   checkBlockIsDefaultType: () => (/* binding */ Rr),\n/* harmony export */   checkBlockTypeHasDefaultProp: () => (/* binding */ Wn),\n/* harmony export */   checkDefaultBlockTypeInSchema: () => (/* binding */ L),\n/* harmony export */   contentNodeToInlineContent: () => (/* binding */ wt),\n/* harmony export */   createBlockSpec: () => (/* binding */ dn),\n/* harmony export */   createBlockSpecFromStronglyTypedTiptapNode: () => (/* binding */ tt),\n/* harmony export */   createExternalHTMLExporter: () => (/* binding */ at),\n/* harmony export */   createInlineContentSpec: () => (/* binding */ Dr),\n/* harmony export */   createInlineContentSpecFromTipTapNode: () => (/* binding */ mn),\n/* harmony export */   createInternalBlockSpec: () => (/* binding */ Qt),\n/* harmony export */   createInternalHTMLSerializer: () => (/* binding */ Jt),\n/* harmony export */   createInternalInlineContentSpec: () => (/* binding */ hn),\n/* harmony export */   createInternalStyleSpec: () => (/* binding */ ee),\n/* harmony export */   createStronglyTypedTiptapNode: () => (/* binding */ W),\n/* harmony export */   createStyleSpec: () => (/* binding */ Or),\n/* harmony export */   createStyleSpecFromTipTapMark: () => (/* binding */ O),\n/* harmony export */   createSuggestionMenu: () => (/* binding */ Vr),\n/* harmony export */   defaultBlockSchema: () => (/* binding */ jn),\n/* harmony export */   defaultBlockSpecs: () => (/* binding */ oe),\n/* harmony export */   defaultInlineContentSchema: () => (/* binding */ Ur),\n/* harmony export */   defaultInlineContentSpecs: () => (/* binding */ ie),\n/* harmony export */   defaultProps: () => (/* binding */ w),\n/* harmony export */   defaultStyleSchema: () => (/* binding */ _r),\n/* harmony export */   defaultStyleSpecs: () => (/* binding */ re),\n/* harmony export */   filterSuggestionItems: () => (/* binding */ $r),\n/* harmony export */   formatKeyboardShortcut: () => (/* binding */ V),\n/* harmony export */   formattingToolbarPluginKey: () => (/* binding */ lo),\n/* harmony export */   getBlockFromPos: () => (/* binding */ ln),\n/* harmony export */   getBlockNoteExtensions: () => (/* binding */ qo),\n/* harmony export */   getBlockSchemaFromSpecs: () => (/* binding */ Zt),\n/* harmony export */   getDefaultSlashMenuItems: () => (/* binding */ Fr),\n/* harmony export */   getDraggableBlockFromCoords: () => (/* binding */ Ct),\n/* harmony export */   getInlineContentParseRules: () => (/* binding */ fn),\n/* harmony export */   getInlineContentSchemaFromSpecs: () => (/* binding */ te),\n/* harmony export */   getParseRules: () => (/* binding */ cn),\n/* harmony export */   getStyleParseRules: () => (/* binding */ yn),\n/* harmony export */   getStyleSchemaFromSpecs: () => (/* binding */ ne),\n/* harmony export */   hyperlinkToolbarPluginKey: () => (/* binding */ uo),\n/* harmony export */   inheritedProps: () => (/* binding */ Xt),\n/* harmony export */   inlineContentToNodes: () => (/* binding */ st),\n/* harmony export */   insertOrUpdateBlock: () => (/* binding */ A),\n/* harmony export */   isAppleOS: () => (/* binding */ an),\n/* harmony export */   isLinkInlineContent: () => (/* binding */ It),\n/* harmony export */   isPartialLinkInlineContent: () => (/* binding */ $t),\n/* harmony export */   isSafari: () => (/* binding */ Pr),\n/* harmony export */   isStyledTextInlineContent: () => (/* binding */ Y),\n/* harmony export */   mergeCSSClasses: () => (/* binding */ R),\n/* harmony export */   nodeToBlock: () => (/* binding */ k),\n/* harmony export */   nodeToCustomInlineContent: () => (/* binding */ Wt),\n/* harmony export */   partialBlockToBlockForTesting: () => (/* binding */ ue),\n/* harmony export */   partialBlocksToBlocksForTesting: () => (/* binding */ Gr),\n/* harmony export */   propsToAttributes: () => (/* binding */ Yt),\n/* harmony export */   sideMenuPluginKey: () => (/* binding */ So),\n/* harmony export */   stylePropsToAttributes: () => (/* binding */ gn),\n/* harmony export */   suggestionMenuPluginKey: () => (/* binding */ U),\n/* harmony export */   tableContentToNodes: () => (/* binding */ Gt),\n/* harmony export */   tableHandlesPluginKey: () => (/* binding */ X),\n/* harmony export */   uploadToTmpFilesDotOrg_DEV_ONLY: () => (/* binding */ Hr),\n/* harmony export */   wrapInBlockStructure: () => (/* binding */ pt)\n/* harmony export */ });\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var rehype_parse__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! rehype-parse */ \"(ssr)/./node_modules/rehype-parse/lib/index.js\");\n/* harmony import */ var rehype_stringify__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! rehype-stringify */ \"(ssr)/./node_modules/rehype-stringify/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! unified */ \"(ssr)/./node_modules/unified/lib/index.js\");\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var hast_util_from_dom__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! hast-util-from-dom */ \"(ssr)/./node_modules/hast-util-from-dom/lib/index.js\");\n/* harmony import */ var _tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/extension-bold */ \"(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js\");\n/* harmony import */ var _tiptap_extension_code__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/extension-code */ \"(ssr)/./node_modules/@tiptap/extension-code/dist/index.js\");\n/* harmony import */ var _tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/extension-italic */ \"(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js\");\n/* harmony import */ var _tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-strike */ \"(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js\");\n/* harmony import */ var _tiptap_extension_underline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-underline */ \"(ssr)/./node_modules/@tiptap/extension-underline/dist/index.js\");\n/* harmony import */ var _tiptap_extension_table_cell__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/extension-table-cell */ \"(ssr)/./node_modules/@tiptap/extension-table-cell/dist/index.js\");\n/* harmony import */ var _tiptap_extension_table_header__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/extension-table-header */ \"(ssr)/./node_modules/@tiptap/extension-table-header/dist/index.js\");\n/* harmony import */ var _tiptap_extension_table_row__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tiptap/extension-table-row */ \"(ssr)/./node_modules/@tiptap/extension-table-row/dist/index.js\");\n/* harmony import */ var prosemirror_tables__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! prosemirror-tables */ \"(ssr)/./node_modules/prosemirror-tables/dist/index.js\");\n/* harmony import */ var rehype_remark__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! rehype-remark */ \"(ssr)/./node_modules/rehype-remark/lib/index.js\");\n/* harmony import */ var remark_gfm__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! remark-gfm */ \"(ssr)/./node_modules/remark-gfm/index.js\");\n/* harmony import */ var remark_stringify__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! remark-stringify */ \"(ssr)/./node_modules/remark-stringify/lib/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! remark-parse */ \"(ssr)/./node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! remark-rehype */ \"(ssr)/./node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! remark-rehype */ \"(ssr)/./node_modules/mdast-util-to-hast/lib/handlers/index.js\");\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! prosemirror-view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\n/* harmony import */ var _tiptap_extension_collaboration__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tiptap/extension-collaboration */ \"(ssr)/./node_modules/@tiptap/extension-collaboration/dist/index.js\");\n/* harmony import */ var _tiptap_extension_collaboration_cursor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tiptap/extension-collaboration-cursor */ \"(ssr)/./node_modules/@tiptap/extension-collaboration-cursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tiptap/extension-dropcursor */ \"(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tiptap/extension-gapcursor */ \"(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tiptap/extension-hard-break */ \"(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js\");\n/* harmony import */ var _tiptap_extension_history__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @tiptap/extension-history */ \"(ssr)/./node_modules/@tiptap/extension-history/dist/index.js\");\n/* harmony import */ var _tiptap_extension_link__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @tiptap/extension-link */ \"(ssr)/./node_modules/@tiptap/extension-link/dist/index.js\");\n/* harmony import */ var _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @tiptap/extension-text */ \"(ssr)/./node_modules/@tiptap/extension-text/dist/index.js\");\nvar he = Object.defineProperty;\nvar me = (n, t, e) => t in n ? he(n, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : n[t] = e;\nvar d = (n, t, e) => (me(n, typeof t != \"symbol\" ? t + \"\" : t, e), e);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction tn(n, t = JSON.stringify) {\n  const e = {};\n  return n.filter((o) => {\n    const r = t(o);\n    return Object.prototype.hasOwnProperty.call(e, r) ? !1 : e[r] = !0;\n  });\n}\nfunction en(n) {\n  const t = n.filter(\n    (o, r) => n.indexOf(o) !== r\n  );\n  return tn(t);\n}\nconst Q = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n  name: \"uniqueID\",\n  // we’ll set a very high priority to make sure this runs first\n  // and is compatible with `appendTransaction` hooks of other extensions\n  priority: 1e4,\n  addOptions() {\n    return {\n      attributeName: \"id\",\n      types: [],\n      generateID: () => {\n        if (typeof window < \"u\" && window.__TEST_OPTIONS) {\n          const n = window.__TEST_OPTIONS;\n          return n.mockID === void 0 ? n.mockID = 0 : n.mockID++, n.mockID.toString();\n        }\n        return (0,uuid__WEBPACK_IMPORTED_MODULE_18__[\"default\"])();\n      },\n      filterTransaction: null\n    };\n  },\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          [this.options.attributeName]: {\n            default: null,\n            parseHTML: (n) => n.getAttribute(`data-${this.options.attributeName}`),\n            renderHTML: (n) => ({\n              [`data-${this.options.attributeName}`]: n[this.options.attributeName]\n            })\n          }\n        }\n      }\n    ];\n  },\n  // check initial content for missing ids\n  // onCreate() {\n  //   // Don’t do this when the collaboration extension is active\n  //   // because this may update the content, so Y.js tries to merge these changes.\n  //   // This leads to empty block nodes.\n  //   // See: https://github.com/ueberdosis/tiptap/issues/2400\n  //   if (\n  //     this.editor.extensionManager.extensions.find(\n  //       (extension) => extension.name === \"collaboration\"\n  //     )\n  //   ) {\n  //     return;\n  //   }\n  //   const { view, state } = this.editor;\n  //   const { tr, doc } = state;\n  //   const { types, attributeName, generateID } = this.options;\n  //   const nodesWithoutId = findChildren(doc, (node) => {\n  //     return (\n  //       types.includes(node.type.name) && node.attrs[attributeName] === null\n  //     );\n  //   });\n  //   nodesWithoutId.forEach(({ node, pos }) => {\n  //     tr.setNodeMarkup(pos, undefined, {\n  //       ...node.attrs,\n  //       [attributeName]: generateID(),\n  //     });\n  //   });\n  //   tr.setMeta(\"addToHistory\", false);\n  //   view.dispatch(tr);\n  // },\n  addProseMirrorPlugins() {\n    let n = null, t = !1;\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n        key: new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"uniqueID\"),\n        appendTransaction: (e, o, r) => {\n          const i = e.some((f) => f.docChanged) && !o.doc.eq(r.doc), s = this.options.filterTransaction && e.some((f) => {\n            let y, S;\n            return !(!((S = (y = this.options).filterTransaction) === null || S === void 0) && S.call(y, f));\n          });\n          if (!i || s)\n            return;\n          const { tr: a } = r, { types: l, attributeName: c, generateID: p } = this.options, u = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.combineTransactionSteps)(\n            o.doc,\n            e\n          ), { mapping: m } = u;\n          if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.getChangedRanges)(u).forEach(({ newRange: f }) => {\n            const y = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.findChildrenInRange)(\n              r.doc,\n              f,\n              (E) => l.includes(E.type.name)\n            ), S = y.map(({ node: E }) => E.attrs[c]).filter((E) => E !== null), B = en(S);\n            y.forEach(({ node: E, pos: D }) => {\n              let z;\n              const K = (z = a.doc.nodeAt(D)) === null || z === void 0 ? void 0 : z.attrs[c];\n              if (K === null) {\n                const lt = o.doc.type.createAndFill().content;\n                if (o.doc.content.findDiffStart(lt) === null) {\n                  const et = JSON.parse(\n                    JSON.stringify(r.doc.toJSON())\n                  );\n                  if (et.content[0].content[0].attrs.id = \"initialBlockId\", JSON.stringify(et.content) === JSON.stringify(lt.toJSON())) {\n                    a.setNodeMarkup(D, void 0, {\n                      ...E.attrs,\n                      [c]: \"initialBlockId\"\n                    });\n                    return;\n                  }\n                }\n                a.setNodeMarkup(D, void 0, {\n                  ...E.attrs,\n                  [c]: p()\n                });\n                return;\n              }\n              const { deleted: g } = m.invert().mapResult(D);\n              g && B.includes(K) && a.setNodeMarkup(D, void 0, {\n                ...E.attrs,\n                [c]: p()\n              });\n            });\n          }), !!a.steps.length)\n            return a;\n        },\n        // we register a global drag handler to track the current drag source element\n        view(e) {\n          const o = (r) => {\n            let i;\n            n = !((i = e.dom.parentElement) === null || i === void 0) && i.contains(r.target) ? e.dom.parentElement : null;\n          };\n          return window.addEventListener(\"dragstart\", o), {\n            destroy() {\n              window.removeEventListener(\"dragstart\", o);\n            }\n          };\n        },\n        props: {\n          // `handleDOMEvents` is called before `transformPasted`\n          // so we can do some checks before\n          handleDOMEvents: {\n            // only create new ids for dropped content while holding `alt`\n            // or content is dragged from another editor\n            drop: (e, o) => {\n              let r;\n              return (n !== e.dom.parentElement || ((r = o.dataTransfer) === null || r === void 0 ? void 0 : r.effectAllowed) === \"copy\") && (n = null, t = !0), !1;\n            },\n            // always create new ids on pasted content\n            paste: () => (t = !0, !1)\n          },\n          // we’ll remove ids for every pasted node\n          // so we can create a new one within `appendTransaction`\n          transformPasted: (e) => {\n            if (!t)\n              return e;\n            const { types: o, attributeName: r } = this.options, i = (s) => {\n              const a = [];\n              return s.forEach((l) => {\n                if (l.isText) {\n                  a.push(l);\n                  return;\n                }\n                if (!o.includes(l.type.name)) {\n                  a.push(l.copy(i(l.content)));\n                  return;\n                }\n                const c = l.type.create(\n                  {\n                    ...l.attrs,\n                    [r]: null\n                  },\n                  i(l.content),\n                  l.marks\n                );\n                a.push(c);\n              }), prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(a);\n            };\n            return t = !1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(\n              i(e.content),\n              e.openStart,\n              e.openEnd\n            );\n          }\n        }\n      })\n    ];\n  }\n});\nfunction Ft(n) {\n  const t = n.attrs.id, e = n.firstChild, o = e.type, r = n.childCount === 2 ? n.lastChild.childCount : 0;\n  return {\n    id: t,\n    node: n,\n    contentNode: e,\n    contentType: o,\n    numChildBlocks: r\n  };\n}\nfunction b(n, t) {\n  const o = n.nodeSize - 2;\n  if (t <= 1)\n    for (t = 1 + 1; n.resolve(t).parent.type.name !== \"blockContainer\" && t < o; )\n      t++;\n  else if (t >= o)\n    for (t = o - 1; n.resolve(t).parent.type.name !== \"blockContainer\" && t > 1; )\n      t--;\n  n.resolve(t).parent.type.name === \"blockGroup\" && t++;\n  const r = n.resolve(t), i = r.depth;\n  let s = r.node(i), a = i;\n  for (; ; ) {\n    if (a < 0)\n      throw new Error(\n        \"Could not find blockContainer node. This can only happen if the underlying BlockNote schema has been edited.\"\n      );\n    if (s.type.name === \"blockContainer\")\n      break;\n    a -= 1, s = r.node(a);\n  }\n  const { id: l, contentNode: c, contentType: p, numChildBlocks: u } = Ft(s), m = r.start(a), h = r.end(a);\n  return {\n    id: l,\n    node: s,\n    contentNode: c,\n    contentType: p,\n    numChildBlocks: u,\n    startPos: m,\n    endPos: h,\n    depth: a\n  };\n}\nfunction It(n) {\n  return n.type === \"link\";\n}\nfunction $t(n) {\n  return typeof n != \"string\" && n.type === \"link\";\n}\nfunction Y(n) {\n  return typeof n != \"string\" && n.type === \"text\";\n}\nclass N extends Error {\n  constructor(t) {\n    super(`Unreachable case: ${t}`);\n  }\n}\nfunction Lt(n, t, e) {\n  const o = [];\n  for (const [r, i] of Object.entries(n.styles)) {\n    const s = e[r];\n    if (!s)\n      throw new Error(`style ${r} not found in styleSchema`);\n    if (s.propSchema === \"boolean\")\n      o.push(t.mark(r));\n    else if (s.propSchema === \"string\")\n      o.push(t.mark(r, { stringValue: i }));\n    else\n      throw new N(s.propSchema);\n  }\n  return n.text.split(/(\\n)/g).filter((r) => r.length > 0).map((r) => r === `\n` ? t.nodes.hardBreak.create() : t.text(r, o));\n}\nfunction nn(n, t, e) {\n  const o = t.marks.link.create({\n    href: n.href\n  });\n  return ft(n.content, t, e).map(\n    (r) => {\n      if (r.type.name === \"text\")\n        return r.mark([...r.marks, o]);\n      if (r.type.name === \"hardBreak\")\n        return r;\n      throw new Error(\"unexpected node type\");\n    }\n  );\n}\nfunction ft(n, t, e) {\n  const o = [];\n  if (typeof n == \"string\")\n    return o.push(\n      ...Lt(\n        { type: \"text\", text: n, styles: {} },\n        t,\n        e\n      )\n    ), o;\n  for (const r of n)\n    o.push(...Lt(r, t, e));\n  return o;\n}\nfunction st(n, t, e) {\n  const o = [];\n  for (const r of n)\n    typeof r == \"string\" ? o.push(...ft(r, t, e)) : $t(r) ? o.push(...nn(r, t, e)) : Y(r) ? o.push(...ft([r], t, e)) : o.push(\n      jt(r, t, e)\n    );\n  return o;\n}\nfunction Gt(n, t, e) {\n  const o = [];\n  for (const r of n.rows) {\n    const i = [];\n    for (const a of r.cells) {\n      let l;\n      if (!a)\n        l = t.nodes.tableParagraph.create({});\n      else if (typeof a == \"string\")\n        l = t.nodes.tableParagraph.create({}, t.text(a));\n      else {\n        const p = st(a, t, e);\n        l = t.nodes.tableParagraph.create({}, p);\n      }\n      const c = t.nodes.tableCell.create({}, l);\n      i.push(c);\n    }\n    const s = t.nodes.tableRow.create({}, i);\n    o.push(s);\n  }\n  return o;\n}\nfunction jt(n, t, e) {\n  let o, r = n.type;\n  if (r === void 0 && (r = \"paragraph\"), !t.nodes[r])\n    throw new Error(`node type ${r} not found in schema`);\n  if (!n.content)\n    o = t.nodes[r].create(n.props);\n  else if (typeof n.content == \"string\")\n    o = t.nodes[r].create(\n      n.props,\n      t.text(n.content)\n    );\n  else if (Array.isArray(n.content)) {\n    const i = st(n.content, t, e);\n    o = t.nodes[r].create(n.props, i);\n  } else if (n.content.type === \"tableContent\") {\n    const i = Gt(n.content, t, e);\n    o = t.nodes[r].create(n.props, i);\n  } else\n    throw new N(n.content.type);\n  return o;\n}\nfunction P(n, t, e) {\n  let o = n.id;\n  o === void 0 && (o = Q.options.generateID());\n  const r = jt(\n    n,\n    t,\n    e\n  ), i = [];\n  if (n.children)\n    for (const a of n.children)\n      i.push(P(a, t, e));\n  const s = t.nodes.blockGroup.create({}, i);\n  return t.nodes.blockContainer.create(\n    {\n      id: o,\n      ...n.props\n    },\n    i.length > 0 ? [r, s] : r\n  );\n}\nfunction on(n, t, e) {\n  const o = {\n    type: \"tableContent\",\n    rows: []\n  };\n  return n.content.forEach((r) => {\n    const i = {\n      cells: []\n    };\n    r.content.forEach((s) => {\n      i.cells.push(\n        wt(\n          s.firstChild,\n          t,\n          e\n        )\n      );\n    }), o.rows.push(i);\n  }), o;\n}\nfunction wt(n, t, e) {\n  const o = [];\n  let r;\n  return n.content.forEach((i) => {\n    if (i.type.name === \"hardBreak\") {\n      if (r)\n        if (Y(r))\n          r.text += `\n`;\n        else if (It(r))\n          r.content[r.content.length - 1].text += `\n`;\n        else\n          throw new Error(\"unexpected\");\n      else\n        r = {\n          type: \"text\",\n          text: `\n`,\n          styles: {}\n        };\n      return;\n    }\n    if (i.type.name !== \"link\" && i.type.name !== \"text\" && t[i.type.name]) {\n      r && (o.push(r), r = void 0), o.push(\n        Wt(i, t, e)\n      );\n      return;\n    }\n    const s = {};\n    let a;\n    for (const l of i.marks)\n      if (l.type.name === \"link\")\n        a = l;\n      else {\n        const c = e[l.type.name];\n        if (!c)\n          throw new Error(`style ${l.type.name} not found in styleSchema`);\n        if (c.propSchema === \"boolean\")\n          s[c.type] = !0;\n        else if (c.propSchema === \"string\")\n          s[c.type] = l.attrs.stringValue;\n        else\n          throw new N(c.propSchema);\n      }\n    r ? Y(r) ? a ? (o.push(r), r = {\n      type: \"link\",\n      href: a.attrs.href,\n      content: [\n        {\n          type: \"text\",\n          text: i.textContent,\n          styles: s\n        }\n      ]\n    }) : JSON.stringify(r.styles) === JSON.stringify(s) ? r.text += i.textContent : (o.push(r), r = {\n      type: \"text\",\n      text: i.textContent,\n      styles: s\n    }) : It(r) && (a ? r.href === a.attrs.href ? JSON.stringify(\n      r.content[r.content.length - 1].styles\n    ) === JSON.stringify(s) ? r.content[r.content.length - 1].text += i.textContent : r.content.push({\n      type: \"text\",\n      text: i.textContent,\n      styles: s\n    }) : (o.push(r), r = {\n      type: \"link\",\n      href: a.attrs.href,\n      content: [\n        {\n          type: \"text\",\n          text: i.textContent,\n          styles: s\n        }\n      ]\n    }) : (o.push(r), r = {\n      type: \"text\",\n      text: i.textContent,\n      styles: s\n    })) : a ? r = {\n      type: \"link\",\n      href: a.attrs.href,\n      content: [\n        {\n          type: \"text\",\n          text: i.textContent,\n          styles: s\n        }\n      ]\n    } : r = {\n      type: \"text\",\n      text: i.textContent,\n      styles: s\n    };\n  }), r && o.push(r), o;\n}\nfunction Wt(n, t, e) {\n  if (n.type.name === \"text\" || n.type.name === \"link\")\n    throw new Error(\"unexpected\");\n  const o = {}, r = t[n.type.name];\n  for (const [a, l] of Object.entries(n.attrs)) {\n    if (!r)\n      throw Error(\"ic node is of an unrecognized type: \" + n.type.name);\n    const c = r.propSchema;\n    a in c && (o[a] = l);\n  }\n  let i;\n  return r.content === \"styled\" ? i = wt(\n    n,\n    t,\n    e\n  ) : i = void 0, {\n    type: n.type.name,\n    props: o,\n    content: i\n  };\n}\nfunction k(n, t, e, o, r) {\n  if (n.type.name !== \"blockContainer\")\n    throw Error(\n      \"Node must be of type blockContainer, but is of type\" + n.type.name + \".\"\n    );\n  const i = r == null ? void 0 : r.get(n);\n  if (i)\n    return i;\n  const s = Ft(n);\n  let a = s.id;\n  a === null && (a = Q.options.generateID());\n  const l = {};\n  for (const [h, f] of Object.entries({\n    ...n.attrs,\n    ...s.contentNode.attrs\n  })) {\n    const y = t[s.contentType.name];\n    if (!y)\n      throw Error(\n        \"Block is of an unrecognized type: \" + s.contentType.name\n      );\n    const S = y.propSchema;\n    h in S && (l[h] = f);\n  }\n  const c = t[s.contentType.name], p = [];\n  for (let h = 0; h < s.numChildBlocks; h++)\n    p.push(\n      k(\n        n.lastChild.child(h),\n        t,\n        e,\n        o,\n        r\n      )\n    );\n  let u;\n  if (c.content === \"inline\")\n    u = wt(\n      s.contentNode,\n      e,\n      o\n    );\n  else if (c.content === \"table\")\n    u = on(\n      s.contentNode,\n      e,\n      o\n    );\n  else if (c.content === \"none\")\n    u = void 0;\n  else\n    throw new N(c.content);\n  const m = {\n    id: a,\n    type: c.type,\n    props: l,\n    content: u,\n    children: p\n  };\n  return r == null || r.set(n, m), m;\n}\nfunction rn(n) {\n  return n.document || window.document;\n}\nconst qt = (n, t, e, o, r) => {\n  if (!e.nodes[n.type.name])\n    throw new Error(\"Serializer is missing a node type: \" + n.type.name);\n  const { dom: i, contentDOM: s } = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.DOMSerializer.renderSpec(\n    rn(t),\n    e.nodes[n.type.name](n)\n  );\n  if (s) {\n    if (n.isLeaf)\n      throw new RangeError(\"Content hole not allowed in a leaf node spec\");\n    if (n.type.name === \"blockContainer\") {\n      const a = n.childCount > 0 && n.firstChild.type.spec.group === \"blockContent\" ? n.firstChild : void 0, l = n.childCount > 0 && n.lastChild.type.spec.group === \"blockGroup\" ? n.lastChild : void 0;\n      if (a !== void 0) {\n        const c = o.blockImplementations[a.type.name].implementation, u = (r ? c.toExternalHTML : c.toInternalHTML)(\n          k(\n            n,\n            o.schema.blockSchema,\n            o.schema.inlineContentSchema,\n            o.schema.styleSchema,\n            o.blockCache\n          ),\n          o\n        );\n        if (u.contentDOM !== void 0) {\n          if (n.isLeaf)\n            throw new RangeError(\n              \"Content hole not allowed in a leaf node spec\"\n            );\n          u.contentDOM.appendChild(\n            e.serializeFragment(a.content, t)\n          );\n        }\n        s.appendChild(u.dom);\n      }\n      l !== void 0 && e.serializeFragment(\n        prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(l),\n        t,\n        s\n      );\n    } else\n      e.serializeFragment(n.content, t, s);\n  }\n  return i;\n}, Kt = (n, t) => {\n  const e = t.serializeFragment(n), o = document.createElement(\"div\");\n  return o.appendChild(e), o.innerHTML;\n};\nfunction sn(n) {\n  const t = /* @__PURE__ */ new Set([\n    ...n.orderedListItemBlockTypes,\n    ...n.unorderedListItemBlockTypes\n  ]), e = (o) => {\n    var s;\n    if (o.children.length === 1 && ((s = o.children[0].properties) == null ? void 0 : s.dataNodeType) === \"blockGroup\") {\n      const a = o.children[0];\n      o.children.pop(), o.children.push(...a.children);\n    }\n    let r = o.children.length, i;\n    for (let a = 0; a < r; a++) {\n      const c = o.children[a].children[0], p = c.children[0], u = c.children.length === 2 ? c.children[1] : null, m = t.has(\n        p.properties.dataContentType\n      ), h = m ? n.orderedListItemBlockTypes.has(\n        p.properties.dataContentType\n      ) ? \"ol\" : \"ul\" : null;\n      if (u !== null && e(u), i && i.tagName !== h) {\n        o.children.splice(\n          a - i.children.length,\n          i.children.length,\n          i\n        );\n        const f = i.children.length - 1;\n        a -= f, r -= f, i = void 0;\n      }\n      if (m) {\n        i || (i = (0,hast_util_from_dom__WEBPACK_IMPORTED_MODULE_21__.fromDom)(\n          document.createElement(h)\n        ));\n        const f = (0,hast_util_from_dom__WEBPACK_IMPORTED_MODULE_21__.fromDom)(\n          document.createElement(\"li\")\n        );\n        f.children.push(p.children[0]), u !== null && f.children.push(...u.children), i.children.push(f);\n      } else if (u !== null) {\n        o.children.splice(a + 1, 0, ...u.children), o.children[a] = p.children[0];\n        const f = u.children.length;\n        a += f, r += f;\n      } else\n        o.children[a] = p.children[0];\n    }\n    i && o.children.splice(\n      r - i.children.length,\n      i.children.length,\n      i\n    );\n  };\n  return e;\n}\nconst at = (n, t) => {\n  const e = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.DOMSerializer.fromSchema(n);\n  return e.serializeNodeInner = (o, r) => qt(o, r, e, t, !0), e.exportProseMirrorFragment = (o) => (0,unified__WEBPACK_IMPORTED_MODULE_22__.unified)().use(rehype_parse__WEBPACK_IMPORTED_MODULE_23__[\"default\"], { fragment: !0 }).use(sn, {\n    orderedListItemBlockTypes: /* @__PURE__ */ new Set([\"numberedListItem\"]),\n    unorderedListItemBlockTypes: /* @__PURE__ */ new Set([\"bulletListItem\"])\n  }).use(rehype_stringify__WEBPACK_IMPORTED_MODULE_24__[\"default\"]).processSync(Kt(o, e)).value, e.exportBlocks = (o) => {\n    const r = o.map(\n      (s) => P(s, n, t.schema.styleSchema)\n    ), i = n.nodes.blockGroup.create(null, r);\n    return e.exportProseMirrorFragment(prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(i));\n  }, e;\n}, Jt = (n, t) => {\n  const e = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.DOMSerializer.fromSchema(n);\n  return e.serializeNodeInner = (o, r) => qt(o, r, e, t, !1), e.serializeProseMirrorFragment = (o) => Kt(o, e), e.serializeBlocks = (o) => {\n    const r = o.map(\n      (s) => P(s, n, t.schema.styleSchema)\n    ), i = n.nodes.blockGroup.create(null, r);\n    return e.serializeProseMirrorFragment(prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(i));\n  }, e;\n}, Hr = async (n) => {\n  const t = new FormData();\n  return t.append(\"file\", n), (await (await fetch(\"https://tmpfiles.org/api/v1/upload\", {\n    method: \"POST\",\n    body: t\n  })).json()).data.url.replace(\n    \"tmpfiles.org/\",\n    \"tmpfiles.org/dl/\"\n  );\n}, an = () => typeof navigator < \"u\" && (/Mac/.test(navigator.platform) || /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent));\nfunction V(n) {\n  return an() ? n.replace(\"Mod\", \"⌘\") : n.replace(\"Mod\", \"Ctrl\");\n}\nfunction R(...n) {\n  return n.filter((t) => t).join(\" \");\n}\nconst Pr = () => /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\nfunction Z(n, t, e, o) {\n  const r = document.createElement(\"div\");\n  r.className = R(\n    \"bn-block-content\",\n    e.class\n  ), r.setAttribute(\"data-content-type\", n);\n  for (const [s, a] of Object.entries(e))\n    s !== \"class\" && r.setAttribute(s, a);\n  const i = document.createElement(t);\n  i.className = R(\n    \"bn-inline-content\",\n    o.class\n  );\n  for (const [s, a] of Object.entries(\n    o\n  ))\n    s !== \"class\" && i.setAttribute(s, a);\n  return r.appendChild(i), {\n    dom: r,\n    contentDOM: i\n  };\n}\nconst Nt = (n, t) => {\n  const e = P(\n    n,\n    t._tiptapEditor.schema,\n    t.schema.styleSchema\n  ).firstChild, o = t._tiptapEditor.schema.nodes[e.type.name].spec.toDOM;\n  if (o === void 0)\n    throw new Error(\n      \"This block has no default HTML serialization as its corresponding TipTap node doesn't implement `renderHTML`.\"\n    );\n  const r = o(e);\n  if (typeof r != \"object\" || !(\"dom\" in r))\n    throw new Error(\n      \"Cannot use this block's default HTML serialization as its corresponding TipTap node's `renderHTML` function does not return an object with the `dom` property.\"\n    );\n  return r;\n}, w = {\n  backgroundColor: {\n    default: \"default\"\n  },\n  textColor: {\n    default: \"default\"\n  },\n  textAlignment: {\n    default: \"left\",\n    values: [\"left\", \"center\", \"right\", \"justify\"]\n  }\n}, Xt = [\"backgroundColor\", \"textColor\"];\nfunction it(n) {\n  return \"data-\" + n.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction Yt(n) {\n  const t = {};\n  return Object.entries(n).filter(([e, o]) => !Xt.includes(e)).forEach(([e, o]) => {\n    t[e] = {\n      default: o.default,\n      keepOnSplit: !0,\n      // Props are displayed in kebab-case as HTML attributes. If a prop's\n      // value is the same as its default, we don't display an HTML\n      // attribute for it.\n      parseHTML: (r) => {\n        const i = r.getAttribute(it(e));\n        if (i === null)\n          return null;\n        if (typeof o.default == \"boolean\")\n          return i === \"true\" ? !0 : i === \"false\" ? !1 : null;\n        if (typeof o.default == \"number\") {\n          const s = parseFloat(i);\n          return !Number.isNaN(s) && Number.isFinite(s) ? s : null;\n        }\n        return i;\n      },\n      renderHTML: (r) => r[e] !== o.default ? {\n        [it(e)]: r[e]\n      } : {}\n    };\n  }), t;\n}\nfunction ln(n, t, e, o) {\n  if (typeof n == \"boolean\")\n    throw new Error(\n      \"Cannot find node position as getPos is a boolean, not a function.\"\n    );\n  const r = n(), s = e.state.doc.resolve(r).node().attrs.id, a = t.getBlock(s);\n  if (a.type !== o)\n    throw new Error(\"Block type does not match\");\n  return a;\n}\nfunction pt(n, t, e, o, r) {\n  const i = document.createElement(\"div\");\n  if (r !== void 0)\n    for (const [s, a] of Object.entries(r))\n      s !== \"class\" && i.setAttribute(s, a);\n  i.className = R(\n    \"bn-block-content\",\n    (r == null ? void 0 : r.class) || \"\"\n  ), i.setAttribute(\"data-content-type\", t);\n  for (const [s, a] of Object.entries(e))\n    !Xt.includes(s) && a !== o[s].default && i.setAttribute(it(s), a);\n  return i.appendChild(n.dom), n.contentDOM !== void 0 && (n.contentDOM.className = R(\n    \"bn-inline-content\",\n    n.contentDOM.className\n  ), n.contentDOM.setAttribute(\"data-editable\", \"\")), {\n    ...n,\n    dom: i\n  };\n}\nfunction W(n) {\n  return _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create(n);\n}\nfunction Qt(n, t) {\n  return {\n    config: n,\n    implementation: t\n  };\n}\nfunction tt(n, t, e) {\n  return Qt(\n    {\n      type: n.name,\n      content: n.config.content === \"inline*\" ? \"inline\" : n.config.content === \"tableRow+\" ? \"table\" : \"none\",\n      propSchema: t\n    },\n    {\n      node: n,\n      requiredExtensions: e,\n      toInternalHTML: Nt,\n      toExternalHTML: Nt\n      // parse: () => undefined, // parse rules are in node already\n    }\n  );\n}\nfunction Zt(n) {\n  return Object.fromEntries(\n    Object.entries(n).map(([t, e]) => [t, e.config])\n  );\n}\nfunction cn(n, t) {\n  const e = [\n    {\n      tag: \"[data-content-type=\" + n.type + \"]\",\n      contentElement: \"[data-editable]\"\n    }\n  ];\n  return t && e.push({\n    tag: \"*\",\n    getAttrs(o) {\n      if (typeof o == \"string\")\n        return !1;\n      const r = t == null ? void 0 : t(o);\n      return r === void 0 ? !1 : r;\n    }\n  }), e;\n}\nfunction dn(n, t) {\n  const e = W({\n    name: n.type,\n    content: n.content === \"inline\" ? \"inline*\" : \"\",\n    group: \"blockContent\",\n    selectable: !0,\n    addAttributes() {\n      return Yt(n.propSchema);\n    },\n    parseHTML() {\n      return cn(n, t.parse);\n    },\n    renderHTML() {\n      const o = document.createElement(\"div\");\n      return o.setAttribute(\"data-tmp-placeholder\", \"true\"), {\n        dom: o\n      };\n    },\n    addNodeView() {\n      return ({ getPos: o }) => {\n        var l;\n        const r = this.options.editor, i = ln(\n          o,\n          r,\n          this.editor,\n          n.type\n        ), s = ((l = this.options.domAttributes) == null ? void 0 : l.blockContent) || {}, a = t.render(i, r);\n        return pt(\n          a,\n          i.type,\n          i.props,\n          n.propSchema,\n          s\n        );\n      };\n    }\n  });\n  if (e.name !== n.type)\n    throw new Error(\n      \"Node name does not match block type. This is a bug in BlockNote.\"\n    );\n  return Qt(n, {\n    node: e,\n    toInternalHTML: (o, r) => {\n      var a;\n      const i = ((a = e.options.domAttributes) == null ? void 0 : a.blockContent) || {}, s = t.render(o, r);\n      return pt(\n        s,\n        o.type,\n        o.props,\n        n.propSchema,\n        i\n      );\n    },\n    toExternalHTML: (o, r) => {\n      var a, l;\n      const i = ((a = e.options.domAttributes) == null ? void 0 : a.blockContent) || {};\n      let s = (l = t.toExternalHTML) == null ? void 0 : l.call(\n        t,\n        o,\n        r\n      );\n      return s === void 0 && (s = t.render(o, r)), pt(\n        s,\n        o.type,\n        o.props,\n        n.propSchema,\n        i\n      );\n    }\n  });\n}\nfunction pn(n, t, e, o) {\n  return n.dom.setAttribute(\"data-inline-content-type\", t), Object.entries(e).filter(([r, i]) => i !== o[r].default).map(([r, i]) => [it(r), i]).forEach(([r, i]) => n.dom.setAttribute(r, i)), n.contentDOM !== void 0 && n.contentDOM.setAttribute(\"data-editable\", \"\"), n;\n}\nfunction un(n) {\n  return {\n    Backspace: ({ editor: t }) => {\n      const e = t.state.selection.$from;\n      return t.state.selection.empty && e.node().type.name === n.type && e.parentOffset === 0;\n    }\n  };\n}\nfunction hn(n, t) {\n  return {\n    config: n,\n    implementation: t\n  };\n}\nfunction mn(n, t) {\n  return hn(\n    {\n      type: n.name,\n      propSchema: t,\n      content: n.config.content === \"inline*\" ? \"styled\" : \"none\"\n    },\n    {\n      node: n\n    }\n  );\n}\nfunction te(n) {\n  return Object.fromEntries(\n    Object.entries(n).map(([t, e]) => [t, e.config])\n  );\n}\nfunction fn(n) {\n  return [\n    {\n      tag: `[data-inline-content-type=\"${n.type}\"]`,\n      contentElement: (t) => {\n        const e = t;\n        return e.matches(\"[data-editable]\") ? e : e.querySelector(\"[data-editable]\") || e;\n      }\n    }\n  ];\n}\nfunction Dr(n, t) {\n  const e = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create({\n    name: n.type,\n    inline: !0,\n    group: \"inline\",\n    selectable: n.content === \"styled\",\n    atom: n.content === \"none\",\n    content: n.content === \"styled\" ? \"inline*\" : \"\",\n    addAttributes() {\n      return Yt(n.propSchema);\n    },\n    addKeyboardShortcuts() {\n      return un(n);\n    },\n    parseHTML() {\n      return fn(n);\n    },\n    renderHTML({ node: o }) {\n      const r = this.options.editor, i = t.render(\n        Wt(\n          o,\n          r.schema.inlineContentSchema,\n          r.schema.styleSchema\n        )\n        // TODO: fix cast\n      );\n      return pn(\n        i,\n        n.type,\n        o.attrs,\n        n.propSchema\n      );\n    }\n  });\n  return mn(\n    e,\n    n.propSchema\n  );\n}\nfunction gn(n) {\n  return n === \"boolean\" ? {} : {\n    stringValue: {\n      default: void 0,\n      keepOnSplit: !0,\n      parseHTML: (t) => t.getAttribute(\"data-value\"),\n      renderHTML: (t) => t.stringValue !== void 0 ? {\n        \"data-value\": t.stringValue\n      } : {}\n    }\n  };\n}\nfunction bn(n, t, e, o) {\n  return n.dom.setAttribute(\"data-style-type\", t), o === \"string\" && n.dom.setAttribute(\"data-value\", e), n.contentDOM !== void 0 && n.contentDOM.setAttribute(\"data-editable\", \"\"), n;\n}\nfunction ee(n, t) {\n  return {\n    config: n,\n    implementation: t\n  };\n}\nfunction O(n, t) {\n  return ee(\n    {\n      type: n.name,\n      propSchema: t\n    },\n    {\n      mark: n\n    }\n  );\n}\nfunction ne(n) {\n  return Object.fromEntries(\n    Object.entries(n).map(([t, e]) => [t, e.config])\n  );\n}\nfunction yn(n) {\n  return [\n    {\n      tag: `[data-style-type=\"${n.type}\"]`,\n      contentElement: (t) => {\n        const e = t;\n        return e.matches(\"[data-editable]\") ? e : e.querySelector(\"[data-editable]\") || e;\n      }\n    }\n  ];\n}\nfunction Or(n, t) {\n  const e = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Mark.create({\n    name: n.type,\n    addAttributes() {\n      return gn(n.propSchema);\n    },\n    parseHTML() {\n      return yn(n);\n    },\n    renderHTML({ mark: o }) {\n      let r;\n      if (n.propSchema === \"boolean\")\n        r = t.render();\n      else if (n.propSchema === \"string\")\n        r = t.render(o.attrs.stringValue);\n      else\n        throw new N(n.propSchema);\n      return bn(\n        r,\n        n.type,\n        o.attrs.stringValue,\n        n.propSchema\n      );\n    }\n  });\n  return ee(n, {\n    mark: e\n  });\n}\nconst kn = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Mark.create({\n  name: \"backgroundColor\",\n  addAttributes() {\n    return {\n      stringValue: {\n        default: void 0,\n        parseHTML: (n) => n.getAttribute(\"data-background-color\"),\n        renderHTML: (n) => ({\n          \"data-background-color\": n.stringValue\n        })\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (n) => typeof n == \"string\" ? !1 : n.hasAttribute(\"data-background-color\") ? {\n          stringValue: n.getAttribute(\"data-background-color\")\n        } : !1\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    return [\"span\", n, 0];\n  }\n}), wn = O(\n  kn,\n  \"string\"\n), vn = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Mark.create({\n  name: \"textColor\",\n  addAttributes() {\n    return {\n      stringValue: {\n        default: void 0,\n        parseHTML: (n) => n.getAttribute(\"data-text-color\"),\n        renderHTML: (n) => ({\n          \"data-text-color\": n.stringValue\n        })\n      }\n    };\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (n) => typeof n == \"string\" ? !1 : n.hasAttribute(\"data-text-color\") ? { stringValue: n.getAttribute(\"data-text-color\") } : !1\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    return [\"span\", n, 0];\n  }\n}), En = O(vn, \"string\"), Sn = {\n  ...w,\n  level: { default: 1, values: [1, 2, 3] }\n}, Cn = W({\n  name: \"heading\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  addAttributes() {\n    return {\n      level: {\n        default: 1,\n        // instead of \"level\" attributes, use \"data-level\"\n        parseHTML: (n) => {\n          const t = n.getAttribute(\"data-level\"), e = parseInt(t);\n          if (isFinite(e))\n            return e;\n        },\n        renderHTML: (n) => ({\n          \"data-level\": n.level.toString()\n        })\n      }\n    };\n  },\n  addInputRules() {\n    return [\n      ...[1, 2, 3].map((n) => new _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.InputRule({\n        find: new RegExp(`^(#{${n}})\\\\s$`),\n        handler: ({ state: t, chain: e, range: o }) => {\n          e().BNUpdateBlock(t.selection.from, {\n            type: \"heading\",\n            props: {\n              level: n\n            }\n          }).deleteRange({ from: o.from, to: o.to });\n        }\n      }))\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Alt-1\": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n        type: \"heading\",\n        props: {\n          level: 1\n        }\n      }),\n      \"Mod-Alt-2\": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n        type: \"heading\",\n        props: {\n          level: 2\n        }\n      }),\n      \"Mod-Alt-3\": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n        type: \"heading\",\n        props: {\n          level: 3\n        }\n      })\n    };\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\",\n        getAttrs: (n) => typeof n == \"string\" ? !1 : {\n          level: n.getAttribute(\"data-level\")\n        }\n      },\n      {\n        tag: \"h1\",\n        attrs: { level: 1 },\n        node: \"heading\"\n      },\n      {\n        tag: \"h2\",\n        attrs: { level: 2 },\n        node: \"heading\"\n      },\n      {\n        tag: \"h3\",\n        attrs: { level: 3 },\n        node: \"heading\"\n      }\n    ];\n  },\n  renderHTML({ node: n, HTMLAttributes: t }) {\n    var e, o;\n    return Z(\n      this.name,\n      `h${n.attrs.level}`,\n      {\n        ...((e = this.options.domAttributes) == null ? void 0 : e.blockContent) || {},\n        ...t\n      },\n      ((o = this.options.domAttributes) == null ? void 0 : o.inlineContent) || {}\n    );\n  }\n}), Tn = tt(\n  Cn,\n  Sn\n), xn = {\n  textAlignment: w.textAlignment,\n  backgroundColor: w.backgroundColor,\n  // Image url.\n  url: {\n    default: \"\"\n  },\n  // Image caption.\n  caption: {\n    default: \"\"\n  },\n  // Image width in px.\n  width: {\n    default: 512\n  }\n}, At = (n) => {\n  switch (n) {\n    case \"left\":\n      return \"flex-start\";\n    case \"center\":\n      return \"center\";\n    case \"right\":\n      return \"flex-end\";\n    default:\n      return \"flex-start\";\n  }\n}, Ht = 64, Mn = (n, t) => {\n  const e = document.createElement(\"div\");\n  e.className = \"bn-image-block-content-wrapper\", e.style.alignItems = At(\n    n.props.textAlignment\n  );\n  const o = document.createElement(\"div\");\n  o.className = \"bn-add-image-button\";\n  const r = document.createElement(\"div\");\n  r.className = \"bn-add-image-button-icon\";\n  const i = document.createElement(\"p\");\n  i.className = \"bn-add-image-button-text\", i.innerText = \"Add Image\";\n  const s = document.createElement(\"div\");\n  s.className = \"bn-image-and-caption-wrapper\";\n  const a = document.createElement(\"div\");\n  a.className = \"bn-image-wrapper\";\n  const l = document.createElement(\"img\");\n  l.className = \"bn-image\", l.src = n.props.url, l.alt = \"placeholder\", l.contentEditable = \"false\", l.draggable = !1, l.style.width = `${Math.min(\n    n.props.width,\n    t.domElement.firstElementChild.clientWidth\n  )}px`;\n  const c = document.createElement(\"div\");\n  c.className = \"bn-image-resize-handle\", c.style.left = \"4px\";\n  const p = document.createElement(\"div\");\n  p.className = \"bn-image-resize-handle\", p.style.right = \"4px\";\n  const u = document.createElement(\"p\");\n  u.className = \"bn-image-caption\", u.innerText = n.props.caption, u.style.padding = n.props.caption ? \"4px\" : \"\";\n  const m = () => {\n    var ct;\n    const g = ((ct = t.getSelection()) == null ? void 0 : ct.blocks) || [];\n    [t.getTextCursorPosition().block, ...g].find(\n      (et) => et.id === n.id\n    ) !== void 0 ? (o.style.outline = \"4px solid rgb(100, 160, 255)\", s.style.outline = \"4px solid rgb(100, 160, 255)\") : (o.style.outline = \"\", s.style.outline = \"\");\n  };\n  t.onEditorContentChange(m), t.onEditorSelectionChange(m);\n  let h;\n  const f = (g) => {\n    if (!h) {\n      !t.isEditable && a.contains(c) && a.contains(p) && (a.removeChild(c), a.removeChild(p));\n      return;\n    }\n    let I;\n    At(n.props.textAlignment) === \"center\" ? h.handleUsed === \"left\" ? I = h.initialWidth + (h.initialClientX - g.clientX) * 2 : I = h.initialWidth + (g.clientX - h.initialClientX) * 2 : h.handleUsed === \"left\" ? I = h.initialWidth + h.initialClientX - g.clientX : I = h.initialWidth + g.clientX - h.initialClientX, I < Ht ? l.style.width = `${Ht}px` : I > t.domElement.firstElementChild.clientWidth ? l.style.width = `${t.domElement.firstElementChild.clientWidth}px` : l.style.width = `${I}px`;\n  }, y = (g) => {\n    (!g.target || !a.contains(g.target) || !t.isEditable) && a.contains(c) && a.contains(p) && (a.removeChild(c), a.removeChild(p)), h && (h = void 0, t.updateBlock(n, {\n      type: \"image\",\n      props: {\n        // Removes \"px\" from the end of the width string and converts to float.\n        width: parseFloat(l.style.width.slice(0, -2))\n      }\n    }));\n  }, S = (g) => {\n    g.preventDefault();\n  }, B = () => {\n    t._tiptapEditor.view.dispatch(\n      t._tiptapEditor.state.tr.setMeta(t.imageToolbar.plugin, {\n        block: n\n      })\n    );\n  }, E = () => {\n    t.isEditable && (a.appendChild(c), a.appendChild(p));\n  }, D = (g) => {\n    g.relatedTarget === c || g.relatedTarget === p || h || t.isEditable && a.contains(c) && a.contains(p) && (a.removeChild(c), a.removeChild(p));\n  }, z = (g) => {\n    g.preventDefault(), a.appendChild(c), a.appendChild(p), h = {\n      handleUsed: \"left\",\n      initialWidth: n.props.width,\n      initialClientX: g.clientX\n    };\n  }, K = (g) => {\n    g.preventDefault(), a.appendChild(c), a.appendChild(p), h = {\n      handleUsed: \"right\",\n      initialWidth: n.props.width,\n      initialClientX: g.clientX\n    };\n  };\n  return o.appendChild(r), o.appendChild(i), s.appendChild(a), a.appendChild(l), s.appendChild(u), n.props.url === \"\" ? e.appendChild(o) : e.appendChild(s), window.addEventListener(\"mousemove\", f), window.addEventListener(\"mouseup\", y), o.addEventListener(\"mousedown\", S), o.addEventListener(\"click\", B), l.addEventListener(\"mouseenter\", E), l.addEventListener(\"mouseleave\", D), c.addEventListener(\n    \"mousedown\",\n    z\n  ), p.addEventListener(\n    \"mousedown\",\n    K\n  ), {\n    dom: e,\n    destroy: () => {\n      window.removeEventListener(\"mousemove\", f), window.removeEventListener(\"mouseup\", y), o.removeEventListener(\n        \"mousedown\",\n        S\n      ), o.removeEventListener(\"click\", B), c.removeEventListener(\n        \"mousedown\",\n        z\n      ), p.removeEventListener(\n        \"mousedown\",\n        K\n      );\n    }\n  };\n}, Bn = dn(\n  {\n    type: \"image\",\n    propSchema: xn,\n    content: \"none\"\n  },\n  {\n    render: Mn,\n    toExternalHTML: (n) => {\n      if (n.props.url === \"\") {\n        const o = document.createElement(\"p\");\n        return o.innerHTML = \"Add Image\", {\n          dom: o\n        };\n      }\n      const t = document.createElement(\"figure\"), e = document.createElement(\"img\");\n      if (e.src = n.props.url, t.appendChild(e), n.props.caption !== \"\") {\n        const o = document.createElement(\"figcaption\");\n        o.innerHTML = n.props.caption, t.appendChild(o);\n      }\n      return {\n        dom: t\n      };\n    },\n    parse: (n) => {\n      if (n.tagName === \"FIGURE\") {\n        const t = n.querySelector(\"img\"), e = n.querySelector(\"figcaption\");\n        return {\n          url: (t == null ? void 0 : t.getAttribute(\"src\")) || \"\",\n          caption: (e == null ? void 0 : e.textContent) || (t == null ? void 0 : t.getAttribute(\"alt\")) || void 0\n        };\n      } else if (n.tagName === \"IMG\")\n        return {\n          url: n.getAttribute(\"src\") || \"\",\n          caption: n.getAttribute(\"alt\") || void 0\n        };\n    }\n  }\n), vt = (n) => {\n  const { node: t, contentType: e } = b(\n    n.state.doc,\n    n.state.selection.from\n  ), o = n.state.selection.anchor === n.state.selection.head;\n  return !e.name.endsWith(\"ListItem\") || !o ? !1 : n.commands.first(({ state: r, chain: i, commands: s }) => [\n    () => (\n      // Changes list item block to a text block if the content is empty.\n      s.command(() => t.textContent.length === 0 ? s.BNUpdateBlock(r.selection.from, {\n        type: \"paragraph\",\n        props: {}\n      }) : !1)\n    ),\n    () => (\n      // Splits the current block, moving content inside that's after the cursor to a new block of the same type\n      // below.\n      s.command(() => t.textContent.length > 0 ? (i().deleteSelection().BNSplitBlock(r.selection.from, !0).run(), !0) : !1)\n    )\n  ]);\n}, In = {\n  ...w\n}, Ln = W({\n  name: \"bulletListItem\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  addInputRules() {\n    return [\n      // Creates an unordered list when starting with \"-\", \"+\", or \"*\".\n      new _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.InputRule({\n        find: new RegExp(\"^[-+*]\\\\s$\"),\n        handler: ({ state: n, chain: t, range: e }) => {\n          t().BNUpdateBlock(n.selection.from, {\n            type: \"bulletListItem\",\n            props: {}\n          }).deleteRange({ from: e.from, to: e.to });\n        }\n      })\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => vt(this.editor),\n      \"Mod-Shift-8\": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n        type: \"bulletListItem\",\n        props: {}\n      })\n    };\n  },\n  parseHTML() {\n    return [\n      // Case for regular HTML list structure.\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\"\n        // TODO: remove if we can't come up with test case that needs this\n      },\n      {\n        tag: \"li\",\n        getAttrs: (n) => {\n          if (typeof n == \"string\")\n            return !1;\n          const t = n.parentElement;\n          return t === null ? !1 : t.tagName === \"UL\" || t.tagName === \"DIV\" && t.parentElement.tagName === \"UL\" ? {} : !1;\n        },\n        node: \"bulletListItem\"\n      },\n      // Case for BlockNote list structure.\n      {\n        tag: \"p\",\n        getAttrs: (n) => {\n          if (typeof n == \"string\")\n            return !1;\n          const t = n.parentElement;\n          return t === null ? !1 : t.getAttribute(\"data-content-type\") === \"bulletListItem\" ? {} : !1;\n        },\n        priority: 300,\n        node: \"bulletListItem\"\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    var t, e;\n    return Z(\n      this.name,\n      // We use a <p> tag, because for <li> tags we'd need a <ul> element to put\n      // them in to be semantically correct, which we can't have due to the\n      // schema.\n      \"p\",\n      {\n        ...((t = this.options.domAttributes) == null ? void 0 : t.blockContent) || {},\n        ...n\n      },\n      ((e = this.options.domAttributes) == null ? void 0 : e.inlineContent) || {}\n    );\n  }\n}), Nn = tt(\n  Ln,\n  In\n), An = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"numbered-list-indexing\"), Hn = () => new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n  key: An,\n  appendTransaction: (n, t, e) => {\n    const o = e.tr;\n    o.setMeta(\"numberedListIndexing\", !0);\n    let r = !1;\n    return e.doc.descendants((i, s) => {\n      if (i.type.name === \"blockContainer\" && i.firstChild.type.name === \"numberedListItem\") {\n        let a = \"1\";\n        const l = s === 1, c = b(o.doc, s + 1);\n        if (c === void 0)\n          return;\n        if (!l) {\n          const m = b(o.doc, s - 2);\n          if (m === void 0)\n            return;\n          if (!(c.depth !== m.depth)) {\n            const f = m.contentNode;\n            if (m.contentType.name === \"numberedListItem\") {\n              const B = f.attrs.index;\n              a = (parseInt(B) + 1).toString();\n            }\n          }\n        }\n        c.contentNode.attrs.index !== a && (r = !0, o.setNodeMarkup(s + 1, void 0, {\n          index: a\n        }));\n      }\n    }), r ? o : null;\n  }\n}), Pn = {\n  ...w\n}, Dn = W({\n  name: \"numberedListItem\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  addAttributes() {\n    return {\n      index: {\n        default: null,\n        parseHTML: (n) => n.getAttribute(\"data-index\"),\n        renderHTML: (n) => ({\n          \"data-index\": n.index\n        })\n      }\n    };\n  },\n  addInputRules() {\n    return [\n      // Creates an ordered list when starting with \"1.\".\n      new _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.InputRule({\n        find: new RegExp(\"^1\\\\.\\\\s$\"),\n        handler: ({ state: n, chain: t, range: e }) => {\n          t().BNUpdateBlock(n.selection.from, {\n            type: \"numberedListItem\",\n            props: {}\n          }).deleteRange({ from: e.from, to: e.to });\n        }\n      })\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => vt(this.editor),\n      \"Mod-Shift-7\": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n        type: \"numberedListItem\",\n        props: {}\n      })\n    };\n  },\n  addProseMirrorPlugins() {\n    return [Hn()];\n  },\n  parseHTML() {\n    return [\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\"\n        // TODO: remove if we can't come up with test case that needs this\n      },\n      // Case for regular HTML list structure.\n      // (e.g.: when pasting from other apps)\n      {\n        tag: \"li\",\n        getAttrs: (n) => {\n          if (typeof n == \"string\")\n            return !1;\n          const t = n.parentElement;\n          return t === null ? !1 : t.tagName === \"OL\" || t.tagName === \"DIV\" && t.parentElement.tagName === \"OL\" ? {} : !1;\n        },\n        node: \"numberedListItem\"\n      },\n      // Case for BlockNote list structure.\n      // (e.g.: when pasting from blocknote)\n      {\n        tag: \"p\",\n        getAttrs: (n) => {\n          if (typeof n == \"string\")\n            return !1;\n          const t = n.parentElement;\n          return t === null ? !1 : t.getAttribute(\"data-content-type\") === \"numberedListItem\" ? {} : !1;\n        },\n        priority: 300,\n        node: \"numberedListItem\"\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    var t, e;\n    return Z(\n      this.name,\n      // We use a <p> tag, because for <li> tags we'd need an <ol> element to\n      // put them in to be semantically correct, which we can't have due to the\n      // schema.\n      \"p\",\n      {\n        ...((t = this.options.domAttributes) == null ? void 0 : t.blockContent) || {},\n        ...n\n      },\n      ((e = this.options.domAttributes) == null ? void 0 : e.inlineContent) || {}\n    );\n  }\n}), On = tt(\n  Dn,\n  Pn\n), _n = {\n  ...w\n}, Un = W({\n  name: \"paragraph\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => vt(this.editor),\n      \"Mod-Alt-0\": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n        type: \"paragraph\",\n        props: {}\n      })\n    };\n  },\n  parseHTML() {\n    return [\n      { tag: \"div[data-content-type=\" + this.name + \"]\" },\n      {\n        tag: \"p\",\n        priority: 200,\n        node: \"paragraph\"\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    var t, e;\n    return Z(\n      this.name,\n      \"p\",\n      {\n        ...((t = this.options.domAttributes) == null ? void 0 : t.blockContent) || {},\n        ...n\n      },\n      ((e = this.options.domAttributes) == null ? void 0 : e.inlineContent) || {}\n    );\n  }\n}), Rn = tt(\n  Un,\n  _n\n), zn = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n  name: \"BlockNoteTableExtension\",\n  addProseMirrorPlugins: () => [\n    (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_8__.columnResizing)({\n      cellMinWidth: 100\n    }),\n    (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_8__.tableEditing)()\n  ],\n  addKeyboardShortcuts() {\n    return {\n      // Makes enter create a new line within the cell.\n      Enter: () => this.editor.state.selection.empty && this.editor.state.selection.$head.parent.type.name === \"tableParagraph\" ? (this.editor.commands.setHardBreak(), !0) : !1,\n      // Ensures that backspace won't delete the table if the text cursor is at\n      // the start of a cell and the selection is empty.\n      Backspace: () => {\n        const n = this.editor.state.selection, t = n.empty, e = n.$head.parentOffset === 0, o = n.$head.node().type.name === \"tableParagraph\";\n        return t && e && o;\n      }\n    };\n  },\n  extendNodeSchema(n) {\n    const t = {\n      name: n.name,\n      options: n.options,\n      storage: n.storage\n    };\n    return {\n      tableRole: (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.callOrReturn)(\n        (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.getExtensionField)(n, \"tableRole\", t)\n      )\n    };\n  }\n}), Vn = {\n  ...w\n}, Fn = W({\n  name: \"table\",\n  content: \"tableRow+\",\n  group: \"blockContent\",\n  tableRole: \"table\",\n  isolating: !0,\n  parseHTML() {\n    return [{ tag: \"table\" }];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    var t, e;\n    return Z(\n      this.name,\n      \"table\",\n      {\n        ...((t = this.options.domAttributes) == null ? void 0 : t.blockContent) || {},\n        ...n\n      },\n      ((e = this.options.domAttributes) == null ? void 0 : e.inlineContent) || {}\n    );\n  }\n}), $n = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create({\n  name: \"tableParagraph\",\n  group: \"tableContent\",\n  content: \"inline*\",\n  parseHTML() {\n    return [{ tag: \"p\" }];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    return [\n      \"p\",\n      (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.mergeAttributes)(this.options.HTMLAttributes, n),\n      0\n    ];\n  }\n}), Gn = tt(\n  Fn,\n  Vn,\n  [\n    zn,\n    $n,\n    _tiptap_extension_table_header__WEBPACK_IMPORTED_MODULE_6__.TableHeader.extend({\n      content: \"tableContent\"\n    }),\n    _tiptap_extension_table_cell__WEBPACK_IMPORTED_MODULE_5__.TableCell.extend({\n      content: \"tableContent\"\n    }),\n    _tiptap_extension_table_row__WEBPACK_IMPORTED_MODULE_7__.TableRow\n  ]\n), oe = {\n  paragraph: Rn,\n  heading: Tn,\n  bulletListItem: Nn,\n  numberedListItem: On,\n  image: Bn,\n  table: Gn\n}, jn = Zt(oe), re = {\n  bold: O(_tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"boolean\"),\n  italic: O(_tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_2__[\"default\"], \"boolean\"),\n  underline: O(_tiptap_extension_underline__WEBPACK_IMPORTED_MODULE_4__[\"default\"], \"boolean\"),\n  strike: O(_tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_3__[\"default\"], \"boolean\"),\n  code: O(_tiptap_extension_code__WEBPACK_IMPORTED_MODULE_1__[\"default\"], \"boolean\"),\n  textColor: En,\n  backgroundColor: wn\n}, _r = ne(re), ie = {\n  text: { config: \"text\", implementation: {} },\n  link: { config: \"link\", implementation: {} }\n}, Ur = te(\n  ie\n);\nfunction L(n, t) {\n  return n in t.schema.blockSchema && t.schema.blockSchema[n] === jn[n];\n}\nfunction Rr(n, t, e) {\n  return t.type === n && t.type in e.schema.blockSchema && L(t.type, e);\n}\nfunction Wn(n, t, e) {\n  return t in e.schema.blockSchema && n in e.schema.blockSchema[t].propSchema && e.schema.blockSchema[t].propSchema[n] === w[n];\n}\nfunction zr(n, t, e) {\n  return Wn(n, t.type, e);\n}\nfunction Et(n, t) {\n  let e, o;\n  if (t.firstChild.descendants((r, i) => e ? !1 : r.type.name !== \"blockContainer\" || r.attrs.id !== n ? !0 : (e = r, o = i + 1, !1)), e === void 0 || o === void 0)\n    throw Error(\"Could not find block in the editor with matching ID.\");\n  return {\n    node: e,\n    posBeforeNode: o\n  };\n}\nfunction qn(n, t, e = \"before\", o) {\n  const r = o._tiptapEditor, i = typeof t == \"string\" ? t : t.id, s = [];\n  for (const p of n)\n    s.push(\n      P(p, r.schema, o.schema.styleSchema)\n    );\n  const { node: a, posBeforeNode: l } = Et(i, r.state.doc);\n  if (e === \"before\" && r.view.dispatch(\n    r.state.tr.insert(l, s)\n  ), e === \"after\" && r.view.dispatch(\n    r.state.tr.insert(l + a.nodeSize, s)\n  ), e === \"nested\" && a.childCount < 2) {\n    const p = r.state.schema.nodes.blockGroup.create(\n      {},\n      s\n    );\n    r.view.dispatch(\n      r.state.tr.insert(\n        l + a.firstChild.nodeSize + 1,\n        p\n      )\n    );\n  }\n  const c = [];\n  for (const p of s)\n    c.push(\n      k(\n        p,\n        o.schema.blockSchema,\n        o.schema.inlineContentSchema,\n        o.schema.styleSchema,\n        o.blockCache\n      )\n    );\n  return c;\n}\nfunction Kn(n, t, e) {\n  const o = e._tiptapEditor, r = typeof n == \"string\" ? n : n.id, { posBeforeNode: i } = Et(r, o.state.doc);\n  o.commands.BNUpdateBlock(i + 1, t);\n  const s = o.state.doc.resolve(i + 1).node();\n  return k(\n    s,\n    e.schema.blockSchema,\n    e.schema.inlineContentSchema,\n    e.schema.styleSchema,\n    e.blockCache\n  );\n}\nfunction se(n, t, e) {\n  const o = t._tiptapEditor, r = o.state.tr, i = new Set(\n    n.map(\n      (l) => typeof l == \"string\" ? l : l.id\n    )\n  ), s = [];\n  let a = 0;\n  if (o.state.doc.descendants((l, c) => {\n    if (i.size === 0)\n      return !1;\n    if (l.type.name !== \"blockContainer\" || !i.has(l.attrs.id))\n      return !0;\n    s.push(\n      k(\n        l,\n        t.schema.blockSchema,\n        t.schema.inlineContentSchema,\n        t.schema.styleSchema,\n        t.blockCache\n      )\n    ), i.delete(l.attrs.id), a = (e == null ? void 0 : e(l, c, r, a)) || a;\n    const p = r.doc.nodeSize;\n    r.delete(c - a - 1, c - a + l.nodeSize + 1);\n    const u = r.doc.nodeSize;\n    return a += p - u, !1;\n  }), i.size > 0) {\n    const l = [...i].join(`\n`);\n    throw Error(\n      \"Blocks with the following IDs could not be found in the editor: \" + l\n    );\n  }\n  return o.view.dispatch(r), s;\n}\nfunction Jn(n, t) {\n  return se(n, t);\n}\nfunction Xn(n, t, e) {\n  const o = e._tiptapEditor, r = [];\n  for (const l of t)\n    r.push(\n      P(l, o.schema, e.schema.styleSchema)\n    );\n  const i = typeof n[0] == \"string\" ? n[0] : n[0].id, s = se(\n    n,\n    e,\n    (l, c, p, u) => {\n      if (l.attrs.id === i) {\n        const m = p.doc.nodeSize;\n        p.insert(c, r);\n        const h = p.doc.nodeSize;\n        return u + m - h;\n      }\n      return u;\n    }\n  ), a = [];\n  for (const l of r)\n    a.push(\n      k(\n        l,\n        e.schema.blockSchema,\n        e.schema.inlineContentSchema,\n        e.schema.styleSchema,\n        e.blockCache\n      )\n    );\n  return { insertedBlocks: a, removedBlocks: s };\n}\nfunction Yn(n, t, e, o = { updateSelection: !0 }) {\n  const r = e._tiptapEditor, i = r.state.tr;\n  let { from: s, to: a } = typeof n == \"number\" ? { from: n, to: n } : { from: n.from, to: n.to }, l = !0, c = !0, p = \"\";\n  if (t.forEach((u) => {\n    u.check(), l && u.isText && u.marks.length === 0 ? p += u.text : l = !1, c = c ? u.isBlock : !1;\n  }), s === a && c) {\n    const { parent: u } = i.doc.resolve(s);\n    u.isTextblock && !u.type.spec.code && !u.childCount && (s -= 1, a += 1);\n  }\n  return l ? i.insertText(p, s, a) : i.replaceWith(s, a, t), o.updateSelection && (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.selectionToInsertionEnd)(i, i.steps.length - 1, -1), r.view.dispatch(i), !0;\n}\nfunction Qn() {\n  const n = (t) => {\n    let e = t.children.length;\n    for (let o = 0; o < e; o++) {\n      const r = t.children[o];\n      if (r.type === \"element\" && (n(r), r.tagName === \"u\"))\n        if (r.children.length > 0) {\n          t.children.splice(o, 1, ...r.children);\n          const i = r.children.length - 1;\n          e += i, o += i;\n        } else\n          t.children.splice(o, 1), e--, o--;\n    }\n  };\n  return n;\n}\nfunction St(n) {\n  return (0,unified__WEBPACK_IMPORTED_MODULE_22__.unified)().use(rehype_parse__WEBPACK_IMPORTED_MODULE_23__[\"default\"], { fragment: !0 }).use(Qn).use(rehype_remark__WEBPACK_IMPORTED_MODULE_25__[\"default\"]).use(remark_gfm__WEBPACK_IMPORTED_MODULE_26__[\"default\"]).use(remark_stringify__WEBPACK_IMPORTED_MODULE_27__[\"default\"]).processSync(n).value;\n}\nfunction Zn(n, t, e) {\n  const r = at(t, e).exportBlocks(n);\n  return St(r);\n}\nfunction to(n) {\n  return Array.prototype.indexOf.call(n.parentElement.childNodes, n);\n}\nfunction eo(n) {\n  return n.nodeType === 3 && !/\\S/.test(n.nodeValue || \"\");\n}\nfunction no(n) {\n  n.querySelectorAll(\"li > ul, li > ol\").forEach((t) => {\n    const e = to(t), o = t.parentElement, r = Array.from(o.childNodes).slice(\n      e + 1\n    );\n    t.remove(), r.forEach((i) => {\n      i.remove();\n    }), o.insertAdjacentElement(\"afterend\", t), r.reverse().forEach((i) => {\n      if (eo(i))\n        return;\n      const s = document.createElement(\"li\");\n      s.append(i), t.insertAdjacentElement(\"afterend\", s);\n    }), o.childNodes.length === 0 && o.remove();\n  });\n}\nfunction oo(n) {\n  n.querySelectorAll(\"li + ul, li + ol\").forEach((t) => {\n    var i, s;\n    const e = t.previousElementSibling, o = document.createElement(\"div\");\n    e.insertAdjacentElement(\"afterend\", o), o.append(e);\n    const r = document.createElement(\"div\");\n    for (r.setAttribute(\"data-node-type\", \"blockGroup\"), o.append(r); ((i = o.nextElementSibling) == null ? void 0 : i.nodeName) === \"UL\" || ((s = o.nextElementSibling) == null ? void 0 : s.nodeName) === \"OL\"; )\n      r.append(o.nextElementSibling);\n  });\n}\nlet Pt = null;\nfunction ro() {\n  return Pt || (Pt = document.implementation.createHTMLDocument(\"title\"));\n}\nfunction ae(n) {\n  if (typeof n == \"string\") {\n    const t = ro().createElement(\"div\");\n    t.innerHTML = n, n = t;\n  }\n  return no(n), oo(n), n;\n}\nasync function le(n, t, e, o, r) {\n  const i = ae(n), a = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.DOMParser.fromSchema(r).parse(i, {\n    topNode: r.nodes.blockGroup.create()\n  }), l = [];\n  for (let c = 0; c < a.childCount; c++)\n    l.push(\n      k(a.child(c), t, e, o)\n    );\n  return l;\n}\nfunction io(n, t) {\n  const e = t.value ? t.value + `\n` : \"\", o = {};\n  t.lang && (o[\"data-language\"] = t.lang);\n  let r = {\n    type: \"element\",\n    tagName: \"code\",\n    properties: o,\n    children: [{ type: \"text\", value: e }]\n  };\n  return t.meta && (r.data = { meta: t.meta }), n.patch(t, r), r = n.applyData(t, r), r = {\n    type: \"element\",\n    tagName: \"pre\",\n    properties: {},\n    children: [r]\n  }, n.patch(t, r), r;\n}\nfunction so(n, t, e, o, r) {\n  const i = (0,unified__WEBPACK_IMPORTED_MODULE_22__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_28__[\"default\"]).use(remark_gfm__WEBPACK_IMPORTED_MODULE_26__[\"default\"]).use(remark_rehype__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n    handlers: {\n      ...remark_rehype__WEBPACK_IMPORTED_MODULE_30__.handlers,\n      code: io\n    }\n  }).use(rehype_stringify__WEBPACK_IMPORTED_MODULE_24__[\"default\"]).processSync(n);\n  return le(\n    i.value,\n    t,\n    e,\n    o,\n    r\n  );\n}\nclass q {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    d(this, \"callbacks\", {});\n  }\n  on(t, e) {\n    return this.callbacks[t] || (this.callbacks[t] = []), this.callbacks[t].push(e), () => this.off(t, e);\n  }\n  emit(t, ...e) {\n    const o = this.callbacks[t];\n    o && o.forEach((r) => r.apply(this, e));\n  }\n  off(t, e) {\n    const o = this.callbacks[t];\n    o && (e ? this.callbacks[t] = o.filter((r) => r !== e) : delete this.callbacks[t]);\n  }\n  removeAllListeners() {\n    this.callbacks = {};\n  }\n}\nclass ao {\n  constructor(t, e, o) {\n    d(this, \"state\");\n    d(this, \"emitUpdate\");\n    d(this, \"preventHide\", !1);\n    d(this, \"preventShow\", !1);\n    d(this, \"prevWasEditable\", null);\n    d(this, \"shouldShow\", ({ state: t }) => !t.selection.empty);\n    d(this, \"viewMousedownHandler\", () => {\n      this.preventShow = !0;\n    });\n    d(this, \"viewMouseupHandler\", () => {\n      this.preventShow = !1, setTimeout(() => this.update(this.pmView));\n    });\n    // For dragging the whole editor.\n    d(this, \"dragHandler\", () => {\n      var t;\n      (t = this.state) != null && t.show && (this.state.show = !1, this.emitUpdate());\n    });\n    d(this, \"focusHandler\", () => {\n      setTimeout(() => this.update(this.pmView));\n    });\n    d(this, \"blurHandler\", (t) => {\n      var o;\n      if (this.preventHide) {\n        this.preventHide = !1;\n        return;\n      }\n      const e = this.pmView.dom.parentElement;\n      // An element is clicked.\n      t && t.relatedTarget && // Element is inside the editor.\n      (e === t.relatedTarget || e.contains(t.relatedTarget)) || (o = this.state) != null && o.show && (this.state.show = !1, this.emitUpdate());\n    });\n    d(this, \"scrollHandler\", () => {\n      var t;\n      (t = this.state) != null && t.show && (this.state.referencePos = this.getSelectionBoundingBox(), this.emitUpdate());\n    });\n    this.editor = t, this.pmView = e, this.emitUpdate = () => {\n      if (!this.state)\n        throw new Error(\n          \"Attempting to update uninitialized formatting toolbar\"\n        );\n      o(this.state);\n    }, e.dom.addEventListener(\"mousedown\", this.viewMousedownHandler), e.dom.addEventListener(\"mouseup\", this.viewMouseupHandler), e.dom.addEventListener(\"dragstart\", this.dragHandler), e.dom.addEventListener(\"dragover\", this.dragHandler), e.dom.addEventListener(\"focus\", this.focusHandler), e.dom.addEventListener(\"blur\", this.blurHandler), document.addEventListener(\"scroll\", this.scrollHandler);\n  }\n  update(t, e) {\n    var m, h;\n    const { state: o, composing: r } = t, { doc: i, selection: s } = o, a = e && e.doc.eq(i) && e.selection.eq(s);\n    if ((this.prevWasEditable === null || this.prevWasEditable === this.editor.isEditable) && (r || a))\n      return;\n    this.prevWasEditable = this.editor.isEditable;\n    const { ranges: l } = s, c = Math.min(...l.map((f) => f.$from.pos)), p = Math.max(...l.map((f) => f.$to.pos)), u = (m = this.shouldShow) == null ? void 0 : m.call(this, {\n      view: t,\n      state: o,\n      from: c,\n      to: p\n    });\n    if (this.editor.isEditable && !this.preventShow && (u || this.preventHide)) {\n      this.state = {\n        show: !0,\n        referencePos: this.getSelectionBoundingBox()\n      }, this.emitUpdate();\n      return;\n    }\n    if ((h = this.state) != null && h.show && !this.preventHide && (!u || this.preventShow || !this.editor.isEditable)) {\n      this.state.show = !1, this.emitUpdate();\n      return;\n    }\n  }\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousedown\", this.viewMousedownHandler), this.pmView.dom.removeEventListener(\"mouseup\", this.viewMouseupHandler), this.pmView.dom.removeEventListener(\"dragstart\", this.dragHandler), this.pmView.dom.removeEventListener(\"dragover\", this.dragHandler), this.pmView.dom.removeEventListener(\"focus\", this.focusHandler), this.pmView.dom.removeEventListener(\"blur\", this.blurHandler), document.removeEventListener(\"scroll\", this.scrollHandler);\n  }\n  getSelectionBoundingBox() {\n    const { state: t } = this.pmView, { selection: e } = t, { ranges: o } = e, r = Math.min(...o.map((s) => s.$from.pos)), i = Math.max(...o.map((s) => s.$to.pos));\n    if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.isNodeSelection)(e)) {\n      const s = this.pmView.nodeDOM(r);\n      if (s)\n        return s.getBoundingClientRect();\n    }\n    return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.posToDOMRect)(this.pmView, r, i);\n  }\n}\nconst lo = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\n  \"FormattingToolbarPlugin\"\n);\nclass co extends q {\n  constructor(e) {\n    super();\n    d(this, \"view\");\n    d(this, \"plugin\");\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n      key: lo,\n      view: (o) => (this.view = new ao(e, o, (r) => {\n        this.emit(\"update\", r);\n      }), this.view)\n    });\n  }\n  onUpdate(e) {\n    return this.on(\"update\", e);\n  }\n}\nclass po {\n  constructor(t, e, o) {\n    d(this, \"state\");\n    d(this, \"emitUpdate\");\n    d(this, \"menuUpdateTimer\");\n    d(this, \"startMenuUpdateTimer\");\n    d(this, \"stopMenuUpdateTimer\");\n    d(this, \"mouseHoveredHyperlinkMark\");\n    d(this, \"mouseHoveredHyperlinkMarkRange\");\n    d(this, \"keyboardHoveredHyperlinkMark\");\n    d(this, \"keyboardHoveredHyperlinkMarkRange\");\n    d(this, \"hyperlinkMark\");\n    d(this, \"hyperlinkMarkRange\");\n    d(this, \"mouseOverHandler\", (t) => {\n      if (this.mouseHoveredHyperlinkMark = void 0, this.mouseHoveredHyperlinkMarkRange = void 0, this.stopMenuUpdateTimer(), t.target instanceof HTMLAnchorElement && t.target.nodeName === \"A\") {\n        const e = t.target, o = this.pmView.posAtDOM(e, 0) + 1, r = this.pmView.state.doc.resolve(\n          o\n        ), i = r.marks();\n        for (const s of i)\n          if (s.type.name === this.pmView.state.schema.mark(\"link\").type.name) {\n            this.mouseHoveredHyperlinkMark = s, this.mouseHoveredHyperlinkMarkRange = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.getMarkRange)(\n              r,\n              s.type,\n              s.attrs\n            ) || void 0;\n            break;\n          }\n      }\n      return this.startMenuUpdateTimer(), !1;\n    });\n    d(this, \"clickHandler\", (t) => {\n      var o;\n      const e = this.pmView.dom.parentElement;\n      // Toolbar is open.\n      this.hyperlinkMark && // An element is clicked.\n      t && t.target && // The clicked element is not the editor.\n      !(e === t.target || e.contains(t.target)) && (o = this.state) != null && o.show && (this.state.show = !1, this.emitUpdate());\n    });\n    d(this, \"scrollHandler\", () => {\n      var t;\n      this.hyperlinkMark !== void 0 && (t = this.state) != null && t.show && (this.state.referencePos = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.posToDOMRect)(\n        this.pmView,\n        this.hyperlinkMarkRange.from,\n        this.hyperlinkMarkRange.to\n      ), this.emitUpdate());\n    });\n    this.editor = t, this.pmView = e, this.emitUpdate = () => {\n      if (!this.state)\n        throw new Error(\"Attempting to update uninitialized hyperlink toolbar\");\n      o(this.state);\n    }, this.startMenuUpdateTimer = () => {\n      this.menuUpdateTimer = setTimeout(() => {\n        this.update();\n      }, 250);\n    }, this.stopMenuUpdateTimer = () => (this.menuUpdateTimer && (clearTimeout(this.menuUpdateTimer), this.menuUpdateTimer = void 0), !1), this.pmView.dom.addEventListener(\"mouseover\", this.mouseOverHandler), document.addEventListener(\"click\", this.clickHandler, !0), document.addEventListener(\"scroll\", this.scrollHandler);\n  }\n  editHyperlink(t, e) {\n    var r;\n    const o = this.pmView.state.tr.insertText(\n      e,\n      this.hyperlinkMarkRange.from,\n      this.hyperlinkMarkRange.to\n    );\n    o.addMark(\n      this.hyperlinkMarkRange.from,\n      this.hyperlinkMarkRange.from + e.length,\n      this.pmView.state.schema.mark(\"link\", { href: t })\n    ), this.pmView.dispatch(o), this.pmView.focus(), (r = this.state) != null && r.show && (this.state.show = !1, this.emitUpdate());\n  }\n  deleteHyperlink() {\n    var t;\n    this.pmView.dispatch(\n      this.pmView.state.tr.removeMark(\n        this.hyperlinkMarkRange.from,\n        this.hyperlinkMarkRange.to,\n        this.hyperlinkMark.type\n      ).setMeta(\"preventAutolink\", !0)\n    ), this.pmView.focus(), (t = this.state) != null && t.show && (this.state.show = !1, this.emitUpdate());\n  }\n  update() {\n    var e;\n    if (!this.pmView.hasFocus())\n      return;\n    const t = this.hyperlinkMark;\n    if (this.hyperlinkMark = void 0, this.hyperlinkMarkRange = void 0, this.keyboardHoveredHyperlinkMark = void 0, this.keyboardHoveredHyperlinkMarkRange = void 0, this.pmView.state.selection.empty) {\n      const o = this.pmView.state.selection.$from.marks();\n      for (const r of o)\n        if (r.type.name === this.pmView.state.schema.mark(\"link\").type.name) {\n          this.keyboardHoveredHyperlinkMark = r, this.keyboardHoveredHyperlinkMarkRange = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.getMarkRange)(\n            this.pmView.state.selection.$from,\n            r.type,\n            r.attrs\n          ) || void 0;\n          break;\n        }\n    }\n    if (this.mouseHoveredHyperlinkMark && (this.hyperlinkMark = this.mouseHoveredHyperlinkMark, this.hyperlinkMarkRange = this.mouseHoveredHyperlinkMarkRange), this.keyboardHoveredHyperlinkMark && (this.hyperlinkMark = this.keyboardHoveredHyperlinkMark, this.hyperlinkMarkRange = this.keyboardHoveredHyperlinkMarkRange), this.hyperlinkMark && this.editor.isEditable) {\n      this.state = {\n        show: !0,\n        referencePos: (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.posToDOMRect)(\n          this.pmView,\n          this.hyperlinkMarkRange.from,\n          this.hyperlinkMarkRange.to\n        ),\n        url: this.hyperlinkMark.attrs.href,\n        text: this.pmView.state.doc.textBetween(\n          this.hyperlinkMarkRange.from,\n          this.hyperlinkMarkRange.to\n        )\n      }, this.emitUpdate();\n      return;\n    }\n    if ((e = this.state) != null && e.show && t && (!this.hyperlinkMark || !this.editor.isEditable)) {\n      this.state.show = !1, this.emitUpdate();\n      return;\n    }\n  }\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mouseover\", this.mouseOverHandler), document.removeEventListener(\"scroll\", this.scrollHandler), document.removeEventListener(\"click\", this.clickHandler, !0);\n  }\n}\nconst uo = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\n  \"HyperlinkToolbarPlugin\"\n);\nclass ho extends q {\n  constructor(e) {\n    super();\n    d(this, \"view\");\n    d(this, \"plugin\");\n    /**\n     * Edit the currently hovered hyperlink.\n     */\n    d(this, \"editHyperlink\", (e, o) => {\n      this.view.editHyperlink(e, o);\n    });\n    /**\n     * Delete the currently hovered hyperlink.\n     */\n    d(this, \"deleteHyperlink\", () => {\n      this.view.deleteHyperlink();\n    });\n    /**\n     * When hovering on/off hyperlinks using the mouse cursor, the hyperlink\n     * toolbar will open & close with a delay.\n     *\n     * This function starts the delay timer, and should be used for when the mouse cursor enters the hyperlink toolbar.\n     */\n    d(this, \"startHideTimer\", () => {\n      this.view.startMenuUpdateTimer();\n    });\n    /**\n     * When hovering on/off hyperlinks using the mouse cursor, the hyperlink\n     * toolbar will open & close with a delay.\n     *\n     * This function stops the delay timer, and should be used for when the mouse cursor exits the hyperlink toolbar.\n     */\n    d(this, \"stopHideTimer\", () => {\n      this.view.stopMenuUpdateTimer();\n    });\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n      key: uo,\n      view: (o) => (this.view = new po(e, o, (r) => {\n        this.emit(\"update\", r);\n      }), this.view)\n    });\n  }\n  onUpdate(e) {\n    return this.on(\"update\", e);\n  }\n}\nclass mo {\n  constructor(t, e, o) {\n    d(this, \"state\");\n    d(this, \"emitUpdate\");\n    d(this, \"prevWasEditable\", null);\n    d(this, \"mouseDownHandler\", () => {\n      var t;\n      (t = this.state) != null && t.show && (this.state.show = !1, this.emitUpdate());\n    });\n    // For dragging the whole editor.\n    d(this, \"dragstartHandler\", () => {\n      var t;\n      (t = this.state) != null && t.show && (this.state.show = !1, this.emitUpdate());\n    });\n    d(this, \"blurHandler\", (t) => {\n      var o;\n      const e = this.pmView.dom.parentElement;\n      // An element is clicked.\n      t && t.relatedTarget && // Element is inside the editor.\n      (e === t.relatedTarget || e.contains(t.relatedTarget)) || (o = this.state) != null && o.show && (this.state.show = !1, this.emitUpdate());\n    });\n    d(this, \"scrollHandler\", () => {\n      var t;\n      if ((t = this.state) != null && t.show) {\n        const e = document.querySelector(\n          `[data-node-type=\"blockContainer\"][data-id=\"${this.state.block.id}\"]`\n        );\n        this.state.referencePos = e.getBoundingClientRect(), this.emitUpdate();\n      }\n    });\n    this.pluginKey = t, this.pmView = e, this.emitUpdate = () => {\n      if (!this.state)\n        throw new Error(\"Attempting to update uninitialized image toolbar\");\n      o(this.state);\n    }, e.dom.addEventListener(\"mousedown\", this.mouseDownHandler), e.dom.addEventListener(\"dragstart\", this.dragstartHandler), e.dom.addEventListener(\"blur\", this.blurHandler), document.addEventListener(\"scroll\", this.scrollHandler);\n  }\n  update(t, e) {\n    var r, i;\n    const o = this.pluginKey.getState(t.state);\n    if (!((r = this.state) != null && r.show) && o.block) {\n      const s = document.querySelector(\n        `[data-node-type=\"blockContainer\"][data-id=\"${o.block.id}\"]`\n      );\n      this.state = {\n        show: !0,\n        referencePos: s.getBoundingClientRect(),\n        block: o.block\n      }, this.emitUpdate();\n      return;\n    }\n    (!t.state.selection.eq(e.selection) || !t.state.doc.eq(e.doc)) && (i = this.state) != null && i.show && (this.state.show = !1, this.emitUpdate());\n  }\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousedown\", this.mouseDownHandler), this.pmView.dom.removeEventListener(\"dragstart\", this.dragstartHandler), this.pmView.dom.removeEventListener(\"blur\", this.blurHandler), document.removeEventListener(\"scroll\", this.scrollHandler);\n  }\n}\nconst ut = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"ImageToolbarPlugin\");\nclass fo extends q {\n  constructor(e) {\n    super();\n    d(this, \"view\");\n    d(this, \"plugin\");\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n      key: ut,\n      view: (o) => (this.view = new mo(\n        // editor,\n        ut,\n        o,\n        (r) => {\n          this.emit(\"update\", r);\n        }\n      ), this.view),\n      state: {\n        init: () => ({\n          block: void 0\n        }),\n        apply: (o) => {\n          var i;\n          return {\n            block: (i = o.getMeta(ut)) == null ? void 0 : i.block\n          };\n        }\n      }\n    });\n  }\n  onUpdate(e) {\n    return this.on(\"update\", e);\n  }\n}\nconst go = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.findParentNode)((n) => n.type.name === \"blockContainer\");\nclass bo {\n  constructor(t, e) {\n    d(this, \"state\");\n    d(this, \"emitUpdate\");\n    d(this, \"pluginState\");\n    d(this, \"handleScroll\", () => {\n      var t;\n      if ((t = this.state) != null && t.show) {\n        const e = document.querySelector(\n          `[data-decoration-id=\"${this.pluginState.decorationId}\"]`\n        );\n        this.state.referencePos = e.getBoundingClientRect(), this.emitUpdate(this.pluginState.triggerCharacter);\n      }\n    });\n    d(this, \"closeMenu\", () => {\n      this.editor._tiptapEditor.view.dispatch(\n        this.editor._tiptapEditor.view.state.tr.setMeta(\n          U,\n          null\n        )\n      );\n    });\n    d(this, \"clearQuery\", () => {\n      this.pluginState !== void 0 && this.editor._tiptapEditor.chain().focus().deleteRange({\n        from: this.pluginState.queryStartPos - (this.pluginState.fromUserInput ? this.pluginState.triggerCharacter.length : 0),\n        to: this.editor._tiptapEditor.state.selection.from\n      }).run();\n    });\n    this.editor = t, this.pluginState = void 0, this.emitUpdate = (o) => {\n      if (!this.state)\n        throw new Error(\"Attempting to update uninitialized suggestions menu\");\n      e(o, this.state);\n    }, document.addEventListener(\"scroll\", this.handleScroll);\n  }\n  update(t, e) {\n    const o = U.getState(e), r = U.getState(\n      t.state\n    ), i = o === void 0 && r !== void 0, s = o !== void 0 && r === void 0;\n    if (!i && !(o !== void 0 && r !== void 0) && !s)\n      return;\n    if (this.pluginState = s ? o : r, s || !this.editor.isEditable) {\n      this.state.show = !1, this.emitUpdate(this.pluginState.triggerCharacter);\n      return;\n    }\n    const l = document.querySelector(\n      `[data-decoration-id=\"${this.pluginState.decorationId}\"]`\n    );\n    this.editor.isEditable && (this.state = {\n      show: !0,\n      referencePos: l.getBoundingClientRect(),\n      query: this.pluginState.query\n    }, this.emitUpdate(this.pluginState.triggerCharacter));\n  }\n  destroy() {\n    document.removeEventListener(\"scroll\", this.handleScroll);\n  }\n}\nconst U = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"SuggestionMenuPlugin\");\nclass yo extends q {\n  constructor(e) {\n    super();\n    d(this, \"view\");\n    d(this, \"plugin\");\n    d(this, \"triggerCharacters\", []);\n    d(this, \"addTriggerCharacter\", (e) => {\n      this.triggerCharacters.push(e);\n    });\n    // TODO: Should this be called automatically when listeners are removed?\n    d(this, \"removeTriggerCharacter\", (e) => {\n      this.triggerCharacters = this.triggerCharacters.filter(\n        (o) => o !== e\n      );\n    });\n    d(this, \"closeMenu\", () => this.view.closeMenu());\n    d(this, \"clearQuery\", () => this.view.clearQuery());\n    const o = this.triggerCharacters;\n    this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n      key: U,\n      view: () => (this.view = new bo(\n        e,\n        (r, i) => {\n          this.emit(`update ${r}`, i);\n        }\n      ), this.view),\n      state: {\n        // Initialize the plugin's internal state.\n        init() {\n        },\n        // Apply changes to the plugin state from an editor transaction.\n        apply(r, i, s, a) {\n          if (r.getMeta(\"orderedListIndexing\") !== void 0)\n            return i;\n          const l = r.getMeta(U);\n          if (typeof l == \"object\" && l !== null && i === void 0)\n            return {\n              triggerCharacter: l.triggerCharacter,\n              fromUserInput: l.fromUserInput !== !1,\n              queryStartPos: a.selection.from,\n              query: \"\",\n              decorationId: `id_${Math.floor(Math.random() * 4294967295)}`\n            };\n          if (i === void 0)\n            return i;\n          if (\n            // Highlighting text should hide the menu.\n            a.selection.from !== a.selection.to || // Transactions with plugin metadata should hide the menu.\n            l === null || // Certain mouse events should hide the menu.\n            // TODO: Change to global mousedown listener.\n            r.getMeta(\"focus\") || r.getMeta(\"blur\") || r.getMeta(\"pointer\") || // Moving the caret before the character which triggered the menu should hide it.\n            i.triggerCharacter !== void 0 && a.selection.from < i.queryStartPos\n          )\n            return;\n          const c = { ...i };\n          return c.query = a.doc.textBetween(\n            i.queryStartPos,\n            a.selection.from\n          ), c;\n        }\n      },\n      props: {\n        handleKeyDown(r, i) {\n          const s = this.getState(r.state);\n          return o.includes(i.key) && s === void 0 ? (i.preventDefault(), r.dispatch(\n            r.state.tr.insertText(i.key).scrollIntoView().setMeta(U, {\n              triggerCharacter: i.key\n            })\n          ), !0) : !1;\n        },\n        // Setup decorator on the currently active suggestion.\n        decorations(r) {\n          const i = this.getState(r);\n          if (i === void 0)\n            return null;\n          if (!i.fromUserInput) {\n            const s = go(r.selection);\n            if (s)\n              return prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(r.doc, [\n                prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.node(\n                  s.pos,\n                  s.pos + s.node.nodeSize,\n                  {\n                    nodeName: \"span\",\n                    class: \"bn-suggestion-decorator\",\n                    \"data-decoration-id\": i.decorationId\n                  }\n                )\n              ]);\n          }\n          return prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(r.doc, [\n            prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.inline(\n              i.queryStartPos - i.triggerCharacter.length,\n              i.queryStartPos,\n              {\n                nodeName: \"span\",\n                class: \"bn-suggestion-decorator\",\n                \"data-decoration-id\": i.decorationId\n              }\n            )\n          ]);\n        }\n      }\n    });\n  }\n  onUpdate(e, o) {\n    return this.triggerCharacters.includes(e) || this.addTriggerCharacter(e), this.on(`update ${e}`, o);\n  }\n}\nfunction Vr(n, t) {\n  n.suggestionMenus.addTriggerCharacter(t);\n}\nclass F extends prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Selection {\n  constructor(e, o) {\n    super(e, o);\n    d(this, \"nodes\");\n    const r = e.node();\n    this.nodes = [], e.doc.nodesBetween(e.pos, o.pos, (i, s, a) => {\n      if (a !== null && a.eq(r))\n        return this.nodes.push(i), !1;\n    });\n  }\n  static create(e, o, r = o) {\n    return new F(e.resolve(o), e.resolve(r));\n  }\n  content() {\n    return new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(this.nodes), 0, 0);\n  }\n  eq(e) {\n    if (!(e instanceof F) || this.nodes.length !== e.nodes.length || this.from !== e.from || this.to !== e.to)\n      return !1;\n    for (let o = 0; o < this.nodes.length; o++)\n      if (!this.nodes[o].eq(e.nodes[o]))\n        return !1;\n    return !0;\n  }\n  map(e, o) {\n    const r = o.mapResult(this.from), i = o.mapResult(this.to);\n    return i.deleted ? prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Selection.near(e.resolve(r.pos)) : r.deleted ? prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Selection.near(e.resolve(i.pos)) : new F(\n      e.resolve(r.pos),\n      e.resolve(i.pos)\n    );\n  }\n  toJSON() {\n    return { type: \"node\", anchor: this.anchor, head: this.head };\n  }\n}\nlet H;\nfunction Ct(n, t) {\n  var r;\n  if (!t.dom.isConnected)\n    return;\n  const e = t.posAtCoords(n);\n  if (!e)\n    return;\n  let o = t.domAtPos(e.pos).node;\n  if (o !== t.dom) {\n    for (; o && o.parentNode && o.parentNode !== t.dom && !((r = o.hasAttribute) != null && r.call(o, \"data-id\")); )\n      o = o.parentNode;\n    if (o)\n      return { node: o, id: o.getAttribute(\"data-id\") };\n  }\n}\nfunction ko(n, t) {\n  const e = Ct(n, t);\n  if (e && e.node.nodeType === 1) {\n    const o = t.docView, r = o.nearestDesc(e.node, !0);\n    return !r || r === o ? null : r.posBefore;\n  }\n  return null;\n}\nfunction wo(n, t) {\n  let e, o;\n  const r = t.resolve(n.from).node().type.spec.group === \"blockContent\", i = t.resolve(n.to).node().type.spec.group === \"blockContent\", s = Math.min(n.$anchor.depth, n.$head.depth);\n  if (r && i) {\n    const a = n.$from.start(s - 1), l = n.$to.end(s - 1);\n    e = t.resolve(a - 1).pos, o = t.resolve(l + 1).pos;\n  } else\n    e = n.from, o = n.to;\n  return { from: e, to: o };\n}\nfunction Dt(n, t, e = t) {\n  t === e && (e += n.state.doc.resolve(t + 1).node().nodeSize);\n  const o = n.domAtPos(t).node.cloneNode(!0), r = n.domAtPos(t).node, i = (p, u) => Array.prototype.indexOf.call(p.children, u), s = i(\n    r,\n    // Expects from position to be just before the first selected block.\n    n.domAtPos(t + 1).node.parentElement\n  ), a = i(\n    r,\n    // Expects to position to be just after the last selected block.\n    n.domAtPos(e - 1).node.parentElement\n  );\n  for (let p = r.childElementCount - 1; p >= 0; p--)\n    (p > a || p < s) && o.removeChild(o.children[p]);\n  ce(), H = o;\n  const c = n.dom.className.split(\" \").filter(\n    (p) => p !== \"ProseMirror\" && p !== \"bn-root\" && p !== \"bn-editor\"\n  ).join(\" \");\n  H.className = H.className + \" bn-drag-preview \" + c, document.body.appendChild(H);\n}\nfunction ce() {\n  H !== void 0 && (document.body.removeChild(H), H = void 0);\n}\nfunction vo(n, t) {\n  if (!n.dataTransfer)\n    return;\n  const e = t.prosemirrorView, o = e.dom.getBoundingClientRect(), r = {\n    left: o.left + o.width / 2,\n    // take middle of editor\n    top: n.clientY\n  }, i = ko(r, e);\n  if (i != null) {\n    const s = e.state.selection, a = e.state.doc, { from: l, to: c } = wo(s, a), p = l <= i && i < c, u = s.$anchor.node() !== s.$head.node() || s instanceof F;\n    p && u ? (e.dispatch(\n      e.state.tr.setSelection(F.create(a, l, c))\n    ), Dt(e, l, c)) : (e.dispatch(\n      e.state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.NodeSelection.create(e.state.doc, i))\n    ), Dt(e, i));\n    const m = e.state.selection.content(), h = t._tiptapEditor.schema, y = Jt(h, t).serializeProseMirrorFragment(\n      m.content\n    ), B = at(h, t).exportProseMirrorFragment(\n      m.content\n    ), E = St(B);\n    n.dataTransfer.clearData(), n.dataTransfer.setData(\"blocknote/html\", y), n.dataTransfer.setData(\"text/html\", B), n.dataTransfer.setData(\"text/plain\", E), n.dataTransfer.effectAllowed = \"move\", n.dataTransfer.setDragImage(H, 0, 0), e.dragging = { slice: m, move: !0 };\n  }\n}\nclass Eo {\n  constructor(t, e, o) {\n    d(this, \"state\");\n    d(this, \"emitUpdate\");\n    // When true, the drag handle with be anchored at the same level as root elements\n    // When false, the drag handle with be just to the left of the element\n    // TODO: Is there any case where we want this to be false?\n    d(this, \"horizontalPosAnchoredAtRoot\");\n    d(this, \"horizontalPosAnchor\");\n    d(this, \"hoveredBlock\");\n    // Used to check if currently dragged content comes from this editor instance.\n    d(this, \"isDragging\", !1);\n    d(this, \"menuFrozen\", !1);\n    /**\n     * Sets isDragging when dragging text.\n     */\n    d(this, \"onDragStart\", () => {\n      this.isDragging = !0;\n    });\n    /**\n     * If the event is outside the editor contents,\n     * we dispatch a fake event, so that we can still drop the content\n     * when dragging / dropping to the side of the editor\n     */\n    d(this, \"onDrop\", (t) => {\n      if (this.editor._tiptapEditor.commands.blur(), t.synthetic || !this.isDragging)\n        return;\n      const e = this.pmView.posAtCoords({\n        left: t.clientX,\n        top: t.clientY\n      });\n      if (this.isDragging = !1, !e || e.inside === -1) {\n        const o = new Event(\"drop\", t), r = this.pmView.dom.firstChild.getBoundingClientRect();\n        o.clientX = r.left + r.width / 2, o.clientY = t.clientY, o.dataTransfer = t.dataTransfer, o.preventDefault = () => t.preventDefault(), o.synthetic = !0, this.pmView.dom.dispatchEvent(o);\n      }\n    });\n    /**\n     * If the event is outside the editor contents,\n     * we dispatch a fake event, so that we can still drop the content\n     * when dragging / dropping to the side of the editor\n     */\n    d(this, \"onDragOver\", (t) => {\n      if (t.synthetic || !this.isDragging)\n        return;\n      const e = this.pmView.posAtCoords({\n        left: t.clientX,\n        top: t.clientY\n      });\n      if (!e || e.inside === -1) {\n        const o = new Event(\"dragover\", t), r = this.pmView.dom.firstChild.getBoundingClientRect();\n        o.clientX = r.left + r.width / 2, o.clientY = t.clientY, o.dataTransfer = t.dataTransfer, o.preventDefault = () => t.preventDefault(), o.synthetic = !0, this.pmView.dom.dispatchEvent(o);\n      }\n    });\n    d(this, \"onKeyDown\", (t) => {\n      var e;\n      (e = this.state) != null && e.show && (this.state.show = !1, this.emitUpdate(this.state)), this.menuFrozen = !1;\n    });\n    d(this, \"onMouseDown\", (t) => {\n      this.state && !this.state.show && (this.state.show = !0, this.emitUpdate(this.state)), this.menuFrozen = !1;\n    });\n    d(this, \"onMouseMove\", (t) => {\n      var c, p, u, m, h;\n      if (this.menuFrozen)\n        return;\n      const e = this.pmView.dom.firstChild.getBoundingClientRect(), o = this.pmView.dom.getBoundingClientRect(), r = t.clientX >= o.left && t.clientX <= o.right && t.clientY >= o.top && t.clientY <= o.bottom, i = this.pmView.dom.parentElement;\n      if (\n        // Cursor is within the editor area\n        r && // An element is hovered\n        t && t.target && // Element is outside the editor\n        !(i === t.target || i.contains(t.target))\n      ) {\n        (c = this.state) != null && c.show && (this.state.show = !1, this.emitUpdate(this.state));\n        return;\n      }\n      this.horizontalPosAnchor = e.x;\n      const s = {\n        left: e.left + e.width / 2,\n        // take middle of editor\n        top: t.clientY\n      }, a = Ct(s, this.pmView);\n      if (!a || !this.editor.isEditable) {\n        (p = this.state) != null && p.show && (this.state.show = !1, this.emitUpdate(this.state));\n        return;\n      }\n      if ((u = this.state) != null && u.show && ((m = this.hoveredBlock) != null && m.hasAttribute(\"data-id\")) && ((h = this.hoveredBlock) == null ? void 0 : h.getAttribute(\"data-id\")) === a.id)\n        return;\n      this.hoveredBlock = a.node;\n      const l = a.node.firstChild;\n      if (l && this.editor.isEditable) {\n        const f = l.getBoundingClientRect();\n        this.state = {\n          show: !0,\n          referencePos: new DOMRect(\n            this.horizontalPosAnchoredAtRoot ? this.horizontalPosAnchor : f.x,\n            f.y,\n            f.width,\n            f.height\n          ),\n          block: this.editor.getBlock(\n            this.hoveredBlock.getAttribute(\"data-id\")\n          )\n        }, this.emitUpdate(this.state);\n      }\n    });\n    d(this, \"onScroll\", () => {\n      var t;\n      if ((t = this.state) != null && t.show) {\n        const o = this.hoveredBlock.firstChild.getBoundingClientRect();\n        this.state.referencePos = new DOMRect(\n          this.horizontalPosAnchoredAtRoot ? this.horizontalPosAnchor : o.x,\n          o.y,\n          o.width,\n          o.height\n        ), this.emitUpdate(this.state);\n      }\n    });\n    this.editor = t, this.pmView = e, this.emitUpdate = () => {\n      if (!this.state)\n        throw new Error(\"Attempting to update uninitialized side menu\");\n      o(this.state);\n    }, this.horizontalPosAnchoredAtRoot = !0, this.horizontalPosAnchor = this.pmView.dom.firstChild.getBoundingClientRect().x, document.body.addEventListener(\"drop\", this.onDrop, !0), document.body.addEventListener(\"dragover\", this.onDragOver), this.pmView.dom.addEventListener(\"dragstart\", this.onDragStart), document.body.addEventListener(\"mousemove\", this.onMouseMove, !0), document.addEventListener(\"scroll\", this.onScroll), document.body.addEventListener(\"mousedown\", this.onMouseDown, !0), document.body.addEventListener(\"keydown\", this.onKeyDown, !0);\n  }\n  destroy() {\n    var t;\n    (t = this.state) != null && t.show && (this.state.show = !1, this.emitUpdate(this.state)), document.body.removeEventListener(\"mousemove\", this.onMouseMove, !0), document.body.removeEventListener(\"dragover\", this.onDragOver), this.pmView.dom.removeEventListener(\"dragstart\", this.onDragStart), document.body.removeEventListener(\"drop\", this.onDrop, !0), document.removeEventListener(\"scroll\", this.onScroll), document.body.removeEventListener(\"mousedown\", this.onMouseDown, !0), document.body.removeEventListener(\"keydown\", this.onKeyDown, !0);\n  }\n  addBlock() {\n    var l;\n    (l = this.state) != null && l.show && (this.state.show = !1, this.emitUpdate(this.state)), this.menuFrozen = !0;\n    const e = this.hoveredBlock.firstChild.getBoundingClientRect(), o = this.pmView.posAtCoords({\n      left: e.left + e.width / 2,\n      top: e.top + e.height / 2\n    });\n    if (!o)\n      return;\n    const r = b(\n      this.editor._tiptapEditor.state.doc,\n      o.pos\n    );\n    if (r === void 0)\n      return;\n    const { contentNode: i, startPos: s, endPos: a } = r;\n    if (i.type.spec.content !== \"inline*\" || i.textContent.length !== 0) {\n      const c = a + 1, p = c + 2;\n      this.editor._tiptapEditor.chain().BNCreateBlock(c).setTextSelection(p).run();\n    } else\n      this.editor._tiptapEditor.commands.setTextSelection(s + 1);\n    this.pmView.focus(), this.pmView.dispatch(\n      this.pmView.state.tr.scrollIntoView().setMeta(U, {\n        triggerCharacter: \"/\",\n        fromUserInput: !1\n      })\n    );\n  }\n}\nconst So = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"SideMenuPlugin\");\nclass Co extends q {\n  constructor(e) {\n    super();\n    d(this, \"view\");\n    d(this, \"plugin\");\n    /**\n     * If the block is empty, opens the slash menu. If the block has content,\n     * creates a new block below and opens the slash menu in it.\n     */\n    d(this, \"addBlock\", () => this.view.addBlock());\n    /**\n     * Handles drag & drop events for blocks.\n     */\n    d(this, \"blockDragStart\", (e) => {\n      this.view.isDragging = !0, vo(e, this.editor);\n    });\n    /**\n     * Handles drag & drop events for blocks.\n     */\n    d(this, \"blockDragEnd\", () => ce());\n    /**\n     * Freezes the side menu. When frozen, the side menu will stay\n     * attached to the same block regardless of which block is hovered by the\n     * mouse cursor.\n     */\n    d(this, \"freezeMenu\", () => this.view.menuFrozen = !0);\n    /**\n     * Unfreezes the side menu. When frozen, the side menu will stay\n     * attached to the same block regardless of which block is hovered by the\n     * mouse cursor.\n     */\n    d(this, \"unfreezeMenu\", () => this.view.menuFrozen = !1);\n    this.editor = e, this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n      key: So,\n      view: (o) => (this.view = new Eo(e, o, (r) => {\n        this.emit(\"update\", r);\n      }), this.view)\n    });\n  }\n  onUpdate(e) {\n    return this.on(\"update\", e);\n  }\n}\nlet C;\nfunction Ot() {\n  C || (C = document.createElement(\"div\"), C.innerHTML = \"_\", C.style.opacity = \"0\", C.style.height = \"1px\", C.style.width = \"1px\", document.body.appendChild(C));\n}\nfunction To() {\n  C && (document.body.removeChild(C), C = void 0);\n}\nfunction ot(n) {\n  return Array.prototype.indexOf.call(n.parentElement.childNodes, n);\n}\nfunction xo(n) {\n  for (; n && n.nodeName !== \"TD\" && n.nodeName !== \"TH\"; )\n    n = n.classList && n.classList.contains(\"ProseMirror\") ? null : n.parentNode;\n  return n;\n}\nfunction Mo(n) {\n  n.forEach((t) => {\n    const e = document.getElementsByClassName(t);\n    for (let o = 0; o < e.length; o++)\n      e[o].style.visibility = \"hidden\";\n  });\n}\nclass Bo {\n  constructor(t, e, o) {\n    d(this, \"state\");\n    d(this, \"emitUpdate\");\n    d(this, \"tableId\");\n    d(this, \"tablePos\");\n    d(this, \"menuFrozen\", !1);\n    d(this, \"prevWasEditable\", null);\n    d(this, \"mouseMoveHandler\", (t) => {\n      var c;\n      if (this.menuFrozen)\n        return;\n      const e = xo(t.target);\n      if (!e || !this.editor.isEditable) {\n        (c = this.state) != null && c.show && (this.state.show = !1, this.emitUpdate());\n        return;\n      }\n      const o = ot(e), r = ot(e.parentElement), i = e.getBoundingClientRect(), s = e.parentElement.parentElement.getBoundingClientRect(), a = Ct(i, this.pmView);\n      if (!a)\n        throw new Error(\n          \"Found table cell element, but could not find surrounding blockContent element.\"\n        );\n      if (this.tableId = a.id, this.state !== void 0 && this.state.show && this.tableId === a.id && this.state.rowIndex === r && this.state.colIndex === o)\n        return;\n      let l;\n      return this.editor._tiptapEditor.state.doc.descendants((p, u) => typeof l < \"u\" ? !1 : p.type.name !== \"blockContainer\" || p.attrs.id !== a.id ? !0 : (l = k(\n        p,\n        this.editor.schema.blockSchema,\n        this.editor.schema.inlineContentSchema,\n        this.editor.schema.styleSchema,\n        this.editor.blockCache\n      ), this.tablePos = u + 1, !1)), this.state = {\n        show: !0,\n        referencePosCell: i,\n        referencePosTable: s,\n        block: l,\n        colIndex: o,\n        rowIndex: r,\n        draggingState: void 0\n      }, this.emitUpdate(), !1;\n    });\n    d(this, \"dragOverHandler\", (t) => {\n      var m;\n      if (((m = this.state) == null ? void 0 : m.draggingState) === void 0)\n        return;\n      t.preventDefault(), t.dataTransfer.dropEffect = \"move\", Mo([\n        \"column-resize-handle\",\n        \"prosemirror-dropcursor-block\",\n        \"prosemirror-dropcursor-inline\"\n      ]);\n      const e = {\n        left: Math.min(\n          Math.max(t.clientX, this.state.referencePosTable.left + 1),\n          this.state.referencePosTable.right - 1\n        ),\n        top: Math.min(\n          Math.max(t.clientY, this.state.referencePosTable.top + 1),\n          this.state.referencePosTable.bottom - 1\n        )\n      }, o = document.elementsFromPoint(e.left, e.top).filter(\n        (h) => h.tagName === \"TD\" || h.tagName === \"TH\"\n      );\n      if (o.length === 0)\n        throw new Error(\n          \"Could not find table cell element that the mouse cursor is hovering over.\"\n        );\n      const r = o[0];\n      let i = !1;\n      const s = ot(r.parentElement), a = ot(r), l = this.state.draggingState.draggedCellOrientation === \"row\" ? this.state.rowIndex : this.state.colIndex, p = (this.state.draggingState.draggedCellOrientation === \"row\" ? s : a) !== l;\n      (this.state.rowIndex !== s || this.state.colIndex !== a) && (this.state.rowIndex = s, this.state.colIndex = a, this.state.referencePosCell = r.getBoundingClientRect(), i = !0);\n      const u = this.state.draggingState.draggedCellOrientation === \"row\" ? e.top : e.left;\n      this.state.draggingState.mousePos !== u && (this.state.draggingState.mousePos = u, i = !0), i && this.emitUpdate(), p && this.pmView.dispatch(\n        this.pmView.state.tr.setMeta(X, !0)\n      );\n    });\n    d(this, \"dropHandler\", (t) => {\n      if (this.state === void 0 || this.state.draggingState === void 0)\n        return;\n      t.preventDefault();\n      const e = this.state.block.content.rows;\n      if (this.state.draggingState.draggedCellOrientation === \"row\") {\n        const o = e[this.state.draggingState.originalIndex];\n        e.splice(this.state.draggingState.originalIndex, 1), e.splice(this.state.rowIndex, 0, o);\n      } else {\n        const o = e.map(\n          (r) => r.cells[this.state.draggingState.originalIndex]\n        );\n        e.forEach((r, i) => {\n          r.cells.splice(this.state.draggingState.originalIndex, 1), r.cells.splice(this.state.colIndex, 0, o[i]);\n        });\n      }\n      this.editor.updateBlock(this.state.block, {\n        type: \"table\",\n        content: {\n          type: \"tableContent\",\n          rows: e\n        }\n      });\n    });\n    d(this, \"scrollHandler\", () => {\n      var t;\n      if ((t = this.state) != null && t.show) {\n        const e = document.querySelector(\n          `[data-node-type=\"blockContainer\"][data-id=\"${this.tableId}\"] table`\n        ), o = e.querySelector(\n          `tr:nth-child(${this.state.rowIndex + 1}) > td:nth-child(${this.state.colIndex + 1})`\n        );\n        this.state.referencePosTable = e.getBoundingClientRect(), this.state.referencePosCell = o.getBoundingClientRect(), this.emitUpdate();\n      }\n    });\n    this.editor = t, this.pmView = e, this.emitUpdate = () => {\n      if (!this.state)\n        throw new Error(\"Attempting to update uninitialized image toolbar\");\n      o(this.state);\n    }, e.dom.addEventListener(\"mousemove\", this.mouseMoveHandler), document.addEventListener(\"dragover\", this.dragOverHandler), document.addEventListener(\"drop\", this.dropHandler), document.addEventListener(\"scroll\", this.scrollHandler);\n  }\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousedown\", this.mouseMoveHandler), document.removeEventListener(\"dragover\", this.dragOverHandler), document.removeEventListener(\"drop\", this.dropHandler), document.removeEventListener(\"scroll\", this.scrollHandler);\n  }\n}\nconst X = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"TableHandlesPlugin\");\nclass Io extends q {\n  constructor(e) {\n    super();\n    d(this, \"view\");\n    d(this, \"plugin\");\n    /**\n     * Callback that should be set on the `dragStart` event for whichever element\n     * is used as the column drag handle.\n     */\n    d(this, \"colDragStart\", (e) => {\n      if (this.view.state === void 0)\n        throw new Error(\n          \"Attempted to drag table column, but no table block was hovered prior.\"\n        );\n      this.view.state.draggingState = {\n        draggedCellOrientation: \"col\",\n        originalIndex: this.view.state.colIndex,\n        mousePos: e.clientX\n      }, this.view.emitUpdate(), this.editor._tiptapEditor.view.dispatch(\n        this.editor._tiptapEditor.state.tr.setMeta(X, {\n          draggedCellOrientation: this.view.state.draggingState.draggedCellOrientation,\n          originalIndex: this.view.state.colIndex,\n          newIndex: this.view.state.colIndex,\n          tablePos: this.view.tablePos\n        })\n      ), Ot(), e.dataTransfer.setDragImage(C, 0, 0), e.dataTransfer.effectAllowed = \"move\";\n    });\n    /**\n     * Callback that should be set on the `dragStart` event for whichever element\n     * is used as the row drag handle.\n     */\n    d(this, \"rowDragStart\", (e) => {\n      if (this.view.state === void 0)\n        throw new Error(\n          \"Attempted to drag table row, but no table block was hovered prior.\"\n        );\n      this.view.state.draggingState = {\n        draggedCellOrientation: \"row\",\n        originalIndex: this.view.state.rowIndex,\n        mousePos: e.clientY\n      }, this.view.emitUpdate(), this.editor._tiptapEditor.view.dispatch(\n        this.editor._tiptapEditor.state.tr.setMeta(X, {\n          draggedCellOrientation: this.view.state.draggingState.draggedCellOrientation,\n          originalIndex: this.view.state.rowIndex,\n          newIndex: this.view.state.rowIndex,\n          tablePos: this.view.tablePos\n        })\n      ), Ot(), e.dataTransfer.setDragImage(C, 0, 0), e.dataTransfer.effectAllowed = \"copyMove\";\n    });\n    /**\n     * Callback that should be set on the `dragEnd` event for both the element\n     * used as the row drag handle, and the one used as the column drag handle.\n     */\n    d(this, \"dragEnd\", () => {\n      if (this.view.state === void 0)\n        throw new Error(\n          \"Attempted to drag table row, but no table block was hovered prior.\"\n        );\n      this.view.state.draggingState = void 0, this.view.emitUpdate(), this.editor._tiptapEditor.view.dispatch(\n        this.editor._tiptapEditor.state.tr.setMeta(X, null)\n      ), To();\n    });\n    /**\n     * Freezes the drag handles. When frozen, they will stay attached to the same\n     * cell regardless of which cell is hovered by the mouse cursor.\n     */\n    d(this, \"freezeHandles\", () => {\n      this.view.menuFrozen = !0;\n    });\n    /**\n     * Unfreezes the drag handles. When frozen, they will stay attached to the\n     * same cell regardless of which cell is hovered by the mouse cursor.\n     */\n    d(this, \"unfreezeHandles\", () => {\n      this.view.menuFrozen = !1;\n    });\n    this.editor = e, this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n      key: X,\n      view: (o) => (this.view = new Bo(e, o, (r) => {\n        this.emit(\"update\", r);\n      }), this.view),\n      // We use decorations to render the drop cursor when dragging a table row\n      // or column. The decorations are updated in the `dragOverHandler` method.\n      props: {\n        decorations: (o) => {\n          if (this.view === void 0 || this.view.state === void 0 || this.view.state.draggingState === void 0 || this.view.tablePos === void 0)\n            return;\n          const r = this.view.state.draggingState.draggedCellOrientation === \"row\" ? this.view.state.rowIndex : this.view.state.colIndex, i = [];\n          if (r === this.view.state.draggingState.originalIndex)\n            return prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(o.doc, i);\n          const s = o.doc.resolve(this.view.tablePos + 1), a = s.node();\n          if (this.view.state.draggingState.draggedCellOrientation === \"row\") {\n            const l = o.doc.resolve(\n              s.posAtIndex(r) + 1\n            ), c = l.node();\n            for (let p = 0; p < c.childCount; p++) {\n              const u = o.doc.resolve(\n                l.posAtIndex(p) + 1\n              ), m = u.node(), h = u.pos + (r > this.view.state.draggingState.originalIndex ? m.nodeSize - 2 : 0);\n              i.push(\n                // The widget is a small bar which spans the width of the cell.\n                prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.widget(h, () => {\n                  const f = document.createElement(\"div\");\n                  return f.className = \"bn-table-drop-cursor\", f.style.left = \"0\", f.style.right = \"0\", r > this.view.state.draggingState.originalIndex ? f.style.bottom = \"-2px\" : f.style.top = \"-3px\", f.style.height = \"4px\", f;\n                })\n              );\n            }\n          } else\n            for (let l = 0; l < a.childCount; l++) {\n              const c = o.doc.resolve(\n                s.posAtIndex(l) + 1\n              ), p = o.doc.resolve(\n                c.posAtIndex(r) + 1\n              ), u = p.node(), m = p.pos + (r > this.view.state.draggingState.originalIndex ? u.nodeSize - 2 : 0);\n              i.push(\n                // The widget is a small bar which spans the height of the cell.\n                prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.widget(m, () => {\n                  const h = document.createElement(\"div\");\n                  return h.className = \"bn-table-drop-cursor\", h.style.top = \"0\", h.style.bottom = \"0\", r > this.view.state.draggingState.originalIndex ? h.style.right = \"-2px\" : h.style.left = \"-3px\", h.style.width = \"4px\", h;\n                })\n              );\n            }\n          return prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(o.doc, i);\n        }\n      }\n    });\n  }\n  onUpdate(e) {\n    return this.on(\"update\", e);\n  }\n}\nfunction _t(n, t) {\n  const e = n.state.selection.content().content, r = Jt(\n    n.state.schema,\n    t\n  ).serializeProseMirrorFragment(e), s = at(\n    n.state.schema,\n    t\n  ).exportProseMirrorFragment(e), a = St(s);\n  return { internalHTML: r, externalHTML: s, plainText: a };\n}\nconst Lo = (n) => _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n  name: \"copyToClipboard\",\n  addProseMirrorPlugins() {\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n        props: {\n          handleDOMEvents: {\n            copy(t, e) {\n              e.preventDefault(), e.clipboardData.clearData(), \"node\" in t.state.selection && t.state.selection.node.type.spec.group === \"blockContent\" && t.dispatch(\n                t.state.tr.setSelection(\n                  new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.NodeSelection(\n                    t.state.doc.resolve(t.state.selection.from - 1)\n                  )\n                )\n              );\n              const { internalHTML: o, externalHTML: r, plainText: i } = _t(t, n);\n              return e.clipboardData.setData(\"blocknote/html\", o), e.clipboardData.setData(\"text/html\", r), e.clipboardData.setData(\"text/plain\", i), !0;\n            },\n            // This is for the use-case in which only a block without content\n            // is selected, e.g. an image block, and dragged (not using the\n            // drag handle).\n            dragstart(t, e) {\n              if (!(\"node\" in t.state.selection) || t.state.selection.node.type.spec.group !== \"blockContent\")\n                return;\n              t.dispatch(\n                t.state.tr.setSelection(\n                  new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.NodeSelection(\n                    t.state.doc.resolve(t.state.selection.from - 1)\n                  )\n                )\n              ), e.preventDefault(), e.dataTransfer.clearData();\n              const { internalHTML: o, externalHTML: r, plainText: i } = _t(t, n);\n              return e.dataTransfer.setData(\"blocknote/html\", o), e.dataTransfer.setData(\"text/html\", r), e.dataTransfer.setData(\"text/plain\", i), !0;\n            }\n          }\n        }\n      })\n    ];\n  }\n}), No = [\n  \"blocknote/html\",\n  \"text/html\",\n  \"text/plain\"\n], Ao = (n) => _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n  name: \"pasteFromClipboard\",\n  addProseMirrorPlugins() {\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n        props: {\n          handleDOMEvents: {\n            paste(t, e) {\n              e.preventDefault();\n              let o = null;\n              for (const r of No)\n                if (e.clipboardData.types.includes(r)) {\n                  o = r;\n                  break;\n                }\n              if (o !== null) {\n                let r = e.clipboardData.getData(o);\n                o === \"text/html\" && (r = ae(\n                  r.trim()\n                ).innerHTML), n._tiptapEditor.view.pasteHTML(r);\n              }\n              return !0;\n            }\n          }\n        }\n      })\n    ];\n  }\n}), Ho = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n  name: \"blockBackgroundColor\",\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\"],\n        attributes: {\n          backgroundColor: {\n            default: w.backgroundColor.default,\n            parseHTML: (n) => n.hasAttribute(\"data-background-color\") ? n.getAttribute(\"data-background-color\") : w.backgroundColor.default,\n            renderHTML: (n) => n.backgroundColor !== w.backgroundColor.default && {\n              \"data-background-color\": n.backgroundColor\n            }\n          }\n        }\n      }\n    ];\n  }\n}), Po = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"blocknote-placeholder\"), Do = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n  name: \"placeholder\",\n  addOptions() {\n    return {\n      placeholders: {\n        default: \"Enter text or type '/' for commands\",\n        heading: \"Heading\",\n        bulletListItem: \"List\",\n        numberedListItem: \"List\"\n      }\n    };\n  },\n  addProseMirrorPlugins() {\n    const n = this.options.placeholders;\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n        key: Po,\n        view: () => {\n          const t = document.createElement(\"style\");\n          document.head.appendChild(t);\n          const e = t.sheet, o = (i = \"\") => `.bn-block-content${i} .bn-inline-content:has(> .ProseMirror-trailingBreak):before`, r = (i, s = !0) => {\n            const a = s ? \"[data-is-empty-and-focused]\" : \"\";\n            if (i === \"default\")\n              return o(a);\n            const l = `[data-content-type=\"${i}\"]`;\n            return o(a + l);\n          };\n          for (const [i, s] of Object.entries(n)) {\n            const a = i === \"default\";\n            e.insertRule(\n              `${r(\n                i,\n                a\n              )}{ content: ${JSON.stringify(s)}; }`\n            ), a || e.insertRule(\n              `${r(i, !0)}{ content: ${JSON.stringify(\n                s\n              )}; }`\n            );\n          }\n          return {\n            destroy: () => {\n              document.head.removeChild(t);\n            }\n          };\n        },\n        props: {\n          // TODO: maybe also add placeholder for empty document (\"e.g.: start writing..\")\n          decorations: (t) => {\n            const { doc: e, selection: o } = t;\n            if (!this.editor.isEditable || !o.empty)\n              return;\n            const i = o.$anchor, s = i.parent;\n            if (s.content.size > 0)\n              return null;\n            const a = i.before(), l = prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.node(a, a + s.nodeSize, {\n              \"data-is-empty-and-focused\": \"true\"\n            });\n            return prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(e, [l]);\n          }\n        }\n      })\n    ];\n  }\n}), Oo = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n  name: \"textAlignment\",\n  addGlobalAttributes() {\n    return [\n      {\n        // Attribute is applied to block content instead of container so that child blocks don't inherit the text\n        // alignment styling.\n        types: [\"paragraph\", \"heading\", \"bulletListItem\", \"numberedListItem\"],\n        attributes: {\n          textAlignment: {\n            default: \"left\",\n            parseHTML: (n) => n.getAttribute(\"data-text-alignment\"),\n            renderHTML: (n) => n.textAlignment !== \"left\" && {\n              \"data-text-alignment\": n.textAlignment\n            }\n          }\n        }\n      }\n    ];\n  }\n}), _o = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n  name: \"blockTextColor\",\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\"],\n        attributes: {\n          textColor: {\n            default: w.textColor.default,\n            parseHTML: (n) => n.hasAttribute(\"data-text-color\") ? n.getAttribute(\"data-text-color\") : w.textColor.default,\n            renderHTML: (n) => n.textColor !== w.textColor.default && {\n              \"data-text-color\": n.textColor\n            }\n          }\n        }\n      }\n    ];\n  }\n}), Uo = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n  name: \"trailingNode\",\n  addProseMirrorPlugins() {\n    const n = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(this.name);\n    return [\n      new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n        key: n,\n        appendTransaction: (t, e, o) => {\n          const { doc: r, tr: i, schema: s } = o, a = n.getState(o), l = r.content.size - 2, c = s.nodes.blockContainer, p = s.nodes.paragraph;\n          if (a)\n            return i.insert(\n              l,\n              c.create(void 0, p.create())\n            );\n        },\n        state: {\n          init: (t, e) => {\n          },\n          apply: (t, e) => {\n            if (!t.docChanged)\n              return e;\n            let o = t.doc.lastChild;\n            if (!o || o.type.name !== \"blockGroup\")\n              throw new Error(\"Expected blockGroup\");\n            if (o = o.lastChild, !o || o.type.name !== \"blockContainer\")\n              throw new Error(\"Expected blockContainer\");\n            const r = o.firstChild;\n            if (!r)\n              throw new Error(\"Expected blockContent\");\n            return o.nodeSize > 4 || r.type.spec.content !== \"inline*\";\n          }\n        }\n      })\n    ];\n  }\n}), Ro = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"non-editable-block\"), zo = () => new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n  key: Ro,\n  props: {\n    handleKeyDown: (n, t) => {\n      \"node\" in n.state.selection && t.key.length === 1 && !t.ctrlKey && !t.altKey && !t.metaKey && !t.shiftKey && t.preventDefault();\n    }\n  }\n}), Ut = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"previous-blocks\"), Vo = {\n  // Numbered List Items\n  index: \"index\",\n  // Headings\n  level: \"level\",\n  // All Blocks\n  type: \"type\",\n  depth: \"depth\",\n  \"depth-change\": \"depth-change\"\n}, Fo = () => {\n  let n;\n  return new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n    key: Ut,\n    view(t) {\n      return {\n        update: async (e, o) => {\n          var r;\n          ((r = this.key) == null ? void 0 : r.getState(e.state).updatedBlocks.size) > 0 && (n = setTimeout(() => {\n            e.dispatch(\n              e.state.tr.setMeta(Ut, { clearUpdate: !0 })\n            );\n          }, 0));\n        },\n        destroy: () => {\n          n && clearTimeout(n);\n        }\n      };\n    },\n    state: {\n      init() {\n        return {\n          // Block attributes, by block ID, from just before the previous transaction.\n          prevTransactionOldBlockAttrs: {},\n          // Block attributes, by block ID, from just before the current transaction.\n          currentTransactionOldBlockAttrs: {},\n          // Set of IDs of blocks whose attributes changed from the current transaction.\n          updatedBlocks: /* @__PURE__ */ new Set()\n        };\n      },\n      apply(t, e, o, r) {\n        if (e.currentTransactionOldBlockAttrs = {}, e.updatedBlocks.clear(), !t.docChanged || o.doc.eq(r.doc))\n          return e;\n        const i = {}, s = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.findChildren)(o.doc, (c) => c.attrs.id), a = new Map(\n          s.map((c) => [c.node.attrs.id, c])\n        ), l = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.findChildren)(r.doc, (c) => c.attrs.id);\n        for (const c of l) {\n          const p = a.get(c.node.attrs.id), u = p == null ? void 0 : p.node.firstChild, m = c.node.firstChild;\n          if (p && u && m) {\n            const h = {\n              index: m.attrs.index,\n              level: m.attrs.level,\n              type: m.type.name,\n              depth: r.doc.resolve(c.pos).depth\n            };\n            let f = {\n              index: u.attrs.index,\n              level: u.attrs.level,\n              type: u.type.name,\n              depth: o.doc.resolve(p.pos).depth\n            };\n            i[c.node.attrs.id] = f, t.getMeta(\"numberedListIndexing\") && (c.node.attrs.id in e.prevTransactionOldBlockAttrs && (f = e.prevTransactionOldBlockAttrs[c.node.attrs.id]), h.type === \"numberedListItem\" && (f.index = h.index)), e.currentTransactionOldBlockAttrs[c.node.attrs.id] = f, JSON.stringify(f) !== JSON.stringify(h) && (f[\"depth-change\"] = f.depth - h.depth, e.updatedBlocks.add(c.node.attrs.id));\n          }\n        }\n        return e.prevTransactionOldBlockAttrs = i, e;\n      }\n    },\n    props: {\n      decorations(t) {\n        const e = this.getState(t);\n        if (e.updatedBlocks.size === 0)\n          return;\n        const o = [];\n        return t.doc.descendants((r, i) => {\n          if (!r.attrs.id || !e.updatedBlocks.has(r.attrs.id))\n            return;\n          const s = e.currentTransactionOldBlockAttrs[r.attrs.id], a = {};\n          for (const [c, p] of Object.entries(s))\n            a[\"data-prev-\" + Vo[c]] = p || \"none\";\n          const l = prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.node(i, i + r.nodeSize, {\n            ...a\n          });\n          o.push(l);\n        }), prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(t.doc, o);\n      }\n    }\n  });\n}, $o = {\n  blockColor: \"data-block-color\",\n  blockStyle: \"data-block-style\",\n  id: \"data-id\",\n  depth: \"data-depth\",\n  depthChange: \"data-depth-change\"\n}, Go = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create({\n  name: \"blockContainer\",\n  group: \"blockContainer\",\n  // A block always contains content, and optionally a blockGroup which contains nested blocks\n  content: \"blockContent blockGroup?\",\n  // Ensures content-specific keyboard handlers trigger first.\n  priority: 50,\n  defining: !0,\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (n) => {\n          if (typeof n == \"string\")\n            return !1;\n          const t = {};\n          for (const [e, o] of Object.entries($o))\n            n.getAttribute(o) && (t[e] = n.getAttribute(o));\n          return n.getAttribute(\"data-node-type\") === \"blockContainer\" ? t : !1;\n        }\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    var r;\n    const t = document.createElement(\"div\");\n    t.className = \"bn-block-outer\", t.setAttribute(\"data-node-type\", \"blockOuter\");\n    for (const [i, s] of Object.entries(n))\n      i !== \"class\" && t.setAttribute(i, s);\n    const e = {\n      ...((r = this.options.domAttributes) == null ? void 0 : r.block) || {},\n      ...n\n    }, o = document.createElement(\"div\");\n    o.className = R(\"bn-block\", e.class), o.setAttribute(\"data-node-type\", this.name);\n    for (const [i, s] of Object.entries(e))\n      i !== \"class\" && o.setAttribute(i, s);\n    return t.appendChild(o), {\n      dom: t,\n      contentDOM: o\n    };\n  },\n  addCommands() {\n    return {\n      // Creates a new text block at a given position.\n      BNCreateBlock: (n) => ({ state: t, dispatch: e }) => {\n        const o = t.schema.nodes.blockContainer.createAndFill();\n        return e && t.tr.insert(n, o), !0;\n      },\n      // Deletes a block at a given position.\n      BNDeleteBlock: (n) => ({ state: t, dispatch: e }) => {\n        const o = b(t.doc, n);\n        if (o === void 0)\n          return !1;\n        const { startPos: r, endPos: i } = o;\n        return e && t.tr.deleteRange(r, i), !0;\n      },\n      // Updates a block at a given position.\n      BNUpdateBlock: (n, t) => ({ state: e, dispatch: o }) => {\n        const r = b(e.doc, n);\n        if (r === void 0)\n          return !1;\n        const { startPos: i, endPos: s, node: a, contentNode: l } = r;\n        if (o) {\n          if (t.children !== void 0) {\n            const m = [];\n            for (const h of t.children)\n              m.push(\n                P(\n                  h,\n                  e.schema,\n                  this.options.editor.schema.styleSchema\n                )\n              );\n            a.childCount === 2 ? e.tr.replace(\n              i + l.nodeSize + 1,\n              s - 1,\n              new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(m), 0, 0)\n            ) : e.tr.insert(\n              i + l.nodeSize,\n              e.schema.nodes.blockGroup.create({}, m)\n            );\n          }\n          const c = l.type.name, p = t.type || c;\n          let u = \"keep\";\n          if (t.content)\n            if (typeof t.content == \"string\")\n              u = [e.schema.text(t.content)];\n            else if (Array.isArray(t.content))\n              u = st(\n                t.content,\n                e.schema,\n                this.options.editor.schema.styleSchema\n              );\n            else if (t.content.type === \"tableContent\")\n              u = Gt(\n                t.content,\n                e.schema,\n                this.options.editor.schema.styleSchema\n              );\n            else\n              throw new N(t.content.type);\n          else {\n            const m = e.schema.nodes[c].spec.content, h = e.schema.nodes[p].spec.content;\n            m === \"\" || h !== m && (u = []);\n          }\n          u === \"keep\" ? e.tr.setNodeMarkup(\n            i,\n            t.type === void 0 ? void 0 : e.schema.nodes[t.type],\n            {\n              ...l.attrs,\n              ...t.props\n            }\n          ) : e.tr.replaceWith(\n            i,\n            s,\n            e.schema.nodes[p].create(\n              {\n                ...l.attrs,\n                ...t.props\n              },\n              u\n            )\n          ).setSelection(\n            e.schema.nodes[p].spec.content === \"\" ? new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.NodeSelection(e.tr.doc.resolve(i)) : e.schema.nodes[p].spec.content === \"inline*\" ? new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.TextSelection(e.tr.doc.resolve(i)) : (\n              // Need to offset the position as we have to get through the\n              // `tableRow` and `tableCell` nodes to get to the\n              // `tableParagraph` node we want to set the selection in.\n              new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.TextSelection(e.tr.doc.resolve(i + 4))\n            )\n          ), e.tr.setNodeMarkup(i - 1, void 0, {\n            ...a.attrs,\n            ...t.props\n          });\n        }\n        return !0;\n      },\n      // Appends the text contents of a block to the nearest previous block, given a position between them. Children of\n      // the merged block are moved out of it first, rather than also being merged.\n      //\n      // In the example below, the position passed into the function is between Block1 and Block2.\n      //\n      // Block1\n      //    Block2\n      // Block3\n      //    Block4\n      //        Block5\n      //\n      // Becomes:\n      //\n      // Block1\n      //    Block2Block3\n      // Block4\n      //     Block5\n      BNMergeBlocks: (n) => ({ state: t, dispatch: e }) => {\n        const o = t.doc.resolve(n + 1).node().type.name === \"blockContainer\", r = t.doc.resolve(n - 1).node().type.name === \"blockContainer\";\n        if (!o || !r)\n          return !1;\n        const i = b(\n          t.doc,\n          n + 1\n        ), { node: s, contentNode: a, startPos: l, endPos: c, depth: p } = i;\n        if (s.childCount === 2) {\n          const h = t.doc.resolve(\n            l + a.nodeSize + 1\n          ), f = t.doc.resolve(c - 1), y = h.blockRange(f);\n          e && t.tr.lift(y, p - 1);\n        }\n        let u = n - 1, m = b(t.doc, u);\n        for (; m.numChildBlocks > 0; )\n          if (u--, m = b(t.doc, u), m === void 0)\n            return !1;\n        return e && (e(\n          t.tr.deleteRange(l, l + a.nodeSize).replace(\n            u - 1,\n            l,\n            new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(a.content, 0, 0)\n          ).scrollIntoView()\n        ), t.tr.setSelection(\n          new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.TextSelection(t.doc.resolve(u - 1))\n        )), !0;\n      },\n      // Splits a block at a given position. Content after the position is moved to a new block below, at the same\n      // nesting level.\n      BNSplitBlock: (n, t) => ({ state: e, dispatch: o }) => {\n        const r = b(e.doc, n);\n        if (r === void 0)\n          return !1;\n        const { contentNode: i, contentType: s, startPos: a, endPos: l, depth: c } = r, p = e.doc.cut(a + 1, n), u = e.doc.cut(n, l - 1), m = e.schema.nodes.blockContainer.createAndFill(), h = l + 1, f = h + 2;\n        return o && (e.tr.insert(h, m), e.tr.replace(\n          f,\n          f + 1,\n          u.content.size > 0 ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(\n            prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(u),\n            c + 2,\n            c + 2\n          ) : void 0\n        ), t && e.tr.setBlockType(\n          f,\n          f,\n          e.schema.node(s).type,\n          i.attrs\n        ), e.tr.setSelection(\n          new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.TextSelection(e.doc.resolve(f))\n        ), e.tr.replace(\n          a + 1,\n          l - 1,\n          p.content.size > 0 ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(\n            prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(p),\n            c + 2,\n            c + 2\n          ) : void 0\n        )), !0;\n      }\n    };\n  },\n  addProseMirrorPlugins() {\n    return [Fo(), zo()];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Backspace: () => this.editor.commands.first(({ commands: o }) => [\n        // Deletes the selection if it's not empty.\n        () => o.deleteSelection(),\n        // Undoes an input rule if one was triggered in the last editor state change.\n        () => o.undoInputRule(),\n        // Reverts block content type to a paragraph if the selection is at the start of the block.\n        () => o.command(({ state: r }) => {\n          const { contentType: i, startPos: s } = b(\n            r.doc,\n            r.selection.from\n          ), a = r.selection.from === s + 1, l = i.name === \"paragraph\";\n          return a && !l ? o.BNUpdateBlock(r.selection.from, {\n            type: \"paragraph\",\n            props: {}\n          }) : !1;\n        }),\n        // Removes a level of nesting if the block is indented if the selection is at the start of the block.\n        () => o.command(({ state: r }) => {\n          const { startPos: i } = b(\n            r.doc,\n            r.selection.from\n          );\n          return r.selection.from === i + 1 ? o.liftListItem(\"blockContainer\") : !1;\n        }),\n        // Merges block with the previous one if it isn't indented, isn't the first block in the doc, and the selection\n        // is at the start of the block.\n        () => o.command(({ state: r }) => {\n          const { depth: i, startPos: s } = b(\n            r.doc,\n            r.selection.from\n          ), a = r.selection.from === s + 1, l = r.selection.empty, c = s === 2, p = s - 1;\n          return !c && a && l && i === 2 ? o.BNMergeBlocks(p) : !1;\n        })\n      ]),\n      Delete: () => this.editor.commands.first(({ commands: o }) => [\n        // Deletes the selection if it's not empty.\n        () => o.deleteSelection(),\n        // Merges block with the next one (at the same nesting level or lower),\n        // if one exists, the block has no children, and the selection is at the\n        // end of the block.\n        () => o.command(({ state: r }) => {\n          const { node: i, depth: s, endPos: a } = b(\n            r.doc,\n            r.selection.from\n          ), l = a === r.doc.nodeSize - 4, c = r.selection.from === a - 1, p = r.selection.empty, u = i.childCount === 2;\n          if (!l && c && p && !u) {\n            let m = s, h = a + 2, f = r.doc.resolve(h).depth;\n            for (; f < m; )\n              m = f, h += 2, f = r.doc.resolve(h).depth;\n            return o.BNMergeBlocks(h - 1);\n          }\n          return !1;\n        })\n      ]),\n      Enter: () => this.editor.commands.first(({ commands: o }) => [\n        // Removes a level of nesting if the block is empty & indented, while the selection is also empty & at the start\n        // of the block.\n        () => o.command(({ state: r }) => {\n          const { node: i, depth: s } = b(\n            r.doc,\n            r.selection.from\n          ), a = r.selection.$anchor.parentOffset === 0, l = r.selection.anchor === r.selection.head, c = i.textContent.length === 0, p = s > 2;\n          return a && l && c && p ? o.liftListItem(\"blockContainer\") : !1;\n        }),\n        // Creates a new block and moves the selection to it if the current one is empty, while the selection is also\n        // empty & at the start of the block.\n        () => o.command(({ state: r, chain: i }) => {\n          const { node: s, endPos: a } = b(\n            r.doc,\n            r.selection.from\n          ), l = r.selection.$anchor.parentOffset === 0, c = r.selection.anchor === r.selection.head, p = s.textContent.length === 0;\n          if (l && c && p) {\n            const u = a + 1, m = u + 2;\n            return i().BNCreateBlock(u).setTextSelection(m).run(), !0;\n          }\n          return !1;\n        }),\n        // Splits the current block, moving content inside that's after the cursor to a new text block below. Also\n        // deletes the selection beforehand, if it's not empty.\n        () => o.command(({ state: r, chain: i }) => {\n          const { node: s } = b(\n            r.doc,\n            r.selection.from\n          ), a = r.selection.$anchor.parentOffset === 0;\n          return s.textContent.length === 0 ? !1 : (i().deleteSelection().BNSplitBlock(r.selection.from, a).run(), !0);\n        })\n      ]),\n      // Always returning true for tab key presses ensures they're not captured by the browser. Otherwise, they blur the\n      // editor since the browser will try to use tab for keyboard navigation.\n      Tab: () => (this.editor.commands.sinkListItem(\"blockContainer\"), !0),\n      \"Shift-Tab\": () => (this.editor.commands.liftListItem(\"blockContainer\"), !0)\n    };\n  }\n}), jo = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create({\n  name: \"blockGroup\",\n  group: \"blockGroup\",\n  content: \"blockContainer+\",\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (n) => typeof n == \"string\" ? !1 : n.getAttribute(\"data-node-type\") === \"blockGroup\" ? null : !1\n      }\n    ];\n  },\n  renderHTML({ HTMLAttributes: n }) {\n    var o;\n    const t = {\n      ...((o = this.options.domAttributes) == null ? void 0 : o.blockGroup) || {},\n      ...n\n    }, e = document.createElement(\"div\");\n    e.className = R(\n      \"bn-block-group\",\n      t.class\n    ), e.setAttribute(\"data-node-type\", \"blockGroup\");\n    for (const [r, i] of Object.entries(t))\n      r !== \"class\" && e.setAttribute(r, i);\n    return {\n      dom: e,\n      contentDOM: e\n    };\n  }\n}), Wo = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create({\n  name: \"doc\",\n  topNode: !0,\n  content: \"blockGroup\"\n}), qo = (n) => {\n  var e;\n  const t = [\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.extensions.ClipboardTextSerializer,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.extensions.Commands,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.extensions.Editable,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.extensions.FocusEvents,\n    _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.extensions.Tabindex,\n    // DevTools,\n    _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_12__.Gapcursor,\n    // DropCursor,\n    Do.configure({\n      // TODO: This shorthand is kind of ugly\n      ...n.placeholders !== void 0 ? { placeholders: n.placeholders } : {}\n    }),\n    Q.configure({\n      types: [\"blockContainer\"]\n    }),\n    _tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_13__.HardBreak,\n    // Comments,\n    // basics:\n    _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_16__.Text,\n    // marks:\n    _tiptap_extension_link__WEBPACK_IMPORTED_MODULE_15__.Link,\n    ...Object.values(n.styleSpecs).map((o) => o.implementation.mark),\n    _o,\n    Ho,\n    Oo,\n    // nodes\n    Wo,\n    Go.configure({\n      editor: n.editor,\n      domAttributes: n.domAttributes\n    }),\n    jo.configure({\n      domAttributes: n.domAttributes\n    }),\n    ...Object.values(n.inlineContentSpecs).filter((o) => o.config !== \"link\" && o.config !== \"text\").map((o) => o.implementation.node.configure({\n      editor: n.editor\n    })),\n    ...Object.values(n.blockSpecs).flatMap((o) => [\n      // dependent nodes (e.g.: tablecell / row)\n      ...(o.implementation.requiredExtensions || []).map(\n        (r) => r.configure({\n          editor: n.editor,\n          domAttributes: n.domAttributes\n        })\n      ),\n      // the actual node itself\n      o.implementation.node.configure({\n        editor: n.editor,\n        domAttributes: n.domAttributes\n      })\n    ]),\n    Lo(n.editor),\n    Ao(n.editor),\n    _tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_11__.Dropcursor.configure({ width: 5, color: \"#ddeeff\" }),\n    // This needs to be at the bottom of this list, because Key events (such as enter, when selecting a /command),\n    // should be handled before Enter handlers in other components like splitListItem\n    Uo\n  ];\n  if (n.collaboration) {\n    if (t.push(\n      _tiptap_extension_collaboration__WEBPACK_IMPORTED_MODULE_9__[\"default\"].configure({\n        fragment: n.collaboration.fragment\n      })\n    ), (e = n.collaboration.provider) != null && e.awareness) {\n      const o = (r) => {\n        const i = document.createElement(\"span\");\n        i.classList.add(\"collaboration-cursor__caret\"), i.setAttribute(\"style\", `border-color: ${r.color}`);\n        const s = document.createElement(\"span\");\n        s.classList.add(\"collaboration-cursor__label\"), s.setAttribute(\"style\", `background-color: ${r.color}`), s.insertBefore(document.createTextNode(r.name), null);\n        const a = document.createTextNode(\"⁠\"), l = document.createTextNode(\"⁠\");\n        return i.insertBefore(a, null), i.insertBefore(s, null), i.insertBefore(l, null), i;\n      };\n      t.push(\n        _tiptap_extension_collaboration_cursor__WEBPACK_IMPORTED_MODULE_10__[\"default\"].configure({\n          user: n.collaboration.user,\n          render: n.collaboration.renderCursor || o,\n          provider: n.collaboration.provider\n        })\n      );\n    }\n  } else\n    t.push(_tiptap_extension_history__WEBPACK_IMPORTED_MODULE_14__.History);\n  return t;\n};\nfunction Ko(n, t) {\n  const e = [];\n  return n.forEach((o, r, i) => {\n    i !== t && e.push(o);\n  }), prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(e);\n}\nfunction Jo(n, t) {\n  let e = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(n.content);\n  for (let o = 0; o < e.childCount; o++)\n    if (e.child(o).type.spec.group === \"blockContent\") {\n      const r = [e.child(o)];\n      if (o + 1 < e.childCount && e.child(o + 1).type.spec.group === \"blockGroup\") {\n        const s = e.child(o + 1).child(0).child(0);\n        (s.type.name === \"bulletListItem\" || s.type.name === \"numberedListItem\") && (r.push(e.child(o + 1)), e = Ko(e, o + 1));\n      }\n      const i = t.state.schema.nodes.blockContainer.create(\n        void 0,\n        r\n      );\n      e = e.replaceChild(o, i);\n    }\n  return new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(e, n.openStart, n.openEnd);\n}\nclass Tt {\n  constructor(t) {\n    d(this, \"blockSpecs\");\n    d(this, \"inlineContentSpecs\");\n    d(this, \"styleSpecs\");\n    d(this, \"blockSchema\");\n    d(this, \"inlineContentSchema\");\n    d(this, \"styleSchema\");\n    // Helper so that you can use typeof schema.BlockNoteEditor\n    d(this, \"BlockNoteEditor\", \"only for types\");\n    d(this, \"Block\", \"only for types\");\n    d(this, \"PartialBlock\", \"only for types\");\n    this.blockSpecs = (t == null ? void 0 : t.blockSpecs) || oe, this.inlineContentSpecs = (t == null ? void 0 : t.inlineContentSpecs) || ie, this.styleSpecs = (t == null ? void 0 : t.styleSpecs) || re, this.blockSchema = Zt(this.blockSpecs), this.inlineContentSchema = te(\n      this.inlineContentSpecs\n    ), this.styleSchema = ne(this.styleSpecs);\n  }\n  static create(t) {\n    return new Tt(t);\n  }\n}\nclass Xo extends _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Editor {\n  constructor(e, o) {\n    super({ ...e, content: void 0 });\n    d(this, \"_state\");\n    /**\n     * Mounts / unmounts the editor to a dom element\n     *\n     * @param element DOM element to mount to, ur null / undefined to destroy\n     */\n    d(this, \"mount\", (e) => {\n      e ? (this.options.element = e, this.createViewAlternative()) : this.destroy();\n    });\n    const r = this.schema;\n    let i;\n    const s = r.nodes.doc.createAndFill;\n    r.nodes.doc.createAndFill = (...l) => {\n      if (i)\n        return i;\n      const c = s.apply(r.nodes.doc, l), p = JSON.parse(JSON.stringify(c.toJSON()));\n      return p.content[0].content[0].attrs.id = \"initialBlockId\", i = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Node.fromJSON(r, p), i;\n    };\n    let a;\n    try {\n      const l = e == null ? void 0 : e.content.map(\n        (c) => P(c, this.schema, o).toJSON()\n      );\n      a = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.createDocument)(\n        {\n          type: \"doc\",\n          content: [\n            {\n              type: \"blockGroup\",\n              content: l\n            }\n          ]\n        },\n        this.schema,\n        this.options.parseOptions\n      );\n    } catch (l) {\n      throw console.error(\n        \"Error creating document from blocks passed as `initialContent`. Caused by exception: \",\n        l\n      ), new Error(\n        \"Error creating document from blocks passed as `initialContent`:\\n\" + +JSON.stringify(e.content)\n      );\n    }\n    this._state = prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.EditorState.create({\n      doc: a,\n      schema: this.schema\n      // selection: selection || undefined,\n    });\n  }\n  get state() {\n    return this.view && (this._state = this.view.state), this._state;\n  }\n  createView() {\n  }\n  /**\n   * Replace the default `createView` method with a custom one - which we call on mount\n   */\n  createViewAlternative() {\n    queueMicrotask(() => {\n      this.view = new prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.EditorView(this.options.element, {\n        ...this.options.editorProps,\n        // @ts-ignore\n        dispatchTransaction: this.dispatchTransaction.bind(this),\n        state: this.state\n      });\n      const e = this.state.reconfigure({\n        plugins: this.extensionManager.plugins\n      });\n      this.view.updateState(e), this.createNodeViews();\n    });\n  }\n}\nconst Yo = {\n  enableInputRules: !0,\n  enablePasteRules: !0,\n  enableCoreExtensions: !1\n};\nclass de {\n  constructor(t) {\n    d(this, \"_tiptapEditor\");\n    d(this, \"blockCache\", /* @__PURE__ */ new WeakMap());\n    d(this, \"schema\");\n    d(this, \"blockImplementations\");\n    d(this, \"inlineContentImplementations\");\n    d(this, \"styleImplementations\");\n    d(this, \"formattingToolbar\");\n    d(this, \"hyperlinkToolbar\");\n    d(this, \"sideMenu\");\n    d(this, \"suggestionMenus\");\n    d(this, \"imageToolbar\");\n    d(this, \"tableHandles\");\n    d(this, \"uploadFile\");\n    var l, c, p, u, m, h, f, y;\n    this.options = t;\n    const e = t;\n    if (e.onEditorContentChange)\n      throw new Error(\n        \"onEditorContentChange initialization option is deprecated, use <BlockNoteView onChange={...} />, the useEditorChange(...) hook, or editor.onChange(...)\"\n      );\n    if (e.onTextCursorPositionChange)\n      throw new Error(\n        \"onTextCursorPositionChange initialization option is deprecated, use <BlockNoteView onSelectionChange={...} />, the useEditorSelectionChange(...) hook, or editor.onSelectionChange(...)\"\n      );\n    if (e.onEditorReady)\n      throw new Error(\n        \"onEditorReady is deprecated. Editor is immediately ready for use after creation.\"\n      );\n    if (e.editable)\n      throw new Error(\n        \"editable initialization option is deprecated, use <BlockNoteView editable={true/false} />, or alternatively editor.isEditable = true/false\"\n      );\n    const o = {\n      defaultStyles: !0,\n      schema: t.schema || Tt.create(),\n      ...t\n    };\n    this.schema = o.schema, this.blockImplementations = o.schema.blockSpecs, this.inlineContentImplementations = o.schema.inlineContentSpecs, this.styleImplementations = o.schema.styleSpecs, this.formattingToolbar = new co(this), this.hyperlinkToolbar = new ho(this), this.sideMenu = new Co(this), this.suggestionMenus = new yo(this), L(\"image\", this) && (this.imageToolbar = new fo(this)), L(\"table\", this) && (this.tableHandles = new Io(this));\n    const r = qo({\n      editor: this,\n      placeholders: o.placeholders,\n      domAttributes: o.domAttributes || {},\n      blockSchema: this.schema.blockSchema,\n      blockSpecs: this.schema.blockSpecs,\n      styleSpecs: this.schema.styleSpecs,\n      inlineContentSpecs: this.schema.inlineContentSpecs,\n      collaboration: o.collaboration\n    }), i = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n      name: \"BlockNoteUIExtension\",\n      addProseMirrorPlugins: () => [\n        this.formattingToolbar.plugin,\n        this.hyperlinkToolbar.plugin,\n        this.sideMenu.plugin,\n        this.suggestionMenus.plugin,\n        ...this.imageToolbar ? [this.imageToolbar.plugin] : [],\n        ...this.tableHandles ? [this.tableHandles.plugin] : []\n      ]\n    });\n    r.push(i), this.uploadFile = o.uploadFile, o.collaboration && o.initialContent && console.warn(\n      \"When using Collaboration, initialContent might cause conflicts, because changes should come from the collaboration provider\"\n    );\n    const s = o.initialContent || (t.collaboration ? [\n      {\n        type: \"paragraph\",\n        id: \"initialBlockId\"\n      }\n    ] : [\n      {\n        type: \"paragraph\",\n        id: Q.options.generateID()\n      }\n    ]);\n    if (!Array.isArray(s) || s.length === 0)\n      throw new Error(\n        \"initialContent must be a non-empty array of blocks, received: \" + s\n      );\n    const a = {\n      ...Yo,\n      ...o._tiptapOptions,\n      content: s,\n      extensions: o.enableBlockNoteExtensions === !1 ? ((l = o._tiptapOptions) == null ? void 0 : l.extensions) || [] : [...((c = o._tiptapOptions) == null ? void 0 : c.extensions) || [], ...r],\n      editorProps: {\n        ...(p = o._tiptapOptions) == null ? void 0 : p.editorProps,\n        attributes: {\n          ...(m = (u = o._tiptapOptions) == null ? void 0 : u.editorProps) == null ? void 0 : m.attributes,\n          ...(h = o.domAttributes) == null ? void 0 : h.editor,\n          class: R(\n            \"bn-editor\",\n            o.defaultStyles ? \"bn-default-styles\" : \"\",\n            ((y = (f = o.domAttributes) == null ? void 0 : f.editor) == null ? void 0 : y.class) || \"\"\n          )\n        },\n        transformPasted: Jo\n      }\n    };\n    this._tiptapEditor = new Xo(\n      a,\n      this.schema.styleSchema\n    );\n  }\n  static create(t = {}) {\n    return new de(t);\n  }\n  /**\n   * Mount the editor to a parent DOM element. Call mount(undefined) to clean up\n   *\n   * @warning Not needed for React, use BlockNoteView to take care of this\n   */\n  mount(t) {\n    this._tiptapEditor.mount(t);\n  }\n  get prosemirrorView() {\n    return this._tiptapEditor.view;\n  }\n  get domElement() {\n    return this._tiptapEditor.view.dom;\n  }\n  isFocused() {\n    return this._tiptapEditor.view.hasFocus();\n  }\n  focus() {\n    this._tiptapEditor.view.focus();\n  }\n  /**\n   * @deprecated, use `editor.document` instead\n   */\n  get topLevelBlocks() {\n    return this.topLevelBlocks;\n  }\n  /**\n   * Gets a snapshot of all top-level (non-nested) blocks in the editor.\n   * @returns A snapshot of all top-level (non-nested) blocks in the editor.\n   */\n  get document() {\n    const t = [];\n    return this._tiptapEditor.state.doc.firstChild.descendants((e) => (t.push(\n      k(\n        e,\n        this.schema.blockSchema,\n        this.schema.inlineContentSchema,\n        this.schema.styleSchema,\n        this.blockCache\n      )\n    ), !1)), t;\n  }\n  /**\n   * Gets a snapshot of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block that should be retrieved.\n   * @returns The block that matches the identifier, or `undefined` if no matching block was found.\n   */\n  getBlock(t) {\n    const e = typeof t == \"string\" ? t : t.id;\n    let o;\n    return this._tiptapEditor.state.doc.firstChild.descendants((r) => typeof o < \"u\" ? !1 : r.type.name !== \"blockContainer\" || r.attrs.id !== e ? !0 : (o = k(\n      r,\n      this.schema.blockSchema,\n      this.schema.inlineContentSchema,\n      this.schema.styleSchema,\n      this.blockCache\n    ), !1)), o;\n  }\n  /**\n   * Traverses all blocks in the editor depth-first, and executes a callback for each.\n   * @param callback The callback to execute for each block. Returning `false` stops the traversal.\n   * @param reverse Whether the blocks should be traversed in reverse order.\n   */\n  forEachBlock(t, e = !1) {\n    const o = this.document.slice();\n    e && o.reverse();\n    function r(i) {\n      for (const s of i) {\n        if (!t(s))\n          return !1;\n        const a = e ? s.children.slice().reverse() : s.children;\n        if (!r(a))\n          return !1;\n      }\n      return !0;\n    }\n    r(o);\n  }\n  /**\n   * Executes a callback whenever the editor's contents change.\n   * @param callback The callback to execute.\n   */\n  onEditorContentChange(t) {\n    this._tiptapEditor.on(\"update\", t);\n  }\n  /**\n   * Executes a callback whenever the editor's selection changes.\n   * @param callback The callback to execute.\n   */\n  onEditorSelectionChange(t) {\n    this._tiptapEditor.on(\"selectionUpdate\", t);\n  }\n  /**\n   * Gets a snapshot of the current text cursor position.\n   * @returns A snapshot of the current text cursor position.\n   */\n  getTextCursorPosition() {\n    const { node: t, depth: e, startPos: o, endPos: r } = b(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    ), i = this._tiptapEditor.state.doc.resolve(r).index(e - 1), s = this._tiptapEditor.state.doc.resolve(r + 1).node().childCount;\n    let a;\n    i > 0 && (a = this._tiptapEditor.state.doc.resolve(o - 2).node());\n    let l;\n    return i < s - 1 && (l = this._tiptapEditor.state.doc.resolve(r + 2).node()), {\n      block: k(\n        t,\n        this.schema.blockSchema,\n        this.schema.inlineContentSchema,\n        this.schema.styleSchema,\n        this.blockCache\n      ),\n      prevBlock: a === void 0 ? void 0 : k(\n        a,\n        this.schema.blockSchema,\n        this.schema.inlineContentSchema,\n        this.schema.styleSchema,\n        this.blockCache\n      ),\n      nextBlock: l === void 0 ? void 0 : k(\n        l,\n        this.schema.blockSchema,\n        this.schema.inlineContentSchema,\n        this.schema.styleSchema,\n        this.blockCache\n      )\n    };\n  }\n  /**\n   * Sets the text cursor position to the start or end of an existing block. Throws an error if the target block could\n   * not be found.\n   * @param targetBlock The identifier of an existing block that the text cursor should be moved to.\n   * @param placement Whether the text cursor should be placed at the start or end of the block.\n   */\n  setTextCursorPosition(t, e = \"start\") {\n    const o = typeof t == \"string\" ? t : t.id, { posBeforeNode: r } = Et(o, this._tiptapEditor.state.doc), { startPos: i, contentNode: s } = b(\n      this._tiptapEditor.state.doc,\n      r + 2\n    ), a = this.schema.blockSchema[s.type.name].content;\n    if (a === \"none\") {\n      this._tiptapEditor.commands.setNodeSelection(i);\n      return;\n    }\n    if (a === \"inline\")\n      e === \"start\" ? this._tiptapEditor.commands.setTextSelection(i + 1) : this._tiptapEditor.commands.setTextSelection(\n        i + s.nodeSize - 1\n      );\n    else if (a === \"table\")\n      e === \"start\" ? this._tiptapEditor.commands.setTextSelection(i + 4) : this._tiptapEditor.commands.setTextSelection(\n        i + s.nodeSize - 4\n      );\n    else\n      throw new N(a);\n  }\n  /**\n   * Gets a snapshot of the current selection.\n   */\n  getSelection() {\n    if (this._tiptapEditor.state.selection.from === this._tiptapEditor.state.selection.to || \"node\" in this._tiptapEditor.state.selection)\n      return;\n    const t = [];\n    return this._tiptapEditor.state.doc.descendants((e, o) => e.type.spec.group !== \"blockContent\" || o + e.nodeSize < this._tiptapEditor.state.selection.from || o > this._tiptapEditor.state.selection.to ? !0 : (t.push(\n      k(\n        this._tiptapEditor.state.doc.resolve(o).node(),\n        this.schema.blockSchema,\n        this.schema.inlineContentSchema,\n        this.schema.styleSchema,\n        this.blockCache\n      )\n    ), !1)), { blocks: t };\n  }\n  /**\n   * Checks if the editor is currently editable, or if it's locked.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  get isEditable() {\n    return this._tiptapEditor.isEditable;\n  }\n  /**\n   * Makes the editor editable or locks it, depending on the argument passed.\n   * @param editable True to make the editor editable, or false to lock it.\n   */\n  set isEditable(t) {\n    this._tiptapEditor.setEditable(t);\n  }\n  /**\n   * Inserts new blocks into the editor. If a block's `id` is undefined, BlockNote generates one automatically. Throws an\n   * error if the reference block could not be found.\n   * @param blocksToInsert An array of partial blocks that should be inserted.\n   * @param referenceBlock An identifier for an existing block, at which the new blocks should be inserted.\n   * @param placement Whether the blocks should be inserted just before, just after, or nested inside the\n   * `referenceBlock`. Inserts the blocks at the start of the existing block's children if \"nested\" is used.\n   */\n  insertBlocks(t, e, o = \"before\") {\n    return qn(t, e, o, this);\n  }\n  /**\n   * Updates an existing block in the editor. Since updatedBlock is a PartialBlock object, some fields might not be\n   * defined. These undefined fields are kept as-is from the existing block. Throws an error if the block to update could\n   * not be found.\n   * @param blockToUpdate The block that should be updated.\n   * @param update A partial block which defines how the existing block should be changed.\n   */\n  updateBlock(t, e) {\n    return Kn(t, e, this);\n  }\n  /**\n   * Removes existing blocks from the editor. Throws an error if any of the blocks could not be found.\n   * @param blocksToRemove An array of identifiers for existing blocks that should be removed.\n   */\n  removeBlocks(t) {\n    return Jn(t, this);\n  }\n  /**\n   * Replaces existing blocks in the editor with new blocks. If the blocks that should be removed are not adjacent or\n   * are at different nesting levels, `blocksToInsert` will be inserted at the position of the first block in\n   * `blocksToRemove`. Throws an error if any of the blocks to remove could not be found.\n   * @param blocksToRemove An array of blocks that should be replaced.\n   * @param blocksToInsert An array of partial blocks to replace the old ones with.\n   */\n  replaceBlocks(t, e) {\n    return Xn(t, e, this);\n  }\n  /**\n   * Insert a piece of content at the current cursor position.\n   *\n   * @param content can be a string, or array of partial inline content elements\n   */\n  insertInlineContent(t) {\n    const e = st(\n      t,\n      this._tiptapEditor.schema,\n      this.schema.styleSchema\n    );\n    Yn(\n      {\n        from: this._tiptapEditor.state.selection.from,\n        to: this._tiptapEditor.state.selection.to\n      },\n      e,\n      this\n    );\n  }\n  /**\n   * Gets the active text styles at the text cursor position or at the end of the current selection if it's active.\n   */\n  getActiveStyles() {\n    const t = {}, e = this._tiptapEditor.state.selection.$to.marks();\n    for (const o of e) {\n      const r = this.schema.styleSchema[o.type.name];\n      if (!r) {\n        console.warn(\"mark not found in styleschema\", o.type.name);\n        continue;\n      }\n      r.propSchema === \"boolean\" ? t[r.type] = !0 : t[r.type] = o.attrs.stringValue;\n    }\n    return t;\n  }\n  /**\n   * Adds styles to the currently selected content.\n   * @param styles The styles to add.\n   */\n  addStyles(t) {\n    this._tiptapEditor.view.focus();\n    for (const [e, o] of Object.entries(t)) {\n      const r = this.schema.styleSchema[e];\n      if (!r)\n        throw new Error(`style ${e} not found in styleSchema`);\n      if (r.propSchema === \"boolean\")\n        this._tiptapEditor.commands.setMark(e);\n      else if (r.propSchema === \"string\")\n        this._tiptapEditor.commands.setMark(e, { stringValue: o });\n      else\n        throw new N(r.propSchema);\n    }\n  }\n  /**\n   * Removes styles from the currently selected content.\n   * @param styles The styles to remove.\n   */\n  removeStyles(t) {\n    this._tiptapEditor.view.focus();\n    for (const e of Object.keys(t))\n      this._tiptapEditor.commands.unsetMark(e);\n  }\n  /**\n   * Toggles styles on the currently selected content.\n   * @param styles The styles to toggle.\n   */\n  toggleStyles(t) {\n    this._tiptapEditor.view.focus();\n    for (const [e, o] of Object.entries(t)) {\n      const r = this.schema.styleSchema[e];\n      if (!r)\n        throw new Error(`style ${e} not found in styleSchema`);\n      if (r.propSchema === \"boolean\")\n        this._tiptapEditor.commands.toggleMark(e);\n      else if (r.propSchema === \"string\")\n        this._tiptapEditor.commands.toggleMark(e, { stringValue: o });\n      else\n        throw new N(r.propSchema);\n    }\n  }\n  /**\n   * Gets the currently selected text.\n   */\n  getSelectedText() {\n    return this._tiptapEditor.state.doc.textBetween(\n      this._tiptapEditor.state.selection.from,\n      this._tiptapEditor.state.selection.to\n    );\n  }\n  /**\n   * Gets the URL of the last link in the current selection, or `undefined` if there are no links in the selection.\n   */\n  getSelectedLinkUrl() {\n    return this._tiptapEditor.getAttributes(\"link\").href;\n  }\n  /**\n   * Creates a new link to replace the selected content.\n   * @param url The link URL.\n   * @param text The text to display the link with.\n   */\n  createLink(t, e) {\n    if (t === \"\")\n      return;\n    const { from: o, to: r } = this._tiptapEditor.state.selection;\n    e || (e = this._tiptapEditor.state.doc.textBetween(o, r));\n    const i = this._tiptapEditor.schema.mark(\"link\", { href: t });\n    this._tiptapEditor.view.dispatch(\n      this._tiptapEditor.view.state.tr.insertText(e, o, r).addMark(o, o + e.length, i)\n    );\n  }\n  /**\n   * Checks if the block containing the text cursor can be nested.\n   */\n  canNestBlock() {\n    const { startPos: t, depth: e } = b(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    );\n    return this._tiptapEditor.state.doc.resolve(t).index(e - 1) > 0;\n  }\n  /**\n   * Nests the block containing the text cursor into the block above it.\n   */\n  nestBlock() {\n    this._tiptapEditor.commands.sinkListItem(\"blockContainer\");\n  }\n  /**\n   * Checks if the block containing the text cursor is nested.\n   */\n  canUnnestBlock() {\n    const { depth: t } = b(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    );\n    return t > 2;\n  }\n  /**\n   * Lifts the block containing the text cursor out of its parent.\n   */\n  unnestBlock() {\n    this._tiptapEditor.commands.liftListItem(\"blockContainer\");\n  }\n  // TODO: Fix when implementing HTML/Markdown import & export\n  /**\n   * Serializes blocks into an HTML string. To better conform to HTML standards, children of blocks which aren't list\n   * items are un-nested in the output HTML.\n   * @param blocks An array of blocks that should be serialized into HTML.\n   * @returns The blocks, serialized as an HTML string.\n   */\n  async blocksToHTMLLossy(t = this.document) {\n    return at(\n      this._tiptapEditor.schema,\n      this\n    ).exportBlocks(t);\n  }\n  /**\n   * Parses blocks from an HTML string. Tries to create `Block` objects out of any HTML block-level elements, and\n   * `InlineNode` objects from any HTML inline elements, though not all element types are recognized. If BlockNote\n   * doesn't recognize an HTML element's tag, it will parse it as a paragraph or plain text.\n   * @param html The HTML string to parse blocks from.\n   * @returns The blocks parsed from the HTML string.\n   */\n  async tryParseHTMLToBlocks(t) {\n    return le(\n      t,\n      this.schema.blockSchema,\n      this.schema.inlineContentSchema,\n      this.schema.styleSchema,\n      this._tiptapEditor.schema\n    );\n  }\n  /**\n   * Serializes blocks into a Markdown string. The output is simplified as Markdown does not support all features of\n   * BlockNote - children of blocks which aren't list items are un-nested and certain styles are removed.\n   * @param blocks An array of blocks that should be serialized into Markdown.\n   * @returns The blocks, serialized as a Markdown string.\n   */\n  async blocksToMarkdownLossy(t = this.document) {\n    return Zn(t, this._tiptapEditor.schema, this);\n  }\n  /**\n   * Creates a list of blocks from a Markdown string. Tries to create `Block` and `InlineNode` objects based on\n   * Markdown syntax, though not all symbols are recognized. If BlockNote doesn't recognize a symbol, it will parse it\n   * as text.\n   * @param markdown The Markdown string to parse blocks from.\n   * @returns The blocks parsed from the Markdown string.\n   */\n  async tryParseMarkdownToBlocks(t) {\n    return so(\n      t,\n      this.schema.blockSchema,\n      this.schema.inlineContentSchema,\n      this.schema.styleSchema,\n      this._tiptapEditor.schema\n    );\n  }\n  /**\n   * Updates the user info for the current user that's shown to other collaborators.\n   */\n  updateCollaborationUserInfo(t) {\n    if (!this.options.collaboration)\n      throw new Error(\n        \"Cannot update collaboration user info when collaboration is disabled.\"\n      );\n    this._tiptapEditor.commands.updateUser(t);\n  }\n  /**\n   * A callback function that runs whenever the editor's contents change.\n   *\n   * @param callback The callback to execute.\n   * @returns A function to remove the callback.\n   */\n  onChange(t) {\n    const e = () => {\n      t(this);\n    };\n    return this._tiptapEditor.on(\"update\", e), () => {\n      this._tiptapEditor.off(\"update\", e);\n    };\n  }\n  /**\n   * A callback function that runs whenever the text cursor position or selection changes.\n   *\n   * @param callback The callback to execute.\n   * @returns A function to remove the callback.\n   */\n  onSelectionChange(t) {\n    const e = () => {\n      t(this);\n    };\n    return this._tiptapEditor.on(\"selectionUpdate\", e), () => {\n      this._tiptapEditor.off(\"selectionUpdate\", e);\n    };\n  }\n}\nfunction Qo(n) {\n  let t = n.getTextCursorPosition().block, e = n.schema.blockSchema[t.type].content;\n  for (; e === \"none\"; )\n    t = n.getTextCursorPosition().nextBlock, e = n.schema.blockSchema[t.type].content, n.setTextCursorPosition(t, \"end\");\n}\nfunction A(n, t) {\n  const e = n.getTextCursorPosition().block;\n  if (e.content === void 0)\n    throw new Error(\"Slash Menu open in a block that doesn't contain content.\");\n  Array.isArray(e.content) && (e.content.length === 1 && Y(e.content[0]) && e.content[0].type === \"text\" && e.content[0].text === \"/\" || e.content.length === 0) ? n.updateBlock(e, t) : (n.insertBlocks([t], e, \"after\"), n.setTextCursorPosition(\n    n.getTextCursorPosition().nextBlock,\n    \"end\"\n  ));\n  const o = n.getTextCursorPosition().block;\n  return Qo(n), o;\n}\nfunction Fr(n) {\n  const t = [];\n  return L(\"heading\", n) && t.push(\n    {\n      title: \"Heading 1\",\n      onItemClick: () => {\n        A(n, {\n          type: \"heading\",\n          props: { level: 1 }\n        });\n      },\n      subtext: \"Used for a top-level heading\",\n      badge: V(\"Mod-Alt-1\"),\n      aliases: [\"h\", \"heading1\", \"h1\"],\n      group: \"Headings\"\n    },\n    {\n      title: \"Heading 2\",\n      onItemClick: () => {\n        A(n, {\n          type: \"heading\",\n          props: { level: 2 }\n        });\n      },\n      subtext: \"Used for key sections\",\n      badge: V(\"Mod-Alt-2\"),\n      aliases: [\"h2\", \"heading2\", \"subheading\"],\n      group: \"Headings\"\n    },\n    {\n      title: \"Heading 3\",\n      onItemClick: () => {\n        A(n, {\n          type: \"heading\",\n          props: { level: 3 }\n        });\n      },\n      subtext: \"Used for subsections and group headings\",\n      badge: V(\"Mod-Alt-3\"),\n      aliases: [\"h3\", \"heading3\", \"subheading\"],\n      group: \"Headings\"\n    }\n  ), L(\"numberedListItem\", n) && t.push({\n    title: \"Numbered List\",\n    onItemClick: () => {\n      A(n, {\n        type: \"numberedListItem\"\n      });\n    },\n    subtext: \"Used to display a numbered list\",\n    badge: V(\"Mod-Shift-7\"),\n    aliases: [\"ol\", \"li\", \"list\", \"numberedlist\", \"numbered list\"],\n    group: \"Basic blocks\"\n  }), L(\"bulletListItem\", n) && t.push({\n    title: \"Bullet List\",\n    onItemClick: () => {\n      A(n, {\n        type: \"bulletListItem\"\n      });\n    },\n    subtext: \"Used to display an unordered list\",\n    badge: V(\"Mod-Shift-8\"),\n    aliases: [\"ul\", \"li\", \"list\", \"bulletlist\", \"bullet list\"],\n    group: \"Basic blocks\"\n  }), L(\"paragraph\", n) && t.push({\n    title: \"Paragraph\",\n    onItemClick: () => {\n      A(n, {\n        type: \"paragraph\"\n      });\n    },\n    subtext: \"Used for the body of your document\",\n    badge: V(\"Mod-Alt-0\"),\n    aliases: [\"p\", \"paragraph\"],\n    group: \"Basic blocks\"\n  }), L(\"table\", n) && t.push({\n    title: \"Table\",\n    onItemClick: () => {\n      A(n, {\n        type: \"table\",\n        content: {\n          type: \"tableContent\",\n          rows: [\n            {\n              cells: [\"\", \"\", \"\"]\n            },\n            {\n              cells: [\"\", \"\", \"\"]\n            }\n          ]\n        }\n      });\n    },\n    subtext: \"Used for for tables\",\n    aliases: [\"table\"],\n    group: \"Advanced\",\n    badge: void 0\n  }), L(\"image\", n) && t.push({\n    title: \"Image\",\n    onItemClick: () => {\n      const e = A(n, {\n        type: \"image\"\n      });\n      n.prosemirrorView.dispatch(\n        n._tiptapEditor.state.tr.setMeta(n.imageToolbar.plugin, {\n          block: e\n        })\n      );\n    },\n    subtext: \"Insert an image\",\n    aliases: [\n      \"image\",\n      \"imageUpload\",\n      \"upload\",\n      \"img\",\n      \"picture\",\n      \"media\",\n      \"url\",\n      \"drive\",\n      \"dropbox\"\n    ],\n    group: \"Media\"\n  }), t;\n}\nfunction $r(n, t) {\n  return n.filter(\n    ({ title: e, aliases: o }) => e.toLowerCase().startsWith(t.toLowerCase()) || o && o.filter(\n      (r) => r.toLowerCase().startsWith(t.toLowerCase())\n    ).length !== 0\n  );\n}\nfunction ht(n = \"\") {\n  return typeof n == \"string\" ? [\n    {\n      type: \"text\",\n      text: n,\n      styles: {}\n    }\n  ] : n;\n}\nfunction pe(n) {\n  return typeof n == \"string\" ? ht(n) : Array.isArray(n) ? n.flatMap((t) => typeof t == \"string\" ? ht(t) : $t(t) ? {\n    ...t,\n    content: ht(t.content)\n  } : Y(t) ? t : {\n    props: {},\n    ...t,\n    content: pe(t.content)\n  }) : n;\n}\nfunction Gr(n, t) {\n  return t.map(\n    (e) => ue(n, e)\n  );\n}\nfunction ue(n, t) {\n  const e = {\n    id: \"\",\n    type: t.type,\n    props: {},\n    content: n[t.type].content === \"inline\" ? [] : void 0,\n    children: [],\n    ...t\n  };\n  return Object.entries(n[t.type].propSchema).forEach(\n    ([o, r]) => {\n      e.props[o] === void 0 && (e.props[o] = r.default);\n    }\n  ), {\n    ...e,\n    content: pe(e.content),\n    children: e.children.map((o) => ue(n, o))\n  };\n}\nfunction Zo(n) {\n  n.id || (n.id = Q.options.generateID()), n.children && tr(n.children);\n}\nfunction tr(n) {\n  for (const t of n)\n    Zo(t);\n}\n\n//# sourceMappingURL=blocknote.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@blocknote/core/dist/blocknote.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@blocknote/react/dist/blocknote-react.js":
/*!***************************************************************!*\
  !*** ./node_modules/@blocknote/react/dist/blocknote-react.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddBlockButton: () => (/* binding */ uo),\n/* harmony export */   BasicTextStyleButton: () => (/* binding */ ke),\n/* harmony export */   BlockColorsItem: () => (/* binding */ fo),\n/* harmony export */   BlockContentWrapper: () => (/* binding */ Fe),\n/* harmony export */   BlockNoteContext: () => (/* binding */ Kt),\n/* harmony export */   BlockNoteDefaultUI: () => (/* binding */ Fo),\n/* harmony export */   BlockNoteView: () => (/* binding */ oa),\n/* harmony export */   BlockTypeDropdown: () => (/* binding */ no),\n/* harmony export */   ColorStyleButton: () => (/* binding */ Zr),\n/* harmony export */   CreateLinkButton: () => (/* binding */ Ur),\n/* harmony export */   DragHandleButton: () => (/* binding */ mo),\n/* harmony export */   DragHandleMenu: () => (/* binding */ ho),\n/* harmony export */   DragHandleMenuItem: () => (/* binding */ fn),\n/* harmony export */   EditHyperlinkMenu: () => (/* binding */ ln),\n/* harmony export */   FormattingToolbar: () => (/* binding */ oo),\n/* harmony export */   FormattingToolbarController: () => (/* binding */ ao),\n/* harmony export */   HyperlinkToolbar: () => (/* binding */ io),\n/* harmony export */   HyperlinkToolbarController: () => (/* binding */ lo),\n/* harmony export */   ImageCaptionButton: () => (/* binding */ $r),\n/* harmony export */   ImageToolbar: () => (/* binding */ cn),\n/* harmony export */   ImageToolbarController: () => (/* binding */ so),\n/* harmony export */   NestBlockButton: () => (/* binding */ Wr),\n/* harmony export */   RemoveBlockItem: () => (/* binding */ go),\n/* harmony export */   ReplaceImageButton: () => (/* binding */ Yr),\n/* harmony export */   SideMenu: () => (/* binding */ bo),\n/* harmony export */   SideMenuButton: () => (/* binding */ un),\n/* harmony export */   SideMenuController: () => (/* binding */ xo),\n/* harmony export */   SuggestionMenu: () => (/* binding */ wo),\n/* harmony export */   SuggestionMenuController: () => (/* binding */ To),\n/* harmony export */   SuggestionMenuItem: () => (/* binding */ jo),\n/* harmony export */   SuggestionMenuWrapper: () => (/* binding */ Co),\n/* harmony export */   TableHandle: () => (/* binding */ Po),\n/* harmony export */   TableHandlesController: () => (/* binding */ Ao),\n/* harmony export */   TextAlignButton: () => (/* binding */ Ae),\n/* harmony export */   ToolbarButton: () => (/* binding */ P),\n/* harmony export */   ToolbarDropdown: () => (/* binding */ eo),\n/* harmony export */   UnnestBlockButton: () => (/* binding */ qr),\n/* harmony export */   applyBlockNoteCSSVariablesFromTheme: () => (/* binding */ Vt),\n/* harmony export */   blockTypeDropdownItems: () => (/* binding */ to),\n/* harmony export */   createReactBlockSpec: () => (/* binding */ ca),\n/* harmony export */   createReactInlineContentSpec: () => (/* binding */ ua),\n/* harmony export */   createReactStyleSpec: () => (/* binding */ da),\n/* harmony export */   darkDefaultTheme: () => (/* binding */ aa),\n/* harmony export */   defaultColorScheme: () => (/* binding */ y),\n/* harmony export */   getDefaultReactSlashMenuItems: () => (/* binding */ gn),\n/* harmony export */   getFormattingToolbarItems: () => (/* binding */ ro),\n/* harmony export */   lightDefaultTheme: () => (/* binding */ Lt),\n/* harmony export */   reactWrapInInlineContentStructure: () => (/* binding */ Go),\n/* harmony export */   removeBlockNoteCSSVariables: () => (/* binding */ Zo),\n/* harmony export */   useActiveStyles: () => (/* binding */ ia),\n/* harmony export */   useBlockNote: () => (/* binding */ la),\n/* harmony export */   useBlockNoteContext: () => (/* binding */ ee),\n/* harmony export */   useBlockNoteEditor: () => (/* binding */ V),\n/* harmony export */   useCloseSuggestionMenuNoItems: () => (/* binding */ po),\n/* harmony export */   useCreateBlockNote: () => (/* binding */ Yo),\n/* harmony export */   useEditorChange: () => (/* binding */ Je),\n/* harmony export */   useEditorContentOrSelectionChange: () => (/* binding */ U),\n/* harmony export */   useEditorForceUpdate: () => (/* binding */ sa),\n/* harmony export */   useEditorSelectionChange: () => (/* binding */ Qe),\n/* harmony export */   useLoadSuggestionMenuItems: () => (/* binding */ ko),\n/* harmony export */   useSelectedBlocks: () => (/* binding */ K),\n/* harmony export */   useSuggestionMenuKeyboardNavigation: () => (/* binding */ yo),\n/* harmony export */   useTableHandlesPositioning: () => (/* binding */ Mo)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _blocknote_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @blocknote/core */ \"(ssr)/./node_modules/@blocknote/core/dist/blocknote.js\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/core/dist/floating-ui.core.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Group/Group.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Stack/Stack.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Text/Text.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Tooltip/Tooltip.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Button/Button.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/ActionIcon/ActionIcon.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/core/Box/Box.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Menu/Menu.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/TextInput/TextInput.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/FileInput/FileInput.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Popover/Popover.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Tabs/Tabs.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/LoadingOverlay/LoadingOverlay.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Badge/Badge.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Loader/Loader.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/core/MantineProvider/MantineProvider.mjs\");\n/* harmony import */ var use_prefers_color_scheme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! use-prefers-color-scheme */ \"(ssr)/./node_modules/use-prefers-color-scheme/dist/index.esm.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _tiptap_react__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @tiptap/react */ \"(ssr)/./node_modules/@tiptap/react/dist/index.js\");\n/* harmony import */ var _tiptap_react__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @tiptap/react */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\n\n\n\n\n\n\nconst Kt = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction ee(e) {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Kt);\n}\nvar ze = { exports: {} }, ae = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar jt;\nfunction vr() {\n  if (jt)\n    return ae;\n  jt = 1;\n  var e = react__WEBPACK_IMPORTED_MODULE_0__, t = Symbol.for(\"react.element\"), n = Symbol.for(\"react.fragment\"), r = Object.prototype.hasOwnProperty, i = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, l = { key: !0, ref: !0, __self: !0, __source: !0 };\n  function c(s, d, f) {\n    var h, b = {}, T = null, C = null;\n    f !== void 0 && (T = \"\" + f), d.key !== void 0 && (T = \"\" + d.key), d.ref !== void 0 && (C = d.ref);\n    for (h in d)\n      r.call(d, h) && !l.hasOwnProperty(h) && (b[h] = d[h]);\n    if (s && s.defaultProps)\n      for (h in d = s.defaultProps, d)\n        b[h] === void 0 && (b[h] = d[h]);\n    return { $$typeof: t, type: s, key: T, ref: C, props: b, _owner: i.current };\n  }\n  return ae.Fragment = n, ae.jsx = c, ae.jsxs = c, ae;\n}\nvar ie = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar wt;\nfunction pr() {\n  return wt || (wt = 1,  true && function() {\n    var e = react__WEBPACK_IMPORTED_MODULE_0__, t = Symbol.for(\"react.element\"), n = Symbol.for(\"react.portal\"), r = Symbol.for(\"react.fragment\"), i = Symbol.for(\"react.strict_mode\"), l = Symbol.for(\"react.profiler\"), c = Symbol.for(\"react.provider\"), s = Symbol.for(\"react.context\"), d = Symbol.for(\"react.forward_ref\"), f = Symbol.for(\"react.suspense\"), h = Symbol.for(\"react.suspense_list\"), b = Symbol.for(\"react.memo\"), T = Symbol.for(\"react.lazy\"), C = Symbol.for(\"react.offscreen\"), D = Symbol.iterator, ne = \"@@iterator\";\n    function F(a) {\n      if (a === null || typeof a != \"object\")\n        return null;\n      var u = D && a[D] || a[ne];\n      return typeof u == \"function\" ? u : null;\n    }\n    var O = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function M(a) {\n      {\n        for (var u = arguments.length, g = new Array(u > 1 ? u - 1 : 0), m = 1; m < u; m++)\n          g[m - 1] = arguments[m];\n        He(\"error\", a, g);\n      }\n    }\n    function He(a, u, g) {\n      {\n        var m = O.ReactDebugCurrentFrame, k = m.getStackAddendum();\n        k !== \"\" && (u += \"%s\", g = g.concat([k]));\n        var j = g.map(function(v) {\n          return String(v);\n        });\n        j.unshift(\"Warning: \" + u), Function.prototype.apply.call(console[a], console, j);\n      }\n    }\n    var $ = !1, he = !1, Ee = !1, Me = !1, Re = !1, W;\n    W = Symbol.for(\"react.module.reference\");\n    function mn(a) {\n      return !!(typeof a == \"string\" || typeof a == \"function\" || a === r || a === l || Re || a === i || a === f || a === h || Me || a === C || $ || he || Ee || typeof a == \"object\" && a !== null && (a.$$typeof === T || a.$$typeof === b || a.$$typeof === c || a.$$typeof === s || a.$$typeof === d || // This needs to include all possible module reference object\n      // types supported by any Flight configuration anywhere since\n      // we don't know which Flight build this will end up being used\n      // with.\n      a.$$typeof === W || a.getModuleId !== void 0));\n    }\n    function bn(a, u, g) {\n      var m = a.displayName;\n      if (m)\n        return m;\n      var k = u.displayName || u.name || \"\";\n      return k !== \"\" ? g + \"(\" + k + \")\" : g;\n    }\n    function et(a) {\n      return a.displayName || \"Context\";\n    }\n    function N(a) {\n      if (a == null)\n        return null;\n      if (typeof a.tag == \"number\" && M(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof a == \"function\")\n        return a.displayName || a.name || null;\n      if (typeof a == \"string\")\n        return a;\n      switch (a) {\n        case r:\n          return \"Fragment\";\n        case n:\n          return \"Portal\";\n        case l:\n          return \"Profiler\";\n        case i:\n          return \"StrictMode\";\n        case f:\n          return \"Suspense\";\n        case h:\n          return \"SuspenseList\";\n      }\n      if (typeof a == \"object\")\n        switch (a.$$typeof) {\n          case s:\n            var u = a;\n            return et(u) + \".Consumer\";\n          case c:\n            var g = a;\n            return et(g._context) + \".Provider\";\n          case d:\n            return bn(a, a.render, \"ForwardRef\");\n          case b:\n            var m = a.displayName || null;\n            return m !== null ? m : N(a.type) || \"Memo\";\n          case T: {\n            var k = a, j = k._payload, v = k._init;\n            try {\n              return N(v(j));\n            } catch {\n              return null;\n            }\n          }\n        }\n      return null;\n    }\n    var q = Object.assign, re = 0, tt, nt, rt, ot, at, it, lt;\n    function st() {\n    }\n    st.__reactDisabledLog = !0;\n    function xn() {\n      {\n        if (re === 0) {\n          tt = console.log, nt = console.info, rt = console.warn, ot = console.error, at = console.group, it = console.groupCollapsed, lt = console.groupEnd;\n          var a = {\n            configurable: !0,\n            enumerable: !0,\n            value: st,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            info: a,\n            log: a,\n            warn: a,\n            error: a,\n            group: a,\n            groupCollapsed: a,\n            groupEnd: a\n          });\n        }\n        re++;\n      }\n    }\n    function vn() {\n      {\n        if (re--, re === 0) {\n          var a = {\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            log: q({}, a, {\n              value: tt\n            }),\n            info: q({}, a, {\n              value: nt\n            }),\n            warn: q({}, a, {\n              value: rt\n            }),\n            error: q({}, a, {\n              value: ot\n            }),\n            group: q({}, a, {\n              value: at\n            }),\n            groupCollapsed: q({}, a, {\n              value: it\n            }),\n            groupEnd: q({}, a, {\n              value: lt\n            })\n          });\n        }\n        re < 0 && M(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n      }\n    }\n    var Ve = O.ReactCurrentDispatcher, Be;\n    function me(a, u, g) {\n      {\n        if (Be === void 0)\n          try {\n            throw Error();\n          } catch (k) {\n            var m = k.stack.trim().match(/\\n( *(at )?)/);\n            Be = m && m[1] || \"\";\n          }\n        return `\n` + Be + a;\n      }\n    }\n    var Le = !1, be;\n    {\n      var pn = typeof WeakMap == \"function\" ? WeakMap : Map;\n      be = new pn();\n    }\n    function ct(a, u) {\n      if (!a || Le)\n        return \"\";\n      {\n        var g = be.get(a);\n        if (g !== void 0)\n          return g;\n      }\n      var m;\n      Le = !0;\n      var k = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var j;\n      j = Ve.current, Ve.current = null, xn();\n      try {\n        if (u) {\n          var v = function() {\n            throw Error();\n          };\n          if (Object.defineProperty(v.prototype, \"props\", {\n            set: function() {\n              throw Error();\n            }\n          }), typeof Reflect == \"object\" && Reflect.construct) {\n            try {\n              Reflect.construct(v, []);\n            } catch (Z) {\n              m = Z;\n            }\n            Reflect.construct(a, [], v);\n          } else {\n            try {\n              v.call();\n            } catch (Z) {\n              m = Z;\n            }\n            a.call(v.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (Z) {\n            m = Z;\n          }\n          a();\n        }\n      } catch (Z) {\n        if (Z && m && typeof Z.stack == \"string\") {\n          for (var x = Z.stack.split(`\n`), _ = m.stack.split(`\n`), E = x.length - 1, R = _.length - 1; E >= 1 && R >= 0 && x[E] !== _[R]; )\n            R--;\n          for (; E >= 1 && R >= 0; E--, R--)\n            if (x[E] !== _[R]) {\n              if (E !== 1 || R !== 1)\n                do\n                  if (E--, R--, R < 0 || x[E] !== _[R]) {\n                    var I = `\n` + x[E].replace(\" at new \", \" at \");\n                    return a.displayName && I.includes(\"<anonymous>\") && (I = I.replace(\"<anonymous>\", a.displayName)), typeof a == \"function\" && be.set(a, I), I;\n                  }\n                while (E >= 1 && R >= 0);\n              break;\n            }\n        }\n      } finally {\n        Le = !1, Ve.current = j, vn(), Error.prepareStackTrace = k;\n      }\n      var J = a ? a.displayName || a.name : \"\", Ct = J ? me(J) : \"\";\n      return typeof a == \"function\" && be.set(a, Ct), Ct;\n    }\n    function kn(a, u, g) {\n      return ct(a, !1);\n    }\n    function yn(a) {\n      var u = a.prototype;\n      return !!(u && u.isReactComponent);\n    }\n    function xe(a, u, g) {\n      if (a == null)\n        return \"\";\n      if (typeof a == \"function\")\n        return ct(a, yn(a));\n      if (typeof a == \"string\")\n        return me(a);\n      switch (a) {\n        case f:\n          return me(\"Suspense\");\n        case h:\n          return me(\"SuspenseList\");\n      }\n      if (typeof a == \"object\")\n        switch (a.$$typeof) {\n          case d:\n            return kn(a.render);\n          case b:\n            return xe(a.type, u, g);\n          case T: {\n            var m = a, k = m._payload, j = m._init;\n            try {\n              return xe(j(k), u, g);\n            } catch {\n            }\n          }\n        }\n      return \"\";\n    }\n    var ve = Object.prototype.hasOwnProperty, ut = {}, dt = O.ReactDebugCurrentFrame;\n    function pe(a) {\n      if (a) {\n        var u = a._owner, g = xe(a.type, a._source, u ? u.type : null);\n        dt.setExtraStackFrame(g);\n      } else\n        dt.setExtraStackFrame(null);\n    }\n    function Cn(a, u, g, m, k) {\n      {\n        var j = Function.call.bind(ve);\n        for (var v in a)\n          if (j(a, v)) {\n            var x = void 0;\n            try {\n              if (typeof a[v] != \"function\") {\n                var _ = Error((m || \"React class\") + \": \" + g + \" type `\" + v + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof a[v] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                throw _.name = \"Invariant Violation\", _;\n              }\n              x = a[v](u, v, m, g, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n            } catch (E) {\n              x = E;\n            }\n            x && !(x instanceof Error) && (pe(k), M(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", m || \"React class\", g, v, typeof x), pe(null)), x instanceof Error && !(x.message in ut) && (ut[x.message] = !0, pe(k), M(\"Failed %s type: %s\", g, x.message), pe(null));\n          }\n      }\n    }\n    var Sn = Array.isArray;\n    function De(a) {\n      return Sn(a);\n    }\n    function jn(a) {\n      {\n        var u = typeof Symbol == \"function\" && Symbol.toStringTag, g = u && a[Symbol.toStringTag] || a.constructor.name || \"Object\";\n        return g;\n      }\n    }\n    function wn(a) {\n      try {\n        return ft(a), !1;\n      } catch {\n        return !0;\n      }\n    }\n    function ft(a) {\n      return \"\" + a;\n    }\n    function gt(a) {\n      if (wn(a))\n        return M(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", jn(a)), ft(a);\n    }\n    var oe = O.ReactCurrentOwner, Tn = {\n      key: !0,\n      ref: !0,\n      __self: !0,\n      __source: !0\n    }, ht, mt, _e;\n    _e = {};\n    function Hn(a) {\n      if (ve.call(a, \"ref\")) {\n        var u = Object.getOwnPropertyDescriptor(a, \"ref\").get;\n        if (u && u.isReactWarning)\n          return !1;\n      }\n      return a.ref !== void 0;\n    }\n    function En(a) {\n      if (ve.call(a, \"key\")) {\n        var u = Object.getOwnPropertyDescriptor(a, \"key\").get;\n        if (u && u.isReactWarning)\n          return !1;\n      }\n      return a.key !== void 0;\n    }\n    function Mn(a, u) {\n      if (typeof a.ref == \"string\" && oe.current && u && oe.current.stateNode !== u) {\n        var g = N(oe.current.type);\n        _e[g] || (M('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', N(oe.current.type), a.ref), _e[g] = !0);\n      }\n    }\n    function Rn(a, u) {\n      {\n        var g = function() {\n          ht || (ht = !0, M(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", u));\n        };\n        g.isReactWarning = !0, Object.defineProperty(a, \"key\", {\n          get: g,\n          configurable: !0\n        });\n      }\n    }\n    function Vn(a, u) {\n      {\n        var g = function() {\n          mt || (mt = !0, M(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", u));\n        };\n        g.isReactWarning = !0, Object.defineProperty(a, \"ref\", {\n          get: g,\n          configurable: !0\n        });\n      }\n    }\n    var Bn = function(a, u, g, m, k, j, v) {\n      var x = {\n        // This tag allows us to uniquely identify this as a React Element\n        $$typeof: t,\n        // Built-in properties that belong on the element\n        type: a,\n        key: u,\n        ref: g,\n        props: v,\n        // Record the component responsible for creating this element.\n        _owner: j\n      };\n      return x._store = {}, Object.defineProperty(x._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: !1\n      }), Object.defineProperty(x, \"_self\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: m\n      }), Object.defineProperty(x, \"_source\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: k\n      }), Object.freeze && (Object.freeze(x.props), Object.freeze(x)), x;\n    };\n    function Ln(a, u, g, m, k) {\n      {\n        var j, v = {}, x = null, _ = null;\n        g !== void 0 && (gt(g), x = \"\" + g), En(u) && (gt(u.key), x = \"\" + u.key), Hn(u) && (_ = u.ref, Mn(u, k));\n        for (j in u)\n          ve.call(u, j) && !Tn.hasOwnProperty(j) && (v[j] = u[j]);\n        if (a && a.defaultProps) {\n          var E = a.defaultProps;\n          for (j in E)\n            v[j] === void 0 && (v[j] = E[j]);\n        }\n        if (x || _) {\n          var R = typeof a == \"function\" ? a.displayName || a.name || \"Unknown\" : a;\n          x && Rn(v, R), _ && Vn(v, R);\n        }\n        return Bn(a, x, _, k, m, oe.current, v);\n      }\n    }\n    var Ie = O.ReactCurrentOwner, bt = O.ReactDebugCurrentFrame;\n    function G(a) {\n      if (a) {\n        var u = a._owner, g = xe(a.type, a._source, u ? u.type : null);\n        bt.setExtraStackFrame(g);\n      } else\n        bt.setExtraStackFrame(null);\n    }\n    var Oe;\n    Oe = !1;\n    function Pe(a) {\n      return typeof a == \"object\" && a !== null && a.$$typeof === t;\n    }\n    function xt() {\n      {\n        if (Ie.current) {\n          var a = N(Ie.current.type);\n          if (a)\n            return `\n\nCheck the render method of \\`` + a + \"`.\";\n        }\n        return \"\";\n      }\n    }\n    function Dn(a) {\n      {\n        if (a !== void 0) {\n          var u = a.fileName.replace(/^.*[\\\\\\/]/, \"\"), g = a.lineNumber;\n          return `\n\nCheck your code at ` + u + \":\" + g + \".\";\n        }\n        return \"\";\n      }\n    }\n    var vt = {};\n    function _n(a) {\n      {\n        var u = xt();\n        if (!u) {\n          var g = typeof a == \"string\" ? a : a.displayName || a.name;\n          g && (u = `\n\nCheck the top-level render call using <` + g + \">.\");\n        }\n        return u;\n      }\n    }\n    function pt(a, u) {\n      {\n        if (!a._store || a._store.validated || a.key != null)\n          return;\n        a._store.validated = !0;\n        var g = _n(u);\n        if (vt[g])\n          return;\n        vt[g] = !0;\n        var m = \"\";\n        a && a._owner && a._owner !== Ie.current && (m = \" It was passed a child from \" + N(a._owner.type) + \".\"), G(a), M('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', g, m), G(null);\n      }\n    }\n    function kt(a, u) {\n      {\n        if (typeof a != \"object\")\n          return;\n        if (De(a))\n          for (var g = 0; g < a.length; g++) {\n            var m = a[g];\n            Pe(m) && pt(m, u);\n          }\n        else if (Pe(a))\n          a._store && (a._store.validated = !0);\n        else if (a) {\n          var k = F(a);\n          if (typeof k == \"function\" && k !== a.entries)\n            for (var j = k.call(a), v; !(v = j.next()).done; )\n              Pe(v.value) && pt(v.value, u);\n        }\n      }\n    }\n    function In(a) {\n      {\n        var u = a.type;\n        if (u == null || typeof u == \"string\")\n          return;\n        var g;\n        if (typeof u == \"function\")\n          g = u.propTypes;\n        else if (typeof u == \"object\" && (u.$$typeof === d || // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        u.$$typeof === b))\n          g = u.propTypes;\n        else\n          return;\n        if (g) {\n          var m = N(u);\n          Cn(g, a.props, \"prop\", m, a);\n        } else if (u.PropTypes !== void 0 && !Oe) {\n          Oe = !0;\n          var k = N(u);\n          M(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", k || \"Unknown\");\n        }\n        typeof u.getDefaultProps == \"function\" && !u.getDefaultProps.isReactClassApproved && M(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n      }\n    }\n    function On(a) {\n      {\n        for (var u = Object.keys(a.props), g = 0; g < u.length; g++) {\n          var m = u[g];\n          if (m !== \"children\" && m !== \"key\") {\n            G(a), M(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", m), G(null);\n            break;\n          }\n        }\n        a.ref !== null && (G(a), M(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), G(null));\n      }\n    }\n    function yt(a, u, g, m, k, j) {\n      {\n        var v = mn(a);\n        if (!v) {\n          var x = \"\";\n          (a === void 0 || typeof a == \"object\" && a !== null && Object.keys(a).length === 0) && (x += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n          var _ = Dn(k);\n          _ ? x += _ : x += xt();\n          var E;\n          a === null ? E = \"null\" : De(a) ? E = \"array\" : a !== void 0 && a.$$typeof === t ? (E = \"<\" + (N(a.type) || \"Unknown\") + \" />\", x = \" Did you accidentally export a JSX literal instead of a component?\") : E = typeof a, M(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", E, x);\n        }\n        var R = Ln(a, u, g, k, j);\n        if (R == null)\n          return R;\n        if (v) {\n          var I = u.children;\n          if (I !== void 0)\n            if (m)\n              if (De(I)) {\n                for (var J = 0; J < I.length; J++)\n                  kt(I[J], a);\n                Object.freeze && Object.freeze(I);\n              } else\n                M(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n            else\n              kt(I, a);\n        }\n        return a === r ? On(R) : In(R), R;\n      }\n    }\n    function Pn(a, u, g) {\n      return yt(a, u, g, !0);\n    }\n    function An(a, u, g) {\n      return yt(a, u, g, !1);\n    }\n    var Fn = An, Nn = Pn;\n    ie.Fragment = r, ie.jsx = Fn, ie.jsxs = Nn;\n  }()), ie;\n}\n false ? 0 : ze.exports = pr();\nvar o = ze.exports;\nfunction V(e) {\n  const t = ee();\n  if (!(t != null && t.editor))\n    throw new Error(\n      \"useBlockNoteEditor was called outside of a BlockNoteContext provider or BlockNoteView component\"\n    );\n  return t.editor;\n}\nfunction Je(e, t) {\n  const n = ee();\n  t || (t = n == null ? void 0 : n.editor), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!t)\n      throw new Error(\n        \"'editor' is required, either from BlockNoteContext or as a function argument\"\n      );\n    return t.onChange(e);\n  }, [e, t]);\n}\nfunction Qe(e, t) {\n  const n = ee();\n  t || (t = n == null ? void 0 : n.editor), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!t)\n      throw new Error(\n        \"'editor' is required, either from BlockNoteContext or as a function argument\"\n      );\n    return t.onSelectionChange(e);\n  }, [e, t]);\n}\nfunction U(e, t) {\n  Je(e, t), Qe(e, t);\n}\nfunction ge(e, t, n, r) {\n  const { refs: i, update: l, context: c, floatingStyles: s } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useFloating)({\n    open: e,\n    ...r\n  }), { isMounted: d, styles: f } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useTransitionStyles)(c);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    l();\n  }, [t, l]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    t !== null && i.setReference({\n      getBoundingClientRect: () => t\n    });\n  }, [t, i]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => ({\n      isMounted: d,\n      ref: i.setFloating,\n      style: {\n        display: \"flex\",\n        ...f,\n        ...s,\n        zIndex: n\n      }\n    }),\n    [s, d, i.setFloating, f, n]\n  );\n}\nfunction te(e) {\n  const [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => e((r) => {\n    n({ ...r });\n  }), [e]), t;\n}\nconst Ce = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((e, t) => {\n  const { className: n, children: r, ...i } = e;\n  return /* @__PURE__ */ o.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_5__.Group,\n    {\n      className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\"bn-toolbar\", n || \"\"),\n      ref: t,\n      ...i,\n      children: r\n    }\n  );\n});\nvar Gt = {\n  color: void 0,\n  size: void 0,\n  className: void 0,\n  style: void 0,\n  attr: void 0\n}, Tt = react__WEBPACK_IMPORTED_MODULE_0__.createContext && react__WEBPACK_IMPORTED_MODULE_0__.createContext(Gt), z = globalThis && globalThis.__assign || function() {\n  return z = Object.assign || function(e) {\n    for (var t, n = 1, r = arguments.length; n < r; n++) {\n      t = arguments[n];\n      for (var i in t)\n        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);\n    }\n    return e;\n  }, z.apply(this, arguments);\n}, kr = globalThis && globalThis.__rest || function(e, t) {\n  var n = {};\n  for (var r in e)\n    Object.prototype.hasOwnProperty.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);\n  if (e != null && typeof Object.getOwnPropertySymbols == \"function\")\n    for (var i = 0, r = Object.getOwnPropertySymbols(e); i < r.length; i++)\n      t.indexOf(r[i]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[i]) && (n[r[i]] = e[r[i]]);\n  return n;\n};\nfunction Jt(e) {\n  return e && e.map(function(t, n) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(t.tag, z({\n      key: n\n    }, t.attr), Jt(t.child));\n  });\n}\nfunction S(e) {\n  return function(t) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(yr, z({\n      attr: z({}, e.attr)\n    }, t), Jt(e.child));\n  };\n}\nfunction yr(e) {\n  var t = function(n) {\n    var r = e.attr, i = e.size, l = e.title, c = kr(e, [\"attr\", \"size\", \"title\"]), s = i || n.size || \"1em\", d;\n    return n.className && (d = n.className), e.className && (d = (d ? d + \" \" : \"\") + e.className), react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", z({\n      stroke: \"currentColor\",\n      fill: \"currentColor\",\n      strokeWidth: \"0\"\n    }, n.attr, r, c, {\n      className: d,\n      style: z(z({\n        color: e.color || n.color\n      }, n.style), e.style),\n      height: s,\n      width: s,\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }), l && react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"title\", null, l), e.children);\n  };\n  return Tt !== void 0 ? react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tt.Consumer, null, function(n) {\n    return t(n);\n  }) : t(Gt);\n}\nfunction Cr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M23 11.9998L15.9289 19.0708L14.5147 17.6566L20.1716 11.9998L14.5147 6.34292L15.9289 4.92871L23 11.9998ZM3.82843 11.9998L9.48528 17.6566L8.07107 19.0708L1 11.9998L8.07107 4.92871L9.48528 6.34292L3.82843 11.9998Z\" } }] })(e);\n}\nfunction Sr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM5 19H19V21H5V19ZM3 14H21V16H3V14ZM5 9H19V11H5V9Z\" } }] })(e);\n}\nfunction jr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM3 19H21V21H3V19ZM3 14H21V16H3V14ZM3 9H21V11H3V9Z\" } }] })(e);\n}\nfunction wr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM3 19H17V21H3V19ZM3 14H21V16H3V14ZM3 9H17V11H3V9Z\" } }] })(e);\n}\nfunction Tr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM7 19H21V21H7V19ZM3 14H21V16H3V14ZM7 9H21V11H7V9Z\" } }] })(e);\n}\nfunction Hr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M8 11H12.5C13.8807 11 15 9.88071 15 8.5C15 7.11929 13.8807 6 12.5 6H8V11ZM18 15.5C18 17.9853 15.9853 20 13.5 20H6V4H12.5C14.9853 4 17 6.01472 17 8.5C17 9.70431 16.5269 10.7981 15.7564 11.6058C17.0979 12.3847 18 13.837 18 15.5ZM8 13V18H13.5C14.8807 18 16 16.8807 16 15.5C16 14.1193 14.8807 13 13.5 13H8Z\" } }] })(e);\n}\nfunction Qt(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M13 20H11V13H4V20H2V4H4V11H11V4H13V20ZM21.0005 8V20H19.0005L19 10.204L17 10.74V8.67L19.5005 8H21.0005Z\" } }] })(e);\n}\nfunction Xt(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M4 4V11H11V4H13V20H11V13H4V20H2V4H4ZM18.5 8C20.5711 8 22.25 9.67893 22.25 11.75C22.25 12.6074 21.9623 13.3976 21.4781 14.0292L21.3302 14.2102L18.0343 18H22V20H15L14.9993 18.444L19.8207 12.8981C20.0881 12.5908 20.25 12.1893 20.25 11.75C20.25 10.7835 19.4665 10 18.5 10C17.5818 10 16.8288 10.7071 16.7558 11.6065L16.75 11.75H14.75C14.75 9.67893 16.4289 8 18.5 8Z\" } }] })(e);\n}\nfunction en(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M22 8L21.9984 10L19.4934 12.883C21.0823 13.3184 22.25 14.7728 22.25 16.5C22.25 18.5711 20.5711 20.25 18.5 20.25C16.674 20.25 15.1528 18.9449 14.8184 17.2166L16.7821 16.8352C16.9384 17.6413 17.6481 18.25 18.5 18.25C19.4665 18.25 20.25 17.4665 20.25 16.5C20.25 15.5335 19.4665 14.75 18.5 14.75C18.214 14.75 17.944 14.8186 17.7056 14.9403L16.3992 13.3932L19.3484 10H15V8H22ZM4 4V11H11V4H13V20H11V13H4V20H2V4H4Z\" } }] })(e);\n}\nfunction Er(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM3 19H21V21H3V19ZM11 14H21V16H11V14ZM11 9H21V11H11V9ZM3 12.5L7 9V16L3 12.5Z\" } }] })(e);\n}\nfunction Mr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M3 4H21V6H3V4ZM3 19H21V21H3V19ZM11 14H21V16H11V14ZM11 9H21V11H11V9ZM7 12.5L3 16V9L7 12.5Z\" } }] })(e);\n}\nfunction Rr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M15 20H7V18H9.92661L12.0425 6H9V4H17V6H14.0734L11.9575 18H15V20Z\" } }] })(e);\n}\nfunction Vr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M17 17H22V19H19V22H17V17ZM7 7H2V5H5V2H7V7ZM18.364 15.5355L16.9497 14.1213L18.364 12.7071C20.3166 10.7545 20.3166 7.58866 18.364 5.63604C16.4113 3.68342 13.2455 3.68342 11.2929 5.63604L9.87868 7.05025L8.46447 5.63604L9.87868 4.22183C12.6123 1.48816 17.0445 1.48816 19.7782 4.22183C22.5118 6.9555 22.5118 11.3877 19.7782 14.1213L18.364 15.5355ZM15.5355 18.364L14.1213 19.7782C11.3877 22.5118 6.9555 22.5118 4.22183 19.7782C1.48816 17.0445 1.48816 12.6123 4.22183 9.87868L5.63604 8.46447L7.05025 9.87868L5.63604 11.2929C3.68342 13.2455 3.68342 16.4113 5.63604 18.364C7.58866 20.3166 10.7545 20.3166 12.7071 18.364L14.1213 16.9497L15.5355 18.364ZM14.8284 7.75736L16.2426 9.17157L9.17157 16.2426L7.75736 14.8284L14.8284 7.75736Z\" } }] })(e);\n}\nfunction tn(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M18.3643 15.5353L16.95 14.1211L18.3643 12.7069C20.3169 10.7543 20.3169 7.58847 18.3643 5.63585C16.4116 3.68323 13.2458 3.68323 11.2932 5.63585L9.87898 7.05007L8.46477 5.63585L9.87898 4.22164C12.6127 1.48797 17.0448 1.48797 19.7785 4.22164C22.5121 6.95531 22.5121 11.3875 19.7785 14.1211L18.3643 15.5353ZM15.5358 18.3638L14.1216 19.778C11.388 22.5117 6.9558 22.5117 4.22213 19.778C1.48846 17.0443 1.48846 12.6122 4.22213 9.87849L5.63634 8.46428L7.05055 9.87849L5.63634 11.2927C3.68372 13.2453 3.68372 16.4112 5.63634 18.3638C7.58896 20.3164 10.7548 20.3164 12.7074 18.3638L14.1216 16.9496L15.5358 18.3638ZM14.8287 7.75717L16.2429 9.17139L9.17187 16.2425L7.75766 14.8282L14.8287 7.75717Z\" } }] })(e);\n}\nfunction nn(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M8 4H21V6H8V4ZM5 3V6H6V7H3V6H4V4H3V3H5ZM3 14V11.5H5V11H3V10H6V12.5H4V13H6V14H3ZM5 19.5H3V18.5H5V18H3V17H6V21H3V20H5V19.5ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z\" } }] })(e);\n}\nfunction rn(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M8 4H21V6H8V4ZM4.5 6.5C3.67157 6.5 3 5.82843 3 5C3 4.17157 3.67157 3.5 4.5 3.5C5.32843 3.5 6 4.17157 6 5C6 5.82843 5.32843 6.5 4.5 6.5ZM4.5 13.5C3.67157 13.5 3 12.8284 3 12C3 11.1716 3.67157 10.5 4.5 10.5C5.32843 10.5 6 11.1716 6 12C6 12.8284 5.32843 13.5 4.5 13.5ZM4.5 20.4C3.67157 20.4 3 19.7284 3 18.9C3 18.0716 3.67157 17.4 4.5 17.4C5.32843 17.4 6 18.0716 6 18.9C6 19.7284 5.32843 20.4 4.5 20.4ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z\" } }] })(e);\n}\nfunction Br(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M17.1538 14C17.3846 14.5161 17.5 15.0893 17.5 15.7196C17.5 17.0625 16.9762 18.1116 15.9286 18.867C14.8809 19.6223 13.4335 20 11.5862 20C9.94674 20 8.32335 19.6185 6.71592 18.8555V16.6009C8.23538 17.4783 9.7908 17.917 11.3822 17.917C13.9333 17.917 15.2128 17.1846 15.2208 15.7196C15.2208 15.0939 15.0049 14.5598 14.5731 14.1173C14.5339 14.0772 14.4939 14.0381 14.4531 14H3V12H21V14H17.1538ZM13.076 11H7.62908C7.4566 10.8433 7.29616 10.6692 7.14776 10.4778C6.71592 9.92084 6.5 9.24559 6.5 8.45207C6.5 7.21602 6.96583 6.165 7.89749 5.299C8.82916 4.43299 10.2706 4 12.2219 4C13.6934 4 15.1009 4.32808 16.4444 4.98426V7.13591C15.2448 6.44921 13.9293 6.10587 12.4978 6.10587C10.0187 6.10587 8.77917 6.88793 8.77917 8.45207C8.77917 8.87172 8.99709 9.23796 9.43293 9.55079C9.86878 9.86362 10.4066 10.1135 11.0463 10.3004C11.6665 10.4816 12.3431 10.7148 13.076 11H13.076Z\" } }] })(e);\n}\nfunction Lr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M13 10V14H19V10H13ZM11 10H5V14H11V10ZM13 19H19V16H13V19ZM11 19V16H5V19H11ZM13 5V8H19V5H13ZM11 5H5V8H11V5ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3Z\" } }] })(e);\n}\nfunction ce(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M13 6V21H11V6H5V4H19V6H13Z\" } }] })(e);\n}\nfunction Dr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M8 3V12C8 14.2091 9.79086 16 12 16C14.2091 16 16 14.2091 16 12V3H18V12C18 15.3137 15.3137 18 12 18C8.68629 18 6 15.3137 6 12V3H8ZM4 20H20V22H4V20Z\" } }] })(e);\n}\nfunction _r(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M5 11.1005L7 9.1005L12.5 14.6005L16 11.1005L19 14.1005V5H5V11.1005ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3ZM15.5 10C14.6716 10 14 9.32843 14 8.5C14 7.67157 14.6716 7 15.5 7C16.3284 7 17 7.67157 17 8.5C17 9.32843 16.3284 10 15.5 10Z\" } }] })(e);\n}\nfunction Ir(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M20 3C20.5523 3 21 3.44772 21 4V5.757L19 7.757V5H5V13.1L9 9.1005L13.328 13.429L12.0012 14.7562L11.995 18.995L16.2414 19.0012L17.571 17.671L18.8995 19H19V16.242L21 14.242V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20ZM21.7782 7.80761L23.1924 9.22183L15.4142 17L13.9979 16.9979L14 15.5858L21.7782 7.80761ZM15.5 7C16.3284 7 17 7.67157 17 8.5C17 9.32843 16.3284 10 15.5 10C14.6716 10 14 9.32843 14 8.5C14 7.67157 14.6716 7 15.5 7Z\" } }] })(e);\n}\nfunction Or(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M10 6V8H5V19H16V14H18V20C18 20.5523 17.5523 21 17 21H4C3.44772 21 3 20.5523 3 20V7C3 6.44772 3.44772 6 4 6H10ZM21 3V12L17.206 8.207L11.2071 14.2071L9.79289 12.7929L15.792 6.793L12 3H21Z\" } }] })(e);\n}\nfunction K(e) {\n  const t = ee();\n  if (e || (e = t == null ? void 0 : t.editor), !e)\n    throw new Error(\n      \"'editor' is required, either from BlockNoteContext or as a function argument\"\n    );\n  const n = e, [r, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {\n    var l;\n    return ((l = n.getSelection()) == null ? void 0 : l.blocks) || [n.getTextCursorPosition().block];\n  });\n  return U(\n    () => {\n      var l;\n      return i(\n        ((l = n.getSelection()) == null ? void 0 : l.blocks) || [n.getTextCursorPosition().block]\n      );\n    },\n    n\n  ), r;\n}\nconst Pr = (e) => /* @__PURE__ */ o.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_6__.Stack, { gap: 0, className: \"bn-tooltip\", children: [\n  /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_7__.Text, { size: \"sm\", children: e.mainTooltip }),\n  e.secondaryTooltip && /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_7__.Text, { size: \"xs\", children: e.secondaryTooltip })\n] }), P = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(\n  (e, t) => {\n    const n = e.icon;\n    return /* @__PURE__ */ o.jsx(\n      _mantine_core__WEBPACK_IMPORTED_MODULE_8__.Tooltip,\n      {\n        withinPortal: !1,\n        label: /* @__PURE__ */ o.jsx(\n          Pr,\n          {\n            mainTooltip: e.mainTooltip,\n            secondaryTooltip: e.secondaryTooltip\n          }\n        ),\n        children: e.children ? /* @__PURE__ */ o.jsxs(\n          _mantine_core__WEBPACK_IMPORTED_MODULE_9__.Button,\n          {\n            onMouseDown: (r) => {\n              (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.isSafari)() && r.currentTarget.focus();\n            },\n            onClick: e.onClick,\n            \"data-selected\": e.isSelected ? \"true\" : void 0,\n            \"data-test\": e.mainTooltip.slice(0, 1).toLowerCase() + e.mainTooltip.replace(/\\s+/g, \"\").slice(1),\n            size: \"xs\",\n            disabled: e.isDisabled || !1,\n            ref: t,\n            children: [\n              n && /* @__PURE__ */ o.jsx(n, {}),\n              e.children\n            ]\n          }\n        ) : /* @__PURE__ */ o.jsx(\n          _mantine_core__WEBPACK_IMPORTED_MODULE_10__.ActionIcon,\n          {\n            onMouseDown: (r) => {\n              (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.isSafari)() && r.currentTarget.focus();\n            },\n            onClick: e.onClick,\n            \"data-selected\": e.isSelected ? \"true\" : void 0,\n            \"data-test\": e.mainTooltip.slice(0, 1).toLowerCase() + e.mainTooltip.replace(/\\s+/g, \"\").slice(1),\n            size: 30,\n            disabled: e.isDisabled || !1,\n            ref: t,\n            children: n && /* @__PURE__ */ o.jsx(n, {})\n          }\n        )\n      }\n    );\n  }\n), Ar = {\n  bold: Hr,\n  italic: Rr,\n  underline: Dr,\n  strike: Br,\n  code: Cr\n}, Fr = {\n  bold: \"Mod+B\",\n  italic: \"Mod+I\",\n  underline: \"Mod+U\",\n  strike: \"Mod+Shift+X\",\n  code: \"\"\n};\nfunction Nr(e, t) {\n  return e in t.schema.styleSchema && t.schema.styleSchema[e].type === e && t.schema.styleSchema[e].propSchema === \"boolean\";\n}\nconst ke = (e) => {\n  const t = V(), n = Nr(\n    e.basicTextStyle,\n    t\n  ), r = K(t), [i, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    e.basicTextStyle in t.getActiveStyles()\n  );\n  U(() => {\n    n && l(e.basicTextStyle in t.getActiveStyles());\n  }, t);\n  const c = (d) => {\n    if (n) {\n      if (t.focus(), t.schema.styleSchema[d].propSchema !== \"boolean\")\n        throw new Error(\"can only toggle boolean styles\");\n      t.toggleStyles({ [d]: !0 });\n    }\n  };\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => n ? !!r.find((d) => d.content !== void 0) : !1, [n, r]) ? /* @__PURE__ */ o.jsx(\n    P,\n    {\n      onClick: () => c(e.basicTextStyle),\n      isSelected: i,\n      mainTooltip: e.basicTextStyle.slice(0, 1).toUpperCase() + e.basicTextStyle.slice(1),\n      secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(Fr[e.basicTextStyle]),\n      icon: Ar[e.basicTextStyle]\n    }\n  ) : null;\n};\nfunction Xe() {\n  const e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  return {\n    ref: e,\n    updateMaxHeight: () => {\n      setTimeout(() => {\n        if (e.current && e.current.childElementCount > 0) {\n          e.current.firstElementChild.style.maxHeight = \"none\";\n          const t = e.current.firstElementChild.getBoundingClientRect();\n          e.current.firstElementChild.style.maxHeight = `${Math.min(\n            t.top >= 0 ? window.innerHeight - t.top - 20 : t.bottom - 20\n          )}px`;\n        }\n      }, 10);\n    }\n  };\n}\nconst Ue = (e) => {\n  const t = e.textColor || \"default\", n = e.backgroundColor || \"default\", r = e.size || 16, i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => ({\n      pointerEvents: \"none\",\n      fontSize: (r * 0.75).toString() + \"px\",\n      height: r.toString() + \"px\",\n      lineHeight: r.toString() + \"px\",\n      textAlign: \"center\",\n      width: r.toString() + \"px\"\n    }),\n    [r]\n  );\n  return /* @__PURE__ */ o.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_11__.Box,\n    {\n      className: \"bn-color-icon\",\n      \"data-background-color\": n,\n      \"data-text-color\": t,\n      style: i,\n      children: \"A\"\n    }\n  );\n};\nfunction $e(e) {\n  return S({ tag: \"svg\", attr: { version: \"1.2\", baseProfile: \"tiny\", viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { d: \"M16.972 6.251c-.967-.538-2.185-.188-2.72.777l-3.713 6.682-2.125-2.125c-.781-.781-2.047-.781-2.828 0-.781.781-.781 2.047 0 2.828l4 4c.378.379.888.587 1.414.587l.277-.02c.621-.087 1.166-.46 1.471-1.009l5-9c.537-.966.189-2.183-.776-2.72z\" } }] })(e);\n}\nconst on = (e) => {\n  const t = () => e.text ? /* @__PURE__ */ o.jsxs(o.Fragment, { children: [\n    /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Label, { children: \"Text\" }),\n    [\n      \"default\",\n      \"gray\",\n      \"brown\",\n      \"red\",\n      \"orange\",\n      \"yellow\",\n      \"green\",\n      \"blue\",\n      \"purple\",\n      \"pink\"\n    ].map((r) => /* @__PURE__ */ o.jsx(\n      _mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Item,\n      {\n        onClick: () => {\n          e.onClick && e.onClick(), e.text.setColor(r);\n        },\n        component: \"div\",\n        \"data-test\": \"text-color-\" + r,\n        leftSection: /* @__PURE__ */ o.jsx(Ue, { textColor: r, size: e.iconSize }),\n        rightSection: e.text.color === r ? /* @__PURE__ */ o.jsx($e, { size: 20, className: \"bn-tick-icon\" }) : /* @__PURE__ */ o.jsx(\"div\", { className: \"bn-tick-space\" }),\n        children: r.charAt(0).toUpperCase() + r.slice(1)\n      },\n      \"text-color-\" + r\n    ))\n  ] }) : null, n = () => e.background ? /* @__PURE__ */ o.jsxs(o.Fragment, { children: [\n    /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Label, { children: \"Background\" }),\n    [\n      \"default\",\n      \"gray\",\n      \"brown\",\n      \"red\",\n      \"orange\",\n      \"yellow\",\n      \"green\",\n      \"blue\",\n      \"purple\",\n      \"pink\"\n    ].map((r) => /* @__PURE__ */ o.jsx(\n      _mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Item,\n      {\n        onClick: () => {\n          e.onClick && e.onClick(), e.background.setColor(r);\n        },\n        component: \"div\",\n        \"data-test\": \"background-color-\" + r,\n        leftSection: /* @__PURE__ */ o.jsx(Ue, { backgroundColor: r, size: e.iconSize }),\n        rightSection: e.background.color === r ? /* @__PURE__ */ o.jsx($e, { size: 20, className: \"bn-tick-icon\" }) : /* @__PURE__ */ o.jsx(\"div\", { className: \"bn-tick-space\" }),\n        children: r.charAt(0).toUpperCase() + r.slice(1)\n      },\n      \"background-color-\" + r\n    ))\n  ] }) : null;\n  return /* @__PURE__ */ o.jsxs(o.Fragment, { children: [\n    /* @__PURE__ */ o.jsx(t, {}),\n    /* @__PURE__ */ o.jsx(n, {})\n  ] });\n};\nfunction Ht(e, t) {\n  return `${e}Color` in t.schema.styleSchema && t.schema.styleSchema[`${e}Color`].type === `${e}Color` && t.schema.styleSchema[`${e}Color`].propSchema === \"string\";\n}\nconst Zr = () => {\n  const e = V(), t = Ht(\"text\", e), n = Ht(\"background\", e), r = K(e), [i, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    t && e.getActiveStyles().textColor || \"default\"\n  ), [c, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    n && e.getActiveStyles().backgroundColor || \"default\"\n  );\n  U(() => {\n    t && l(e.getActiveStyles().textColor || \"default\"), n && s(\n      e.getActiveStyles().backgroundColor || \"default\"\n    );\n  }, e);\n  const { ref: d, updateMaxHeight: f } = Xe(), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (C) => {\n      if (!t)\n        throw Error(\n          \"Tried to set text color, but style does not exist in editor schema.\"\n        );\n      e.focus(), C === \"default\" ? e.removeStyles({ textColor: C }) : e.addStyles({ textColor: C });\n    },\n    [e, t]\n  ), b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (C) => {\n      if (!n)\n        throw Error(\n          \"Tried to set background color, but style does not exist in editor schema.\"\n        );\n      e.focus(), C === \"default\" ? e.removeStyles({ backgroundColor: C }) : e.addStyles({ backgroundColor: C });\n    },\n    [n, e]\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (!t && !n)\n      return !1;\n    for (const C of r)\n      if (C.content !== void 0)\n        return !0;\n    return !1;\n  }, [n, r, t]) ? /* @__PURE__ */ o.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu, { withinPortal: !1, onOpen: f, children: [\n    /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Target, { children: /* @__PURE__ */ o.jsx(\n      P,\n      {\n        mainTooltip: \"Colors\",\n        icon: () => /* @__PURE__ */ o.jsx(\n          Ue,\n          {\n            textColor: i,\n            backgroundColor: c,\n            size: 20\n          }\n        )\n      }\n    ) }),\n    /* @__PURE__ */ o.jsx(\"div\", { ref: d, children: /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Dropdown, { children: /* @__PURE__ */ o.jsx(\n      on,\n      {\n        text: t ? {\n          color: i,\n          setColor: h\n        } : void 0,\n        background: n ? {\n          color: c,\n          setColor: b\n        } : void 0\n      }\n    ) }) })\n  ] }) : null;\n}, an = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ className: e, ...t }, n) => /* @__PURE__ */ o.jsx(\n  _mantine_core__WEBPACK_IMPORTED_MODULE_6__.Stack,\n  {\n    ...t,\n    className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\"bn-toolbar-input-dropdown\", e || \"\"),\n    ref: n,\n    children: t.children\n  }\n)), zr = {\n  text: _mantine_core__WEBPACK_IMPORTED_MODULE_13__.TextInput,\n  file: _mantine_core__WEBPACK_IMPORTED_MODULE_14__.FileInput\n}, We = (e) => {\n  const t = e.icon, n = zr[e.type];\n  return /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_5__.Group, { children: /* @__PURE__ */ o.jsx(n, { size: \"xs\", icon: /* @__PURE__ */ o.jsx(t, {}), ...e.inputProps }) });\n}, ln = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ url: e, text: t, update: n, ...r }, i) => {\n  const [l, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e), [s, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(t);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    c(e), d(t);\n  }, [t, e]);\n  const f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (C) => {\n      C.key === \"Enter\" && (C.preventDefault(), n(l, s));\n    },\n    [n, l, s]\n  ), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (C) => c(C.currentTarget.value),\n    []\n  ), b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (C) => d(C.currentTarget.value),\n    []\n  ), T = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    () => n(l, s),\n    [n, l, s]\n  );\n  return /* @__PURE__ */ o.jsxs(an, { ...r, ref: i, children: [\n    /* @__PURE__ */ o.jsx(\n      We,\n      {\n        type: \"text\",\n        icon: tn,\n        inputProps: {\n          autoFocus: !0,\n          placeholder: \"Edit URL\",\n          value: l,\n          onKeyDown: f,\n          onChange: h,\n          onSubmit: T\n        }\n      }\n    ),\n    /* @__PURE__ */ o.jsx(\n      We,\n      {\n        type: \"text\",\n        icon: ce,\n        inputProps: {\n          placeholder: \"Edit Title\",\n          value: s,\n          onKeyDown: f,\n          onChange: b,\n          onSubmit: T\n        }\n      }\n    )\n  ] });\n}), sn = (e) => {\n  const [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    n(!1);\n  }, []), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    n(!0);\n  }, []);\n  return /* @__PURE__ */ o.jsxs(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_15__.Popover,\n    {\n      withinPortal: !1,\n      onOpen: () => {\n        i();\n      },\n      onClose: () => {\n        r();\n      },\n      zIndex: 1e4,\n      ...e,\n      children: [\n        /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_15__.Popover.Target, { children: e.target }),\n        /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_15__.Popover.Dropdown, { children: t ? e.dropdown : null })\n      ]\n    }\n  );\n}, Ur = () => {\n  const e = V(), t = K(e), [n, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.getSelectedLinkUrl() || \"\"), [i, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.getSelectedText());\n  U(() => {\n    l(e.getSelectedText() || \"\"), r(e.getSelectedLinkUrl() || \"\");\n  }, e);\n  const c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (d, f) => {\n      e.createLink(d, f), e.focus();\n    },\n    [e]\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    for (const d of t)\n      if (d.content === void 0)\n        return !1;\n    return !0;\n  }, [t]) ? /* @__PURE__ */ o.jsx(\n    sn,\n    {\n      target: /* @__PURE__ */ o.jsx(\n        P,\n        {\n          mainTooltip: \"Create Link\",\n          secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Mod+K\"),\n          icon: tn\n        }\n      ),\n      dropdown: /* @__PURE__ */ o.jsx(ln, { url: n, text: i, update: c })\n    }\n  ) : null;\n}, $r = () => {\n  const e = V(), [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), r = K(e), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (r.length !== 1)\n      return;\n    const s = r[0];\n    if ((0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.checkBlockIsDefaultType)(\"image\", s, e))\n      return s;\n  }, [e, r]), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (s) => {\n      i && (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.checkDefaultBlockTypeInSchema)(\"image\", e) && s.key === \"Enter\" && (s.preventDefault(), e.updateBlock(i, {\n        type: \"image\",\n        props: {\n          caption: t\n        }\n      }));\n    },\n    [t, e, i]\n  ), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (s) => n(s.currentTarget.value),\n    []\n  );\n  return i ? /* @__PURE__ */ o.jsx(\n    sn,\n    {\n      target: /* @__PURE__ */ o.jsx(\n        P,\n        {\n          mainTooltip: \"Edit Caption\",\n          icon: ce,\n          isSelected: i.props.caption !== \"\"\n        }\n      ),\n      dropdown: /* @__PURE__ */ o.jsx(an, { children: /* @__PURE__ */ o.jsx(\n        We,\n        {\n          type: \"text\",\n          icon: ce,\n          inputProps: {\n            // TODO: weird pattern of props passing?\n            value: t,\n            autoFocus: !0,\n            placeholder: \"Edit Caption\",\n            onKeyDown: l,\n            defaultValue: i.props.caption,\n            onChange: c\n          }\n        }\n      ) })\n    }\n  ) : null;\n}, Wr = () => {\n  const e = V(), [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    () => e.canNestBlock()\n  );\n  U(() => {\n    e.canNestBlock(), n(e.canNestBlock());\n  }, e);\n  const r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    e.focus(), e.nestBlock();\n  }, [e]);\n  return /* @__PURE__ */ o.jsx(\n    P,\n    {\n      onClick: r,\n      isDisabled: !t,\n      mainTooltip: \"Nest Block\",\n      secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Tab\"),\n      icon: Mr\n    }\n  );\n}, qr = () => {\n  const e = V(), [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    () => e.canUnnestBlock()\n  );\n  U(() => {\n    n(e.canUnnestBlock());\n  }, e);\n  const r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    e.focus(), e.unnestBlock();\n  }, [e]);\n  return /* @__PURE__ */ o.jsx(\n    P,\n    {\n      onClick: r,\n      isDisabled: !t,\n      mainTooltip: \"Unnest Block\",\n      secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Shift+Tab\"),\n      icon: Er\n    }\n  );\n}, cn = (e) => {\n  const t = V(), [n, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    t.uploadFile !== void 0 ? \"upload\" : \"embed\"\n  ), [i, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [c, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    c && setTimeout(() => {\n      s(!1);\n    }, 3e3);\n  }, [c]);\n  const d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (D) => {\n      if (D === null)\n        return;\n      async function ne(F) {\n        if (l(!0), t.uploadFile !== void 0)\n          try {\n            const O = await t.uploadFile(F);\n            t.updateBlock(e.block, {\n              type: \"image\",\n              props: {\n                url: O\n              }\n            });\n          } catch {\n            s(!0);\n          } finally {\n            l(!1);\n          }\n      }\n      ne(D);\n    },\n    [t, e.block]\n  ), [f, h] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (D) => {\n      h(D.currentTarget.value);\n    },\n    []\n  ), T = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (D) => {\n      D.key === \"Enter\" && (D.preventDefault(), t.updateBlock(e.block, {\n        type: \"image\",\n        props: {\n          url: f\n        }\n      }));\n    },\n    [t, e.block, f]\n  ), C = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    t.updateBlock(e.block, {\n      type: \"image\",\n      props: {\n        url: f\n      }\n    });\n  }, [t, e.block, f]);\n  return /* @__PURE__ */ o.jsx(Ce, { className: \"bn-image-toolbar\", children: /* @__PURE__ */ o.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_16__.Tabs, { value: n, onChange: r, children: [\n    i && /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_17__.LoadingOverlay, { visible: i }),\n    /* @__PURE__ */ o.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_16__.Tabs.List, { children: [\n      t.uploadFile !== void 0 && /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_16__.Tabs.Tab, { value: \"upload\", \"data-test\": \"upload-tab\", children: \"Upload\" }),\n      /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_16__.Tabs.Tab, { value: \"embed\", \"data-test\": \"embed-tab\", children: \"Embed\" })\n    ] }),\n    t.uploadFile !== void 0 && /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_16__.Tabs.Panel, { className: \"bn-upload-image-panel\", value: \"upload\", children: /* @__PURE__ */ o.jsxs(\"div\", { children: [\n      /* @__PURE__ */ o.jsx(\n        _mantine_core__WEBPACK_IMPORTED_MODULE_14__.FileInput,\n        {\n          placeholder: \"Upload Image\",\n          size: \"xs\",\n          value: null,\n          onChange: d,\n          \"data-test\": \"upload-input\"\n        }\n      ),\n      c && /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_7__.Text, { c: \"red\", size: \"12px\", children: \"Error: Upload failed\" })\n    ] }) }),\n    /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_16__.Tabs.Panel, { className: \"bn-embed-image-panel\", value: \"embed\", children: /* @__PURE__ */ o.jsxs(\"div\", { children: [\n      /* @__PURE__ */ o.jsx(\n        _mantine_core__WEBPACK_IMPORTED_MODULE_13__.TextInput,\n        {\n          size: \"xs\",\n          placeholder: \"Enter URL\",\n          value: f,\n          onChange: b,\n          onKeyDown: T,\n          \"data-test\": \"embed-input\"\n        }\n      ),\n      /* @__PURE__ */ o.jsx(\n        _mantine_core__WEBPACK_IMPORTED_MODULE_9__.Button,\n        {\n          className: \"bn-embed-image-button\",\n          onClick: C,\n          size: \"xs\",\n          \"data-test\": \"embed-input-button\",\n          children: \"Embed Image\"\n        }\n      )\n    ] }) })\n  ] }) });\n}, Yr = () => {\n  const e = V(), t = K(e), [n, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    r(!1);\n  }, [t]);\n  const i = t.length === 1 ? t[0] : void 0;\n  return i === void 0 || i.type !== \"image\" || !(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.checkBlockIsDefaultType)(\"image\", i, e) ? null : /* @__PURE__ */ o.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_15__.Popover, { withinPortal: !1, opened: n, position: \"bottom\", children: [\n    /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_15__.Popover.Target, { children: /* @__PURE__ */ o.jsx(\n      P,\n      {\n        onClick: () => r(!n),\n        isSelected: n,\n        mainTooltip: \"Replace Image\",\n        icon: Ir\n      }\n    ) }),\n    /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_15__.Popover.Dropdown, { children: /* @__PURE__ */ o.jsx(cn, { block: i }) })\n  ] });\n}, Kr = {\n  left: wr,\n  center: Sr,\n  right: Tr,\n  justify: jr\n}, Ae = (e) => {\n  const t = V(), n = K(t), r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const c = n[0];\n    if ((0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.checkBlockHasDefaultProp)(\"textAlignment\", c, t))\n      return c.props.textAlignment;\n  }, [t, n]), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (c) => {\n      t.focus();\n      for (const s of n)\n        (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.checkBlockTypeHasDefaultProp)(\"textAlignment\", s.type, t) && t.updateBlock(s, {\n          props: { textAlignment: c }\n        });\n    },\n    [t, n]\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => !!n.find((c) => \"textAlignment\" in c.props), [n]) ? /* @__PURE__ */ o.jsx(\n    P,\n    {\n      onClick: () => i(e.textAlignment),\n      isSelected: r === e.textAlignment,\n      mainTooltip: e.textAlignment === \"justify\" ? \"Justify Text\" : \"Align Text \" + e.textAlignment.slice(0, 1).toUpperCase() + e.textAlignment.slice(1),\n      icon: Kr[e.textAlignment]\n    }\n  ) : null;\n};\nfunction Gr(e) {\n  const t = e.icon;\n  return /* @__PURE__ */ o.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Item,\n    {\n      onClick: e.onClick,\n      leftSection: t && /* @__PURE__ */ o.jsx(t, { size: 16 }),\n      rightSection: e.isSelected ? /* @__PURE__ */ o.jsx($e, { size: 20, className: \"bn-tick-icon\" }) : (\n        // Ensures space for tick even if item isn't currently selected.\n        /* @__PURE__ */ o.jsx(\"div\", { className: \"bn-tick-space\" })\n      ),\n      disabled: e.isDisabled,\n      children: e.text\n    },\n    e.text\n  );\n}\nfunction Jr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 20 20\", fill: \"currentColor\", \"aria-hidden\": \"true\" }, child: [{ tag: \"path\", attr: { fillRule: \"evenodd\", d: \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\", clipRule: \"evenodd\" } }] })(e);\n}\nfunction Qr(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 20 20\", fill: \"currentColor\", \"aria-hidden\": \"true\" }, child: [{ tag: \"path\", attr: { fillRule: \"evenodd\", d: \"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\", clipRule: \"evenodd\" } }] })(e);\n}\nconst Xr = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((e, t) => {\n  const n = e.icon;\n  return /* @__PURE__ */ o.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_9__.Button,\n    {\n      onMouseDown: (r) => {\n        (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.isSafari)() && r.currentTarget.focus();\n      },\n      leftSection: n && /* @__PURE__ */ o.jsx(n, { size: 16 }),\n      rightSection: /* @__PURE__ */ o.jsx(Jr, {}),\n      size: \"xs\",\n      variant: \"subtle\",\n      disabled: e.isDisabled,\n      onClick: e.onClick,\n      ref: t,\n      children: e.text\n    }\n  );\n});\nfunction eo(e) {\n  const t = e.items.filter((i) => i.isSelected)[0], { ref: n, updateMaxHeight: r } = Xe();\n  return t ? /* @__PURE__ */ o.jsxs(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu,\n    {\n      withinPortal: !1,\n      transitionProps: {\n        exitDuration: 0\n      },\n      disabled: e.isDisabled,\n      onOpen: r,\n      children: [\n        /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Target, { children: /* @__PURE__ */ o.jsx(\n          Xr,\n          {\n            text: t.text,\n            icon: t.icon,\n            isDisabled: t.isDisabled\n          }\n        ) }),\n        /* @__PURE__ */ o.jsx(\"div\", { ref: n, children: /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Dropdown, { children: e.items.map((i) => /* @__PURE__ */ o.jsx(Gr, { ...i }, i.text)) }) })\n      ]\n    }\n  ) : null;\n}\nconst to = [\n  {\n    name: \"Paragraph\",\n    type: \"paragraph\",\n    icon: ce,\n    isSelected: (e) => e.type === \"paragraph\"\n  },\n  {\n    name: \"Heading 1\",\n    type: \"heading\",\n    props: { level: 1 },\n    icon: Qt,\n    isSelected: (e) => e.type === \"heading\" && \"level\" in e.props && e.props.level === 1\n  },\n  {\n    name: \"Heading 2\",\n    type: \"heading\",\n    props: { level: 2 },\n    icon: Xt,\n    isSelected: (e) => e.type === \"heading\" && \"level\" in e.props && e.props.level === 2\n  },\n  {\n    name: \"Heading 3\",\n    type: \"heading\",\n    props: { level: 3 },\n    icon: en,\n    isSelected: (e) => e.type === \"heading\" && \"level\" in e.props && e.props.level === 3\n  },\n  {\n    name: \"Bullet List\",\n    type: \"bulletListItem\",\n    icon: rn,\n    isSelected: (e) => e.type === \"bulletListItem\"\n  },\n  {\n    name: \"Numbered List\",\n    type: \"numberedListItem\",\n    icon: nn,\n    isSelected: (e) => e.type === \"numberedListItem\"\n  }\n], no = (e) => {\n  const t = V(), n = K(t), [r, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(t.getTextCursorPosition().block), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (e.items || to).filter((d) => {\n    if (!(d.type in t.schema.blockSchema))\n      return !1;\n    for (const [f, h] of Object.entries(d.props || {})) {\n      const b = t.schema.blockSchema[d.type].propSchema;\n      if (!(f in b) || b[f].values !== void 0 && !b[f].values.includes(h))\n        return !1;\n    }\n    return !0;\n  }), [t, e.items]), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => l.find((d) => d.type === r.type) !== void 0,\n    [r.type, l]\n  ), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const d = (f) => {\n      t.focus();\n      for (const h of n)\n        t.updateBlock(h, {\n          type: f.type,\n          props: f.props\n        });\n    };\n    return l.map((f) => ({\n      text: f.name,\n      icon: f.icon,\n      onClick: () => d(f),\n      isSelected: f.isSelected(r)\n    }));\n  }, [r, l, t, n]);\n  return U(() => {\n    i(t.getTextCursorPosition().block);\n  }, t), c ? /* @__PURE__ */ o.jsx(eo, { items: s }) : null;\n}, ro = (e) => [\n  /* @__PURE__ */ o.jsx(\n    no,\n    {\n      items: e\n    },\n    \"blockTypeDropdown\"\n  ),\n  /* @__PURE__ */ o.jsx($r, {}, \"imageCaptionButton\"),\n  /* @__PURE__ */ o.jsx(Yr, {}, \"replaceImageButton\"),\n  /* @__PURE__ */ o.jsx(ke, { basicTextStyle: \"bold\" }, \"boldStyleButton\"),\n  /* @__PURE__ */ o.jsx(ke, { basicTextStyle: \"italic\" }, \"italicStyleButton\"),\n  /* @__PURE__ */ o.jsx(\n    ke,\n    {\n      basicTextStyle: \"underline\"\n    },\n    \"underlineStyleButton\"\n  ),\n  /* @__PURE__ */ o.jsx(ke, { basicTextStyle: \"strike\" }, \"strikeStyleButton\"),\n  /* @__PURE__ */ o.jsx(Ae, { textAlignment: \"left\" }, \"textAlignLeftButton\"),\n  /* @__PURE__ */ o.jsx(Ae, { textAlignment: \"center\" }, \"textAlignCenterButton\"),\n  /* @__PURE__ */ o.jsx(Ae, { textAlignment: \"right\" }, \"textAlignRightButton\"),\n  /* @__PURE__ */ o.jsx(Zr, {}, \"colorStyleButton\"),\n  /* @__PURE__ */ o.jsx(Wr, {}, \"nestBlockButton\"),\n  /* @__PURE__ */ o.jsx(qr, {}, \"unnestBlockButton\"),\n  /* @__PURE__ */ o.jsx(Ur, {}, \"createLinkButton\")\n], oo = (e) => /* @__PURE__ */ o.jsx(Ce, { children: e.children || ro(e.blockTypeDropdownItems) }), Et = (e) => {\n  switch (e) {\n    case \"left\":\n      return \"top-start\";\n    case \"center\":\n      return \"top\";\n    case \"right\":\n      return \"top-end\";\n    default:\n      return \"top-start\";\n  }\n}, ao = (e) => {\n  const t = V(), [n, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n    () => {\n      const f = t.getTextCursorPosition().block;\n      return \"textAlignment\" in f.props ? Et(\n        f.props.textAlignment\n      ) : \"top-start\";\n    }\n  );\n  U(() => {\n    const f = t.getTextCursorPosition().block;\n    \"textAlignment\" in f.props ? r(\n      Et(\n        f.props.textAlignment\n      )\n    ) : r(\"top-start\");\n  }, t);\n  const i = te(\n    t.formattingToolbar.onUpdate.bind(t.formattingToolbar)\n  ), { isMounted: l, ref: c, style: s } = ge(\n    (i == null ? void 0 : i.show) || !1,\n    (i == null ? void 0 : i.referencePos) || null,\n    3e3,\n    {\n      placement: n,\n      middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_18__.offset)(10), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.flip)()]\n    }\n  );\n  if (!l || !i)\n    return null;\n  const d = e.formattingToolbar || oo;\n  return /* @__PURE__ */ o.jsx(\"div\", { ref: c, style: s, children: /* @__PURE__ */ o.jsx(d, {}) });\n}, io = (e) => {\n  const [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  if (e.children)\n    return /* @__PURE__ */ o.jsx(Ce, { children: e.children });\n  const {\n    text: i,\n    url: l,\n    deleteHyperlink: c,\n    editHyperlink: s,\n    startHideTimer: d,\n    stopHideTimer: f\n  } = e;\n  return t ? /* @__PURE__ */ o.jsx(\n    ln,\n    {\n      url: l,\n      text: i,\n      update: s,\n      onBlur: (h) => setTimeout(() => {\n        var b;\n        (b = r.current) != null && b.contains(h.relatedTarget) || n(!1);\n      }, 500),\n      ref: r\n    }\n  ) : /* @__PURE__ */ o.jsxs(Ce, { onMouseEnter: f, onMouseLeave: d, children: [\n    /* @__PURE__ */ o.jsx(\n      P,\n      {\n        mainTooltip: \"Edit\",\n        isSelected: !1,\n        onClick: () => n(!0),\n        children: \"Edit Link\"\n      }\n    ),\n    /* @__PURE__ */ o.jsx(\n      P,\n      {\n        mainTooltip: \"Open in new tab\",\n        isSelected: !1,\n        onClick: () => {\n          window.open(l, \"_blank\");\n        },\n        icon: Or\n      }\n    ),\n    /* @__PURE__ */ o.jsx(\n      P,\n      {\n        mainTooltip: \"Remove link\",\n        isSelected: !1,\n        onClick: c,\n        icon: Vr\n      }\n    )\n  ] });\n}, lo = (e) => {\n  const t = V(), n = {\n    deleteHyperlink: t.hyperlinkToolbar.deleteHyperlink,\n    editHyperlink: t.hyperlinkToolbar.editHyperlink,\n    startHideTimer: t.hyperlinkToolbar.startHideTimer,\n    stopHideTimer: t.hyperlinkToolbar.stopHideTimer\n  }, r = te(\n    t.hyperlinkToolbar.onUpdate.bind(t.hyperlinkToolbar)\n  ), { isMounted: i, ref: l, style: c } = ge(\n    (r == null ? void 0 : r.show) || !1,\n    (r == null ? void 0 : r.referencePos) || null,\n    4e3,\n    {\n      placement: \"top-start\",\n      middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_18__.offset)(10), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.flip)()]\n    }\n  );\n  if (!i || !r)\n    return null;\n  const { show: s, referencePos: d, ...f } = r, h = e.hyperlinkToolbar || io;\n  return /* @__PURE__ */ o.jsx(\"div\", { ref: l, style: c, children: /* @__PURE__ */ o.jsx(h, { ...f, ...n }) });\n}, so = (e) => {\n  const t = V();\n  if (!t.imageToolbar)\n    throw new Error(\n      \"ImageToolbarController can only be used when BlockNote editor schema contains image block\"\n    );\n  const n = te(\n    t.imageToolbar.onUpdate.bind(t.imageToolbar)\n  ), { isMounted: r, ref: i, style: l } = ge(\n    (n == null ? void 0 : n.show) || !1,\n    (n == null ? void 0 : n.referencePos) || null,\n    5e3,\n    {\n      placement: \"bottom\",\n      middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_18__.offset)(10), (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.flip)()]\n    }\n  );\n  if (!r || !n)\n    return null;\n  const { show: c, referencePos: s, ...d } = n, f = e.imageToolbar || cn;\n  return /* @__PURE__ */ o.jsx(\"div\", { ref: i, style: l, children: /* @__PURE__ */ o.jsx(f, { ...d }) });\n};\nfunction co(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 1024 1024\" }, child: [{ tag: \"path\", attr: { d: \"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8Z\" } }, { tag: \"path\", attr: { d: \"M192 474h672q8 0 8 8v60q0 8-8 8H160q-8 0-8-8v-60q0-8 8-8Z\" } }] })(e);\n}\nconst un = (e) => /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_10__.ActionIcon, { size: 24, children: e.children }), uo = (e) => /* @__PURE__ */ o.jsx(un, { children: /* @__PURE__ */ o.jsx(\n  co,\n  {\n    size: 24,\n    onClick: e.addBlock,\n    \"data-test\": \"dragHandleAdd\"\n  }\n) });\nfunction dn(e) {\n  return S({ tag: \"svg\", attr: { viewBox: \"0 0 24 24\" }, child: [{ tag: \"path\", attr: { fill: \"none\", d: \"M0 0h24v24H0V0z\" } }, { tag: \"path\", attr: { d: \"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\" } }] })(e);\n}\nconst fn = (e) => {\n  const { children: t, ...n } = e;\n  return /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Item, { ...n, children: t });\n}, fo = (e) => {\n  const t = V(), [n, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), { ref: i, updateMaxHeight: l } = Xe(), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    c.current && clearTimeout(c.current), c.current = setTimeout(() => {\n      r(!1);\n    }, 250);\n  }, []), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    c.current && clearTimeout(c.current), n || l(), r(!0);\n  }, [n, l]);\n  return !(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.checkBlockTypeHasDefaultProp)(\"textColor\", e.block.type, t) && !(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.checkBlockTypeHasDefaultProp)(\"backgroundColor\", e.block.type, t) ? null : /* @__PURE__ */ o.jsx(\n    fn,\n    {\n      onMouseLeave: s,\n      onMouseOver: d,\n      children: /* @__PURE__ */ o.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu, { withinPortal: !1, opened: n, position: \"right\", children: [\n        /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Target, { children: /* @__PURE__ */ o.jsxs(\"div\", { style: { display: \"flex\", alignItems: \"center\" }, children: [\n          /* @__PURE__ */ o.jsx(\"div\", { style: { flex: 1 }, children: e.children }),\n          /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_11__.Box, { style: { display: \"flex\", alignItems: \"center\" }, children: /* @__PURE__ */ o.jsx(Qr, { size: 15 }) })\n        ] }) }),\n        /* @__PURE__ */ o.jsx(\"div\", { ref: i, children: /* @__PURE__ */ o.jsx(\n          _mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Dropdown,\n          {\n            onMouseLeave: s,\n            onMouseOver: d,\n            style: { marginLeft: \"5px\" },\n            children: /* @__PURE__ */ o.jsx(\n              on,\n              {\n                iconSize: 18,\n                text: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.checkBlockTypeHasDefaultProp)(\n                  \"textColor\",\n                  e.block.type,\n                  t\n                ) && (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.checkBlockHasDefaultProp)(\"textColor\", e.block, t) ? {\n                  color: e.block.props.textColor,\n                  setColor: (f) => t.updateBlock(e.block, {\n                    type: e.block.type,\n                    props: { textColor: f }\n                  })\n                } : void 0,\n                background: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.checkBlockTypeHasDefaultProp)(\n                  \"backgroundColor\",\n                  e.block.type,\n                  t\n                ) && (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.checkBlockHasDefaultProp)(\"backgroundColor\", e.block, t) ? {\n                  color: e.block.props.backgroundColor,\n                  setColor: (f) => t.updateBlock(e.block, {\n                    props: { backgroundColor: f }\n                  })\n                } : void 0\n              }\n            )\n          }\n        ) })\n      ] })\n    }\n  );\n}, go = (e) => {\n  const t = V();\n  return /* @__PURE__ */ o.jsx(fn, { onClick: () => t.removeBlocks([e.block]), children: e.children });\n}, ho = (e) => /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Dropdown, { className: \"bn-drag-handle-menu\", children: e.children || /* @__PURE__ */ o.jsxs(o.Fragment, { children: [\n  /* @__PURE__ */ o.jsx(go, { ...e, children: \"Delete\" }),\n  /* @__PURE__ */ o.jsx(fo, { ...e, children: \"Colors\" })\n] }) }), mo = (e) => {\n  const t = e.dragHandleMenu || ho;\n  return /* @__PURE__ */ o.jsxs(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu,\n    {\n      withinPortal: !1,\n      trigger: \"click\",\n      onOpen: e.freezeMenu,\n      onClose: e.unfreezeMenu,\n      width: 100,\n      position: \"left\",\n      children: [\n        /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Target, { children: /* @__PURE__ */ o.jsx(\n          \"div\",\n          {\n            className: \"bn-drag-handle\",\n            draggable: \"true\",\n            onDragStart: e.blockDragStart,\n            onDragEnd: e.blockDragEnd,\n            children: /* @__PURE__ */ o.jsx(un, { children: /* @__PURE__ */ o.jsx(dn, { size: 24, \"data-test\": \"dragHandle\" }) })\n          }\n        ) }),\n        /* @__PURE__ */ o.jsx(t, { block: e.block })\n      ]\n    }\n  );\n}, bo = (e) => {\n  const { addBlock: t, ...n } = e;\n  return /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_5__.Group, { className: \"bn-side-menu\", gap: 0, children: e.children || /* @__PURE__ */ o.jsxs(o.Fragment, { children: [\n    /* @__PURE__ */ o.jsx(uo, { addBlock: t }),\n    /* @__PURE__ */ o.jsx(mo, { ...n })\n  ] }) });\n}, xo = (e) => {\n  const t = V(), n = {\n    addBlock: t.sideMenu.addBlock,\n    blockDragStart: t.sideMenu.blockDragStart,\n    blockDragEnd: t.sideMenu.blockDragEnd,\n    freezeMenu: t.sideMenu.freezeMenu,\n    unfreezeMenu: t.sideMenu.unfreezeMenu\n  }, r = te(\n    t.sideMenu.onUpdate.bind(t.sideMenu)\n  ), { isMounted: i, ref: l, style: c } = ge(\n    (r == null ? void 0 : r.show) || !1,\n    (r == null ? void 0 : r.referencePos) || null,\n    1e3,\n    {\n      placement: \"left\"\n    }\n  );\n  if (!i || !r)\n    return null;\n  const { show: s, referencePos: d, ...f } = r, h = e.sideMenu || bo;\n  return /* @__PURE__ */ o.jsx(\"div\", { ref: l, style: c, children: /* @__PURE__ */ o.jsx(h, { ...f, ...n }) });\n}, vo = {\n  \"Heading 1\": Qt,\n  \"Heading 2\": Xt,\n  \"Heading 3\": en,\n  \"Numbered List\": nn,\n  \"Bullet List\": rn,\n  Paragraph: ce,\n  Table: Lr,\n  Image: _r\n};\nfunction gn(e) {\n  return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getDefaultSlashMenuItems)(e).map((t) => {\n    const n = vo[t.title];\n    return {\n      ...t,\n      icon: /* @__PURE__ */ o.jsx(n, { size: 18 })\n    };\n  });\n}\nfunction po(e, t, n, r = 3) {\n  const i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    t !== void 0 && (e.length > 0 ? i.current = t.length : t.length - i.current > r && n());\n  }, [n, r, e.length, t]);\n}\nfunction ko(e, t) {\n  const [n, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [i, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const d = e;\n    c.current = e, l(!0), t(e).then((f) => {\n      c.current === d && (r(f), l(!1), s.current = d);\n    });\n  }, [e, t]), {\n    items: n || [],\n    // The query that was used to retrieve the last set of items may not be the\n    // same as the current query as the items from the current query may not\n    // have been retrieved yet. This is useful when using the returns of this\n    // hook in other hooks.\n    usedQuery: s.current,\n    loadingState: s.current === void 0 ? \"loading-initial\" : i ? \"loading\" : \"loaded\"\n  };\n}\nfunction yo(e, t, n, r) {\n  const [i, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const c = (s) => s.key === \"ArrowUp\" ? (s.preventDefault(), t.length && l((i - 1 + t.length) % t.length), !0) : s.key === \"ArrowDown\" ? (s.preventDefault(), t.length && l((i + 1) % t.length), !0) : s.key === \"Enter\" ? (s.preventDefault(), t.length && (r == null || r(t[i])), !0) : s.key === \"Escape\" ? (s.preventDefault(), n(), !0) : !1;\n    return e.domElement.addEventListener(\n      \"keydown\",\n      c,\n      !0\n    ), () => {\n      e.domElement.removeEventListener(\n        \"keydown\",\n        c,\n        !0\n      );\n    };\n  }, [n, e.domElement, t, i, r]), i;\n}\nfunction Co(e) {\n  const t = V(), {\n    getItems: n,\n    suggestionMenuComponent: r,\n    query: i,\n    clearQuery: l,\n    closeMenu: c,\n    onItemClick: s\n  } = e, d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (D) => {\n      c(), l(), s == null || s(D);\n    },\n    [s, c, l]\n  ), { items: f, usedQuery: h, loadingState: b } = ko(\n    i,\n    n\n  );\n  po(f, h, c);\n  const T = yo(\n    t,\n    f,\n    c,\n    d\n  ), C = r;\n  return /* @__PURE__ */ o.jsx(\n    C,\n    {\n      items: f,\n      onItemClick: d,\n      loadingState: b,\n      selectedIndex: T\n    }\n  );\n}\nconst So = 5;\nfunction jo(e) {\n  const t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  function n() {\n    var c;\n    const i = e.isSelected, l = (c = t.current) == null ? void 0 : c.matches(\":hover\");\n    return i || l;\n  }\n  function r() {\n    var i, l;\n    n() ? (i = t.current) == null || i.setAttribute(\"data-hovered\", \"true\") : (l = t.current) == null || l.removeAttribute(\"data-hovered\");\n  }\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    r(), n() && t.current && t.current.getBoundingClientRect().left > So && t.current.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"nearest\"\n    });\n  }), /* @__PURE__ */ o.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Item,\n    {\n      className: \"bn-slash-menu-item\",\n      onClick: e.onClick,\n      closeMenuOnClick: !1,\n      onMouseLeave: () => {\n        setTimeout(() => {\n          r();\n        }, 1);\n      },\n      leftSection: e.icon,\n      rightSection: e.badge && /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_20__.Badge, { size: \"xs\", children: e.badge }),\n      ref: t,\n      children: /* @__PURE__ */ o.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_6__.Stack, { children: [\n        /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_7__.Text, { lh: \"20px\", size: \"14px\", fw: 500, children: e.title }),\n        /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_7__.Text, { lh: \"16px\", size: \"10px\", children: e.subtext })\n      ] })\n    }\n  );\n}\nfunction wo(e) {\n  const { items: t, loadingState: n, selectedIndex: r, onItemClick: i } = e, l = n === \"loading-initial\" || n === \"loading\" ? /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_21__.Loader, { className: \"bn-slash-menu-loader\", type: \"dots\" }) : null, c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    let s;\n    const d = [];\n    for (let f = 0; f < t.length; f++) {\n      const h = t[f];\n      h.group !== s && (s = h.group, d.push(\n        /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Label, { children: s }, s)\n      )), d.push(\n        /* @__PURE__ */ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\n          jo,\n          {\n            ...h,\n            isSelected: f === r,\n            key: h.title,\n            onClick: () => i == null ? void 0 : i(h)\n          }\n        )\n      );\n    }\n    return d;\n  }, [t, r, i]);\n  return /* @__PURE__ */ o.jsx(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu,\n    {\n      withinPortal: !1,\n      trapFocus: !1,\n      defaultOpened: !0,\n      trigger: \"hover\",\n      closeDelay: 1e7,\n      children: /* @__PURE__ */ o.jsxs(\n        _mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Dropdown,\n        {\n          onMouseDown: (s) => s.preventDefault(),\n          className: \"bn-slash-menu\",\n          children: [\n            c,\n            react__WEBPACK_IMPORTED_MODULE_0__.Children.count(c) === 0 && (e.loadingState === \"loading\" || e.loadingState === \"loaded\") && /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Item, { children: \"No match found\" }),\n            l\n          ]\n        }\n      )\n    }\n  );\n}\nfunction To(e) {\n  const t = V(), { triggerCharacter: n, suggestionMenuComponent: r } = e;\n  let { onItemClick: i, getItems: l } = e;\n  i || (i = (b) => {\n    b.onItemClick(t);\n  });\n  const c = {\n    closeMenu: t.suggestionMenus.closeMenu,\n    clearQuery: t.suggestionMenus.clearQuery\n  }, s = te(\n    (b) => t.suggestionMenus.onUpdate.bind(t.suggestionMenus)(\n      n,\n      b\n    )\n  ), { isMounted: d, ref: f, style: h } = ge(\n    (s == null ? void 0 : s.show) || !1,\n    (s == null ? void 0 : s.referencePos) || null,\n    2e3,\n    {\n      placement: \"bottom-start\",\n      middleware: [\n        (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_18__.offset)(10),\n        // Flips the menu placement to maximize the space available, and prevents\n        // the menu from being cut off by the confines of the screen.\n        (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.flip)(),\n        (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.size)({\n          apply({ availableHeight: b, elements: T }) {\n            Object.assign(T.floating.style, {\n              maxHeight: `${b - 10}px`\n            });\n          }\n        })\n      ]\n    }\n  );\n  return !d || !s ? null : (l || (l = async (b) => (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.filterSuggestionItems)(\n    gn(t),\n    b\n  )), /* @__PURE__ */ o.jsx(\"div\", { ref: f, style: h, children: /* @__PURE__ */ o.jsx(\n    Co,\n    {\n      query: s.query,\n      closeMenu: c.closeMenu,\n      clearQuery: c.clearQuery,\n      getItems: l,\n      suggestionMenuComponent: r || wo,\n      onItemClick: i\n    }\n  ) }));\n}\nfunction Ho(e, t, n) {\n  return n && n.draggedCellOrientation === \"row\" ? new DOMRect(\n    t.x,\n    n.mousePos,\n    t.width,\n    0\n  ) : new DOMRect(\n    t.x,\n    e.y,\n    t.width,\n    e.height\n  );\n}\nfunction Eo(e, t, n) {\n  return n && n.draggedCellOrientation === \"col\" ? new DOMRect(\n    n.mousePos,\n    t.y,\n    0,\n    t.height\n  ) : new DOMRect(\n    e.x,\n    t.y,\n    e.width,\n    t.height\n  );\n}\nfunction Mt(e, t, n, r, i) {\n  const { refs: l, update: c, context: s, floatingStyles: d } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useFloating)({\n    open: t,\n    placement: e === \"row\" ? \"left\" : \"top\",\n    middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_18__.offset)(e === \"row\" ? -10 : -12)]\n  }), { isMounted: f, styles: h } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_4__.useTransitionStyles)(s);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    c();\n  }, [n, r, c]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    n === null || r === null || l.setReference({\n      getBoundingClientRect: () => (e === \"row\" ? Ho : Eo)(n, r, i)\n    });\n  }, [i, e, n, r, l]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => ({\n      isMounted: f,\n      ref: l.setFloating,\n      style: {\n        display: \"flex\",\n        ...h,\n        ...d,\n        zIndex: 1e4\n      }\n    }),\n    [d, f, l.setFloating, h]\n  );\n}\nfunction Mo(e, t, n, r) {\n  const i = Mt(\n    \"row\",\n    e,\n    t,\n    n,\n    r\n  ), l = Mt(\n    \"col\",\n    e,\n    t,\n    n,\n    r\n  );\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(\n    () => ({\n      rowHandle: i,\n      colHandle: l\n    }),\n    [l, i]\n  );\n}\nconst Ro = (e) => /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Dropdown, { className: \"bn-table-handle-menu\", children: e.children }), Te = (e) => {\n  const { children: t, ...n } = e;\n  return /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Item, { ...n, children: t });\n}, Vo = (e) => /* @__PURE__ */ o.jsx(\n  Te,\n  {\n    onClick: () => {\n      const t = e.block.content.rows[e.index].cells.map(\n        () => []\n      ), n = [...e.block.content.rows];\n      n.splice(e.index + (e.side === \"below\" ? 1 : 0), 0, {\n        cells: t\n      }), e.editor.updateBlock(e.block, {\n        type: \"table\",\n        content: {\n          type: \"tableContent\",\n          rows: n\n        }\n      });\n    },\n    children: `Add row ${e.side}`\n  }\n), Bo = (e) => /* @__PURE__ */ o.jsx(\n  Te,\n  {\n    onClick: () => {\n      const t = {\n        type: \"tableContent\",\n        rows: e.block.content.rows.map((n) => {\n          const r = [...n.cells];\n          return r.splice(e.index + (e.side === \"right\" ? 1 : 0), 0, []), { cells: r };\n        })\n      };\n      e.editor.updateBlock(e.block, {\n        type: \"table\",\n        content: t\n      });\n    },\n    children: `Add column ${e.side}`\n  }\n), Rt = (e) => e.orientation === \"row\" ? /* @__PURE__ */ o.jsx(Vo, { ...e, side: e.side }) : /* @__PURE__ */ o.jsx(Bo, { ...e, side: e.side }), Lo = (e) => /* @__PURE__ */ o.jsx(\n  Te,\n  {\n    onClick: () => {\n      const t = {\n        type: \"tableContent\",\n        rows: e.block.content.rows.filter(\n          (n, r) => r !== e.index\n        )\n      };\n      e.editor.updateBlock(e.block, {\n        type: \"table\",\n        content: t\n      });\n    },\n    children: \"Delete row\"\n  }\n), Do = (e) => /* @__PURE__ */ o.jsx(\n  Te,\n  {\n    onClick: () => {\n      const t = {\n        type: \"tableContent\",\n        rows: e.block.content.rows.map((n) => ({\n          cells: n.cells.filter((r, i) => i !== e.index)\n        }))\n      };\n      e.editor.updateBlock(e.block, {\n        type: \"table\",\n        content: t\n      });\n    },\n    children: \"Delete column\"\n  }\n), _o = (e) => e.orientation === \"row\" ? /* @__PURE__ */ o.jsx(Lo, { ...e }) : /* @__PURE__ */ o.jsx(Do, { ...e }), Io = (e) => /* @__PURE__ */ o.jsxs(Ro, { children: [\n  /* @__PURE__ */ o.jsx(\n    _o,\n    {\n      orientation: e.orientation,\n      editor: e.editor,\n      block: e.block,\n      index: e.index\n    }\n  ),\n  /* @__PURE__ */ o.jsx(\n    Rt,\n    {\n      orientation: e.orientation,\n      editor: e.editor,\n      block: e.block,\n      index: e.index,\n      side: e.orientation === \"row\" ? \"above\" : \"left\"\n    }\n  ),\n  /* @__PURE__ */ o.jsx(\n    Rt,\n    {\n      orientation: e.orientation,\n      editor: e.editor,\n      block: e.block,\n      index: e.index,\n      side: e.orientation === \"row\" ? \"below\" : \"right\"\n    }\n  )\n] }), Oo = (e) => {\n  const t = e.tableHandleMenu || Io, [n, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n  return /* @__PURE__ */ o.jsxs(\n    _mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu,\n    {\n      withinPortal: !1,\n      trigger: \"click\",\n      onOpen: () => {\n        e.freezeHandles(), e.hideOtherSide();\n      },\n      onClose: () => {\n        e.unfreezeHandles(), e.showOtherSide();\n      },\n      position: \"right\",\n      children: [\n        /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Menu.Target, { children: /* @__PURE__ */ o.jsx(\n          \"div\",\n          {\n            className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\n              \"bn-table-handle\",\n              n ? \"bn-table-handle-dragging\" : \"\"\n            ),\n            draggable: \"true\",\n            onDragStart: (i) => {\n              r(!0), e.dragStart(i);\n            },\n            onDragEnd: () => {\n              e.dragEnd(), r(!1);\n            },\n            style: e.orientation === \"column\" ? { transform: \"rotate(0.25turn)\" } : void 0,\n            children: e.children\n          }\n        ) }),\n        /* @__PURE__ */ o.jsx(\n          t,\n          {\n            orientation: e.orientation,\n            editor: e.editor,\n            block: e.block,\n            index: e.index\n          }\n        )\n      ]\n    }\n  );\n}, Po = (e) => /* @__PURE__ */ o.jsx(Oo, { ...e, children: /* @__PURE__ */ o.jsx(dn, { size: 24, \"data-test\": \"tableHandle\" }) }), Ao = (e) => {\n  var b, T;\n  const t = V();\n  if (!t.tableHandles)\n    throw new Error(\n      \"TableHandlesController can only be used when BlockNote editor schema contains table block\"\n    );\n  const n = {\n    rowDragStart: t.tableHandles.rowDragStart,\n    colDragStart: t.tableHandles.colDragStart,\n    dragEnd: t.tableHandles.dragEnd,\n    freezeHandles: t.tableHandles.freezeHandles,\n    unfreezeHandles: t.tableHandles.unfreezeHandles\n  }, r = te(\n    t.tableHandles.onUpdate.bind(t.tableHandles)\n  ), { rowHandle: i, colHandle: l } = Mo(\n    (r == null ? void 0 : r.show) || !1,\n    (r == null ? void 0 : r.referencePosCell) || null,\n    (r == null ? void 0 : r.referencePosTable) || null,\n    r != null && r.draggingState ? {\n      draggedCellOrientation: (b = r == null ? void 0 : r.draggingState) == null ? void 0 : b.draggedCellOrientation,\n      mousePos: (T = r == null ? void 0 : r.draggingState) == null ? void 0 : T.mousePos\n    } : void 0\n  ), [c, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [d, f] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n  if (!i.isMounted || !l.isMounted || !r)\n    return null;\n  const h = e.tableHandle || Po;\n  return /* @__PURE__ */ o.jsxs(o.Fragment, { children: [\n    !c && /* @__PURE__ */ o.jsx(\"div\", { ref: i.ref, style: i.style, children: /* @__PURE__ */ o.jsx(\n      h,\n      {\n        editor: t,\n        orientation: \"row\",\n        showOtherSide: () => f(!1),\n        hideOtherSide: () => f(!0),\n        index: r.rowIndex,\n        block: r.block,\n        dragStart: n.rowDragStart,\n        dragEnd: n.dragEnd,\n        freezeHandles: n.freezeHandles,\n        unfreezeHandles: n.unfreezeHandles\n      }\n    ) }),\n    !d && /* @__PURE__ */ o.jsx(\"div\", { ref: l.ref, style: l.style, children: /* @__PURE__ */ o.jsx(\n      h,\n      {\n        editor: t,\n        orientation: \"column\",\n        showOtherSide: () => s(!1),\n        hideOtherSide: () => s(!0),\n        index: r.colIndex,\n        block: r.block,\n        dragStart: n.colDragStart,\n        dragEnd: n.dragEnd,\n        freezeHandles: n.freezeHandles,\n        unfreezeHandles: n.unfreezeHandles\n      }\n    ) })\n  ] });\n};\nfunction Fo(e) {\n  const t = V();\n  if (!t)\n    throw new Error(\n      \"BlockNoteDefaultUI must be used within a BlockNoteContext.Provider\"\n    );\n  return /* @__PURE__ */ o.jsxs(o.Fragment, { children: [\n    e.formattingToolbar !== !1 && /* @__PURE__ */ o.jsx(ao, {}),\n    e.hyperlinkToolbar !== !1 && /* @__PURE__ */ o.jsx(lo, {}),\n    e.slashMenu !== !1 && /* @__PURE__ */ o.jsx(\n      To,\n      {\n        getItems: async (n) => (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.filterSuggestionItems)(gn(t), n),\n        onItemClick: (n) => {\n          n.onItemClick();\n        },\n        triggerCharacter: \"/\"\n      }\n    ),\n    e.sideMenu !== !1 && /* @__PURE__ */ o.jsx(xo, {}),\n    t.imageToolbar && e.imageToolbar !== !1 && /* @__PURE__ */ o.jsx(so, {}),\n    t.tableHandles && e.tableHandles !== !1 && /* @__PURE__ */ o.jsx(Ao, {})\n  ] });\n}\nconst hn = (e, t, n = !1) => {\n  const r = [];\n  function i(l, c = \"--bn\") {\n    for (const s in l) {\n      const d = s.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase(), f = `${c}-${d}`;\n      typeof l[s] != \"object\" ? (typeof l[s] == \"number\" && (l[s] = `${l[s]}px`), n ? t.style.removeProperty(f) : t.style.setProperty(f, l[s].toString())) : i(l[s], f);\n    }\n  }\n  return i(e), r;\n}, Vt = (e, t) => hn(e, t), No = {\n  colors: {\n    editor: {\n      text: void 0,\n      background: void 0\n    },\n    menu: {\n      text: void 0,\n      background: void 0\n    },\n    tooltip: {\n      text: void 0,\n      background: void 0\n    },\n    hovered: {\n      text: void 0,\n      background: void 0\n    },\n    selected: {\n      text: void 0,\n      background: void 0\n    },\n    disabled: {\n      text: void 0,\n      background: void 0\n    },\n    shadow: void 0,\n    border: void 0,\n    sideMenu: void 0,\n    highlights: {\n      gray: {\n        text: void 0,\n        background: void 0\n      },\n      brown: {\n        text: void 0,\n        background: void 0\n      },\n      red: {\n        text: void 0,\n        background: void 0\n      },\n      orange: {\n        text: void 0,\n        background: void 0\n      },\n      yellow: {\n        text: void 0,\n        background: void 0\n      },\n      green: {\n        text: void 0,\n        background: void 0\n      },\n      blue: {\n        text: void 0,\n        background: void 0\n      },\n      purple: {\n        text: void 0,\n        background: void 0\n      },\n      pink: {\n        text: void 0,\n        background: void 0\n      }\n    }\n  },\n  borderRadius: void 0,\n  fontFamily: void 0\n}, Zo = (e) => hn(No, e, !0);\nfunction zo(e) {\n  return (t) => {\n    e.forEach((n) => {\n      typeof n == \"function\" ? n(t) : n != null && (n.current = t);\n    });\n  };\n}\nconst Uo = ({\n  renderers: e\n}) => /* @__PURE__ */ o.jsx(o.Fragment, { children: Object.entries(e).map(([t, n]) => (0,react_dom__WEBPACK_IMPORTED_MODULE_3__.createPortal)(n.reactElement, n.element, t)) });\nfunction $o(e) {\n  const [t, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (e.editor._tiptapEditor.contentComponent = {\n    setRenderer(r, i) {\n      n((l) => ({ ...l, [r]: i }));\n    },\n    removeRenderer(r) {\n      n((i) => {\n        const l = { ...i };\n        return delete l[r], l;\n      });\n    }\n  }, queueMicrotask(() => {\n    e.editor._tiptapEditor.createNodeViews();\n  }), () => {\n    e.editor._tiptapEditor.contentComponent = null;\n  }), [e.editor._tiptapEditor]), /* @__PURE__ */ o.jsxs(o.Fragment, { children: [\n    /* @__PURE__ */ o.jsx(Uo, { renderers: t }),\n    e.children\n  ] });\n}\nconst Wo = {\n  // Removes button press effect\n  activeClassName: \"\"\n}, Bt = () => {\n};\nfunction qo(e, t) {\n  const {\n    editor: n,\n    className: r,\n    theme: i,\n    children: l,\n    editable: c,\n    onSelectionChange: s,\n    onChange: d,\n    formattingToolbar: f,\n    hyperlinkToolbar: h,\n    slashMenu: b,\n    sideMenu: T,\n    imageToolbar: C,\n    tableHandles: D,\n    ...ne\n  } = e, F = ee(), O = (0,use_prefers_color_scheme__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(), M = (F == null ? void 0 : F.colorSchemePreference) || O, [He, $] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), he = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (W) => {\n      if (W) {\n        if (Zo(W), i === \"light\") {\n          $(\"light\");\n          return;\n        }\n        if (i === \"dark\") {\n          $(\"dark\");\n          return;\n        }\n        if (typeof i == \"object\") {\n          if (\"light\" in i && \"dark\" in i) {\n            Vt(\n              i[M === \"dark\" ? \"dark\" : \"light\"],\n              W\n            ), $(\n              M === \"dark\" ? \"dark\" : \"light\"\n            );\n            return;\n          }\n          Vt(i, W), $(void 0);\n          return;\n        }\n        $(M === \"dark\" ? \"dark\" : \"light\");\n      }\n    },\n    [M, i]\n  );\n  Je(d || Bt, n), Qe(s || Bt, n), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    n.isEditable = c !== !1;\n  }, [c, n]);\n  const Ee = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => /* @__PURE__ */ o.jsxs(o.Fragment, { children: [\n    l,\n    /* @__PURE__ */ o.jsx(\n      Fo,\n      {\n        formattingToolbar: f,\n        hyperlinkToolbar: h,\n        slashMenu: b,\n        sideMenu: T,\n        imageToolbar: C,\n        tableHandles: D\n      }\n    )\n  ] }), [\n    l,\n    f,\n    h,\n    C,\n    T,\n    b,\n    D\n  ]), Me = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    ...F,\n    editor: n\n  }), [F, n]), Re = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => zo([he, n._tiptapEditor.mount, t]), [he, n._tiptapEditor.mount, t]);\n  return (\n    // `cssVariablesSelector` scopes Mantine CSS variables to only the editor,\n    // as proposed here:  https://github.com/orgs/mantinedev/discussions/5685\n    /* @__PURE__ */ o.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_22__.MantineProvider, { theme: Wo, cssVariablesSelector: \".bn-container\", children: /* @__PURE__ */ o.jsx(Kt.Provider, { value: Me, children: /* @__PURE__ */ o.jsx($o, { editor: n, children: /* @__PURE__ */ o.jsx(\n      \"div\",\n      {\n        className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\"bn-container\", r || \"\"),\n        \"data-color-scheme\": He,\n        ...ne,\n        ref: Re,\n        children: Ee\n      }\n    ) }) }) })\n  );\n}\nconst oa = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  qo\n), y = [\n  \"#FFFFFF\",\n  \"#EFEFEF\",\n  \"#CFCFCF\",\n  \"#AFAFAF\",\n  \"#7F7F7F\",\n  \"#3F3F3F\",\n  \"#1F1F1F\",\n  \"#161616\",\n  \"#0F0F0F\",\n  \"#000000\"\n], Lt = {\n  colors: {\n    editor: {\n      text: y[5],\n      background: y[0]\n    },\n    menu: {\n      text: y[5],\n      background: y[0]\n    },\n    tooltip: {\n      text: y[5],\n      background: y[1]\n    },\n    hovered: {\n      text: y[5],\n      background: y[1]\n    },\n    selected: {\n      text: y[0],\n      background: y[5]\n    },\n    disabled: {\n      text: y[3],\n      background: y[1]\n    },\n    shadow: y[2],\n    border: y[1],\n    sideMenu: y[2],\n    highlights: {\n      gray: {\n        text: \"#9b9a97\",\n        background: \"#ebeced\"\n      },\n      brown: {\n        text: \"#64473a\",\n        background: \"#e9e5e3\"\n      },\n      red: {\n        text: \"#e03e3e\",\n        background: \"#fbe4e4\"\n      },\n      orange: {\n        text: \"#d9730d\",\n        background: \"#f6e9d9\"\n      },\n      yellow: {\n        text: \"#dfab01\",\n        background: \"#fbf3db\"\n      },\n      green: {\n        text: \"#4d6461\",\n        background: \"#ddedea\"\n      },\n      blue: {\n        text: \"#0b6e99\",\n        background: \"#ddebf1\"\n      },\n      purple: {\n        text: \"#6940a5\",\n        background: \"#eae4f2\"\n      },\n      pink: {\n        text: \"#ad1a72\",\n        background: \"#f4dfeb\"\n      }\n    }\n  },\n  borderRadius: 6,\n  fontFamily: '\"Inter\", \"SF Pro Display\", -apple-system, BlinkMacSystemFont, \"Open Sans\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n}, aa = {\n  colors: {\n    editor: {\n      text: y[2],\n      background: y[6]\n    },\n    menu: {\n      text: y[2],\n      background: y[6]\n    },\n    tooltip: {\n      text: y[2],\n      background: y[7]\n    },\n    hovered: {\n      text: y[2],\n      background: y[7]\n    },\n    selected: {\n      text: y[2],\n      background: y[8]\n    },\n    disabled: {\n      text: y[5],\n      background: y[7]\n    },\n    shadow: y[8],\n    border: y[7],\n    sideMenu: y[4],\n    highlights: {\n      gray: {\n        text: \"#bebdb8\",\n        background: \"#9b9a97\"\n      },\n      brown: {\n        text: \"#8e6552\",\n        background: \"#64473a\"\n      },\n      red: {\n        text: \"#ec4040\",\n        background: \"#be3434\"\n      },\n      orange: {\n        text: \"#e3790d\",\n        background: \"#b7600a\"\n      },\n      yellow: {\n        text: \"#dfab01\",\n        background: \"#b58b00\"\n      },\n      green: {\n        text: \"#6b8b87\",\n        background: \"#4d6461\"\n      },\n      blue: {\n        text: \"#0e87bc\",\n        background: \"#0b6e99\"\n      },\n      purple: {\n        text: \"#8552d7\",\n        background: \"#6940a5\"\n      },\n      pink: {\n        text: \"#da208f\",\n        background: \"#ad1a72\"\n      }\n    }\n  },\n  borderRadius: Lt.borderRadius,\n  fontFamily: Lt.fontFamily\n};\nfunction ia(e) {\n  const t = ee();\n  if (e || (e = t == null ? void 0 : t.editor), !e)\n    throw new Error(\n      \"'editor' is required, either from BlockNoteContext or as a function argument\"\n    );\n  const n = e, [r, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => n.getActiveStyles());\n  return Je(() => {\n    i(n.getActiveStyles());\n  }, n), Qe(() => {\n    i(n.getActiveStyles());\n  }, n), r;\n}\nconst Yo = (e = {}, t = []) => (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n  const n = _blocknote_core__WEBPACK_IMPORTED_MODULE_1__.BlockNoteEditor.create(e);\n  return window && (window.ProseMirror = n._tiptapEditor), n;\n}, t), la = Yo;\nfunction Ko() {\n  const [, e] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  return () => e((t) => t + 1);\n}\nconst sa = (e) => {\n  const t = Ko();\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const n = () => {\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          t();\n        });\n      });\n    };\n    return e.on(\"transaction\", n), () => {\n      e.off(\"transaction\", n);\n    };\n  }, [e]);\n};\nvar qe, ye = react_dom__WEBPACK_IMPORTED_MODULE_3__;\nif (false)\n  {}\nelse {\n  var Dt = ye.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  qe = function(e, t) {\n    Dt.usingClientEntryPoint = !0;\n    try {\n      return ye.createRoot(e, t);\n    } finally {\n      Dt.usingClientEntryPoint = !1;\n    }\n  };\n}\nfunction Se(e) {\n  let t;\n  const n = document.createElement(\"div\"), r = qe(n);\n  if ((0,react_dom__WEBPACK_IMPORTED_MODULE_3__.flushSync)(() => {\n    r.render(e((s) => t = s || void 0));\n  }), !n.childElementCount)\n    return console.warn(\"ReactInlineContentSpec: renderHTML() failed\"), {\n      dom: document.createElement(\"span\")\n    };\n  t == null || t.setAttribute(\"data-tmp-find\", \"true\");\n  const i = n.cloneNode(!0), l = i.firstElementChild, c = i.querySelector(\n    \"[data-tmp-find]\"\n  );\n  return c == null || c.removeAttribute(\"data-tmp-find\"), r.unmount(), {\n    dom: l,\n    contentDOM: c || void 0\n  };\n}\nfunction Fe(e) {\n  var t;\n  return (\n    // Creates `blockContent` element\n    /* @__PURE__ */ o.jsx(\n      _tiptap_react__WEBPACK_IMPORTED_MODULE_23__.NodeViewWrapper,\n      {\n        ...Object.fromEntries(\n          Object.entries(e.domAttributes || {}).filter(\n            ([n]) => n !== \"class\"\n          )\n        ),\n        className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\n          \"bn-block-content\",\n          ((t = e.domAttributes) == null ? void 0 : t.class) || \"\"\n        ),\n        \"data-content-type\": e.blockType,\n        ...Object.fromEntries(\n          Object.entries(e.blockProps).filter(\n            ([n, r]) => !_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.inheritedProps.includes(n) && r !== e.propSchema[n].default\n          ).map(([n, r]) => [(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.camelToDataKebab)(n), r])\n        ),\n        children: e.children\n      }\n    )\n  );\n}\nfunction ca(e, t) {\n  const n = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.createStronglyTypedTiptapNode)({\n    name: e.type,\n    content: e.content === \"inline\" ? \"inline*\" : \"\",\n    group: \"blockContent\",\n    selectable: !0,\n    addAttributes() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.propsToAttributes)(e.propSchema);\n    },\n    parseHTML() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getParseRules)(e, t.parse);\n    },\n    renderHTML() {\n      const r = document.createElement(\"div\");\n      return r.setAttribute(\"data-tmp-placeholder\", \"true\"), {\n        dom: r\n      };\n    },\n    addNodeView() {\n      return (r) => (0,_tiptap_react__WEBPACK_IMPORTED_MODULE_23__.ReactNodeViewRenderer)(\n        (i) => {\n          var h;\n          const l = this.options.editor, c = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getBlockFromPos)(\n            i.getPos,\n            l,\n            this.editor,\n            e.type\n          ), s = ((h = this.options.domAttributes) == null ? void 0 : h.blockContent) || {}, d = (0,_tiptap_react__WEBPACK_IMPORTED_MODULE_23__.NodeViewContent)({}).ref, f = t.render;\n          return /* @__PURE__ */ o.jsx(\n            Fe,\n            {\n              blockType: c.type,\n              blockProps: c.props,\n              propSchema: e.propSchema,\n              domAttributes: s,\n              children: /* @__PURE__ */ o.jsx(\n                f,\n                {\n                  block: c,\n                  editor: l,\n                  contentRef: d\n                }\n              )\n            }\n          );\n        },\n        {\n          className: \"bn-react-node-view-renderer\"\n        }\n      )(r);\n    }\n  });\n  return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.createInternalBlockSpec)(e, {\n    node: n,\n    toInternalHTML: (r, i) => {\n      var d, f;\n      const l = ((d = n.options.domAttributes) == null ? void 0 : d.blockContent) || {}, c = t.render, s = Se((h) => /* @__PURE__ */ o.jsx(\n        Fe,\n        {\n          blockType: r.type,\n          blockProps: r.props,\n          propSchema: e.propSchema,\n          domAttributes: l,\n          children: /* @__PURE__ */ o.jsx(\n            c,\n            {\n              block: r,\n              editor: i,\n              contentRef: h\n            }\n          )\n        }\n      ));\n      return (f = s.contentDOM) == null || f.setAttribute(\"data-editable\", \"\"), s;\n    },\n    toExternalHTML: (r, i) => {\n      var d, f;\n      const l = ((d = n.options.domAttributes) == null ? void 0 : d.blockContent) || {}, c = t.toExternalHTML || t.render, s = Se((h) => /* @__PURE__ */ o.jsx(\n        Fe,\n        {\n          blockType: r.type,\n          blockProps: r.props,\n          propSchema: e.propSchema,\n          domAttributes: l,\n          children: /* @__PURE__ */ o.jsx(\n            c,\n            {\n              block: r,\n              editor: i,\n              contentRef: h\n            }\n          )\n        }\n      ));\n      return (f = s.contentDOM) == null || f.setAttribute(\"data-editable\", \"\"), s;\n    }\n  });\n}\nfunction Go(e, t, n, r) {\n  return () => (\n    // Creates inline content section element\n    /* @__PURE__ */ o.jsx(\n      _tiptap_react__WEBPACK_IMPORTED_MODULE_23__.NodeViewWrapper,\n      {\n        as: \"span\",\n        className: \"bn-inline-content-section\",\n        \"data-inline-content-type\": t,\n        ...Object.fromEntries(\n          Object.entries(n).filter(([i, l]) => l !== r[i].default).map(([i, l]) => [(0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.camelToDataKebab)(i), l])\n        ),\n        children: e\n      }\n    )\n  );\n}\nfunction ua(e, t) {\n  const n = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.createStronglyTypedTiptapNode)({\n    name: e.type,\n    inline: !0,\n    group: \"inline\",\n    selectable: e.content === \"styled\",\n    atom: e.content === \"none\",\n    content: e.content === \"styled\" ? \"inline*\" : \"\",\n    addAttributes() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.propsToAttributes)(e.propSchema);\n    },\n    addKeyboardShortcuts() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.addInlineContentKeyboardShortcuts)(e);\n    },\n    parseHTML() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getInlineContentParseRules)(e);\n    },\n    renderHTML({ node: r }) {\n      const i = this.options.editor, l = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.nodeToCustomInlineContent)(\n        r,\n        i.schema.inlineContentSchema,\n        i.schema.styleSchema\n      ), c = t.render, s = Se((d) => /* @__PURE__ */ o.jsx(c, { inlineContent: l, contentRef: d }));\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.addInlineContentAttributes)(\n        s,\n        e.type,\n        r.attrs,\n        e.propSchema\n      );\n    },\n    // TODO: needed?\n    addNodeView() {\n      const r = this.options.editor;\n      return (i) => (0,_tiptap_react__WEBPACK_IMPORTED_MODULE_23__.ReactNodeViewRenderer)(\n        (l) => {\n          const c = (0,_tiptap_react__WEBPACK_IMPORTED_MODULE_23__.NodeViewContent)({}).ref, s = t.render, d = Go(\n            /* @__PURE__ */ o.jsx(\n              s,\n              {\n                contentRef: c,\n                inlineContent: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.nodeToCustomInlineContent)(\n                  l.node,\n                  r.schema.inlineContentSchema,\n                  r.schema.styleSchema\n                )\n              }\n            ),\n            e.type,\n            l.node.attrs,\n            e.propSchema\n          );\n          return /* @__PURE__ */ o.jsx(d, {});\n        },\n        {\n          className: \"bn-ic-react-node-view-renderer\",\n          as: \"span\"\n          // contentDOMElementTag: \"span\", (requires tt upgrade)\n        }\n      )(i);\n    }\n  });\n  return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.createInternalInlineContentSpec)(e, {\n    node: n\n  });\n}\nfunction da(e, t) {\n  const n = _tiptap_react__WEBPACK_IMPORTED_MODULE_24__.Mark.create({\n    name: e.type,\n    addAttributes() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.stylePropsToAttributes)(e.propSchema);\n    },\n    parseHTML() {\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getStyleParseRules)(e);\n    },\n    renderHTML({ mark: r }) {\n      const i = {};\n      e.propSchema === \"string\" && (i.value = r.attrs.stringValue);\n      const l = t.render, c = Se((s) => /* @__PURE__ */ o.jsx(l, { ...i, contentRef: s }));\n      return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.addStyleAttributes)(\n        c,\n        e.type,\n        r.attrs.stringValue,\n        e.propSchema\n      );\n    }\n  });\n  return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.createInternalStyleSpec)(e, {\n    mark: n\n  });\n}\n\n//# sourceMappingURL=blocknote-react.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@blocknote/react/dist/blocknote-react.js\n");

/***/ })

};
;